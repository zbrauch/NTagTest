
NTagTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2ec  0800a2ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2ec  0800a2ec  0001a2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f4  0800a2f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2f8  0800a2f8  0001a2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800a2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c48  24000078  0800a374  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004cc0  0800a374  00024cc0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd93  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f1  00000000  00000000  0004be39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  00050630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c48  00000000  00000000  00052410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045ca5  00000000  00000000  00054058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000278ea  00000000  00000000  00099cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b42e3  00000000  00000000  000c15e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002758ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084d8  00000000  00000000  0027591c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a160 	.word	0x0800a160

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800a160 	.word	0x0800a160

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <_ZN9NTagRC52213WriteRegisterEhh>:
#include "NTagRC522.h"



//write 8 bits to the specified address
uint8_t NTagRC522::WriteRegister(uint8_t reg_addr, uint8_t write_data) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
 80007cc:	4613      	mov	r3, r2
 80007ce:	70bb      	strb	r3, [r7, #2]
	uint8_t transmit[2];
	transmit[0] = reg_addr << 1;
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	733b      	strb	r3, [r7, #12]
	transmit[1] = write_data;
 80007d8:	78bb      	ldrb	r3, [r7, #2]
 80007da:	737b      	strb	r3, [r7, #13]

	uint8_t ret;
	ret = HAL_SPI_Transmit(SPIHandle, transmit, 2, HAL_MAX_DELAY);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f107 010c 	add.w	r1, r7, #12
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2202      	movs	r2, #2
 80007ea:	f004 f911 	bl	8004a10 <HAL_SPI_Transmit>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]
	//ret = HAL_I2C_Master_Transmit(I2CHandle, i2c_addr, &reg_addr, 1, HAL_MAX_DELAY);
	//if(ret != HAL_OK) panic

	return ret;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN9NTagRC52212ReadRegisterEh>:
//read 8 bits from the specified address
uint8_t NTagRC522::ReadRegister(uint8_t reg_addr) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	//Since my spi is full duplex, I need two bits for send/recv. One is dummy.
	uint8_t received[2];
	uint8_t transmit[2];
	transmit[0] = (reg_addr << 1) | 0x80; //set first bit to denote read
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	b25b      	sxtb	r3, r3
 800080e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000812:	b25b      	sxtb	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	723b      	strb	r3, [r7, #8]
	transmit[1] = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	727b      	strb	r3, [r7, #9]

	uint8_t ret;
	ret = HAL_SPI_TransmitReceive(SPIHandle, transmit, received, 2, HAL_MAX_DELAY);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	f107 020c 	add.w	r2, r7, #12
 8000824:	f107 0108 	add.w	r1, r7, #8
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2302      	movs	r3, #2
 8000830:	f004 fae0 	bl	8004df4 <HAL_SPI_TransmitReceive>
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
	//if(ret != HAL_OK) panic
	uint8_t received[2];
	ret = HAL_SPI_Receive(SPIHandle, received, 2, HAL_MAX_DELAY);
	//if(ret != HAL_OK) panic*/

	return received[1];
 8000838:	7b7b      	ldrb	r3, [r7, #13]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_ZN9NTagRC52212SetSPIHandleEP19__SPI_HandleTypeDef>:

//end of private functions

void NTagRC522::SetSPIHandle(SPI_HandleTypeDef *spi) {
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
	SPIHandle = spi;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <_ZN9NTagRC52213GetWaterLevelEv>:
uint8_t NTagRC522::SanityCheck2() {
	//return this->ReadRegister(0x3C);
	return this->ReadRegister(0x2E);
}

uint8_t NTagRC522::GetWaterLevel() {
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	return this->ReadRegister(this->WaterLevelReg);
 8000866:	210b      	movs	r1, #11
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ffc7 	bl	80007fc <_ZN9NTagRC52212ReadRegisterEh>
 800086e:	4603      	mov	r3, r0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <_ZN9NTagRC52213SetWaterLevelEh>:
uint8_t NTagRC522::SetWaterLevel(uint8_t set_value) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
	return this->WriteRegister(this->WaterLevelReg, set_value);
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	461a      	mov	r2, r3
 8000888:	210b      	movs	r1, #11
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ff98 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <_Z6vprintPKcSt9__va_list>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0b4      	sub	sp, #208	; 0xd0
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f009 f8b2 	bl	8009a18 <vsiprintf>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bfcc      	ite	gt
 80008ba:	2301      	movgt	r3, #1
 80008bc:	2300      	movle	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d00c      	beq.n	80008de <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fd09 	bl	80002e0 <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	f107 0108 	add.w	r1, r7, #8
 80008d6:	230a      	movs	r3, #10
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <_Z6vprintPKcSt9__va_list+0x4c>)
 80008da:	f005 f8c5 	bl	8005a68 <HAL_UART_Transmit>
    }
}
 80008de:	bf00      	nop
 80008e0:	37d0      	adds	r7, #208	; 0xd0
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	240001b4 	.word	0x240001b4

080008ec <_Z7vprintfPKcz>:

void vprintf(const char *fmt, ...) // custom printf() function
{
 80008ec:	b40f      	push	{r0, r1, r2, r3}
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	6938      	ldr	r0, [r7, #16]
 80008fe:	f7ff ffcd 	bl	800089c <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800090c:	b004      	add	sp, #16
 800090e:	4770      	bx	lr

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800091c:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <main+0xe0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <main+0x26>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	dd01      	ble.n	8000936 <main+0x26>
 8000932:	2301      	movs	r3, #1
 8000934:	e000      	b.n	8000938 <main+0x28>
 8000936:	2300      	movs	r3, #0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d000      	beq.n	800093e <main+0x2e>
 800093c:	e7ee      	b.n	800091c <main+0xc>
  if ( timeout < 0 )
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	da01      	bge.n	8000948 <main+0x38>
  {
  Error_Handler();
 8000944:	f000 fbe6 	bl	8001114 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f000 fea4 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f85e 	bl	8000a0c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000950:	f000 f8fc 	bl	8000b4c <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <main+0xe0>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <main+0xe0>)
 800095c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <main+0xe0>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000972:	2000      	movs	r0, #0
 8000974:	f001 f9a0 	bl	8001cb8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000978:	2100      	movs	r1, #0
 800097a:	2000      	movs	r0, #0
 800097c:	f001 f9b6 	bl	8001cec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000984:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <main+0xe0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d106      	bne.n	80009a0 <main+0x90>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	1e5a      	subs	r2, r3, #1
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	dd01      	ble.n	80009a0 <main+0x90>
 800099c:	2301      	movs	r3, #1
 800099e:	e000      	b.n	80009a2 <main+0x92>
 80009a0:	2300      	movs	r3, #0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d000      	beq.n	80009a8 <main+0x98>
 80009a6:	e7ee      	b.n	8000986 <main+0x76>
if ( timeout < 0 )
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da01      	bge.n	80009b2 <main+0xa2>
{
Error_Handler();
 80009ae:	f000 fbb1 	bl	8001114 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f000 fa55 	bl	8000e60 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80009b6:	f000 f9f3 	bl	8000da0 <_ZL19MX_USART1_UART_Initv>
  MX_I2C1_Init();
 80009ba:	f000 f8f9 	bl	8000bb0 <_ZL12MX_I2C1_Initv>
  MX_I2C4_Init();
 80009be:	f000 f945 	bl	8000c4c <_ZL12MX_I2C4_Initv>
  MX_SPI5_Init();
 80009c2:	f000 f991 	bl	8000ce8 <_ZL12MX_SPI5_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009c6:	f006 f949 	bl	8006c5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <main+0xe4>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <main+0xe8>)
 80009d0:	f006 f98e 	bl	8006cf0 <osThreadNew>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <main+0xec>)
 80009d8:	6013      	str	r3, [r2, #0]

  /* creation of NTagTask */
  NTagTaskHandle = osThreadNew(StartNTagTask, NULL, &NTagTask_attributes);
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <main+0xf0>)
 80009dc:	2100      	movs	r1, #0
 80009de:	4809      	ldr	r0, [pc, #36]	; (8000a04 <main+0xf4>)
 80009e0:	f006 f986 	bl	8006cf0 <osThreadNew>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <main+0xf8>)
 80009e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009ea:	f006 f95b 	bl	8006ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <main+0xde>
 80009f0:	58024400 	.word	0x58024400
 80009f4:	0800a1e8 	.word	0x0800a1e8
 80009f8:	08000fd1 	.word	0x08000fd1
 80009fc:	24000244 	.word	0x24000244
 8000a00:	0800a20c 	.word	0x0800a20c
 8000a04:	08000fe1 	.word	0x08000fe1
 8000a08:	24000248 	.word	0x24000248

08000a0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f008 fed0 	bl	80097c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f008 feca 	bl	80097c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f001 fa99 	bl	8001f64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <_Z18SystemClock_Configv+0x134>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3a:	4a41      	ldr	r2, [pc, #260]	; (8000b40 <_Z18SystemClock_Configv+0x134>)
 8000a3c:	f023 0301 	bic.w	r3, r3, #1
 8000a40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a42:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <_Z18SystemClock_Configv+0x134>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <_Z18SystemClock_Configv+0x138>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a3c      	ldr	r2, [pc, #240]	; (8000b44 <_Z18SystemClock_Configv+0x138>)
 8000a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <_Z18SystemClock_Configv+0x138>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a64:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <_Z18SystemClock_Configv+0x138>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d000      	beq.n	8000a7e <_Z18SystemClock_Configv+0x72>
 8000a7c:	e7f2      	b.n	8000a64 <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <_Z18SystemClock_Configv+0x13c>)
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	f023 0303 	bic.w	r3, r3, #3
 8000a86:	4a30      	ldr	r2, [pc, #192]	; (8000b48 <_Z18SystemClock_Configv+0x13c>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000a8e:	230b      	movs	r3, #11
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9c:	2340      	movs	r3, #64	; 0x40
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ab0:	2340      	movs	r3, #64	; 0x40
 8000ab2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000ab8:	230d      	movs	r3, #13
 8000aba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 faa1 	bl	8002018 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8000ae6:	f000 fb15 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	233f      	movs	r3, #63	; 0x3f
 8000aec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2303      	movs	r3, #3
 8000af0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000af6:	2308      	movs	r3, #8
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000afe:	2340      	movs	r3, #64	; 0x40
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b08:	2340      	movs	r3, #64	; 0x40
 8000b0a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 feaf 	bl	8002874 <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf14      	ite	ne
 8000b1c:	2301      	movne	r3, #1
 8000b1e:	2300      	moveq	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <_Z18SystemClock_Configv+0x11e>
  {
    Error_Handler();
 8000b26:	f000 faf5 	bl	8001114 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2000      	movs	r0, #0
 8000b32:	f002 f855 	bl	8002be0 <HAL_RCC_MCOConfig>
}
 8000b36:	bf00      	nop
 8000b38:	3770      	adds	r7, #112	; 0x70
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	58000400 	.word	0x58000400
 8000b44:	58024800 	.word	0x58024800
 8000b48:	58024400 	.word	0x58024400

08000b4c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0b0      	sub	sp, #192	; 0xc0
 8000b50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	22c0      	movs	r2, #192	; 0xc0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f008 fe31 	bl	80097c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b62:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b78:	23c0      	movs	r3, #192	; 0xc0
 8000b7a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 faa9 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf14      	ite	ne
 8000b98:	2301      	movne	r3, #1
 8000b9a:	2300      	moveq	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 8000ba2:	f000 fab7 	bl	8001114 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	37c0      	adds	r7, #192	; 0xc0
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <_ZL12MX_I2C1_Initv+0x94>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000bbc:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <_ZL12MX_I2C1_Initv+0x98>)
 8000bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000bec:	f001 f892 	bl	8001d14 <HAL_I2C_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000c00:	f000 fa88 	bl	8001114 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000c08:	f001 f914 	bl	8001e34 <HAL_I2CEx_ConfigAnalogFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000c1c:	f000 fa7a 	bl	8001114 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <_ZL12MX_I2C1_Initv+0x90>)
 8000c24:	f001 f951 	bl	8001eca <HAL_I2CEx_ConfigDigitalFilter>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000c38:	f000 fa6c 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	24000094 	.word	0x24000094
 8000c44:	40005400 	.word	0x40005400
 8000c48:	10c0ecff 	.word	0x10c0ecff

08000c4c <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <_ZL12MX_I2C4_Initv+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <_ZL12MX_I2C4_Initv+0x98>)
 8000c5a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000c88:	f001 f844 	bl	8001d14 <HAL_I2C_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8000c9c:	f000 fa3a 	bl	8001114 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	480e      	ldr	r0, [pc, #56]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000ca4:	f001 f8c6 	bl	8001e34 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8000cb8:	f000 fa2c 	bl	8001114 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <_ZL12MX_I2C4_Initv+0x90>)
 8000cc0:	f001 f903 	bl	8001eca <HAL_I2CEx_ConfigDigitalFilter>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 fa1e 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	240000e0 	.word	0x240000e0
 8000ce0:	58001c00 	.word	0x58001c00
 8000ce4:	10c0ecff 	.word	0x10c0ecff

08000ce8 <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000cee:	4a2b      	ldr	r2, [pc, #172]	; (8000d9c <_ZL12MX_SPI5_Initv+0xb4>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000cf4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d18:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d20:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <_ZL12MX_SPI5_Initv+0xb0>)
 8000d7a:	f003 fd43 	bl	8004804 <HAL_SPI_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <_ZL12MX_SPI5_Initv+0xaa>
  {
    Error_Handler();
 8000d8e:	f000 f9c1 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2400012c 	.word	0x2400012c
 8000d9c:	40015000 	.word	0x40015000

08000da0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de8:	481b      	ldr	r0, [pc, #108]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000dea:	f004 fded 	bl	80059c8 <HAL_UART_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8000dfe:	f000 f989 	bl	8001114 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e06:	f005 fe1b 	bl	8006a40 <HAL_UARTEx_SetTxFifoThreshold>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf14      	ite	ne
 8000e10:	2301      	movne	r3, #1
 8000e12:	2300      	moveq	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8000e1a:	f000 f97b 	bl	8001114 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e22:	f005 fe4b 	bl	8006abc <HAL_UARTEx_SetRxFifoThreshold>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8000e36:	f000 f96d 	bl	8001114 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e3c:	f005 fdc7 	bl	80069ce <HAL_UARTEx_DisableFifoMode>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8000e50:	f000 f960 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	240001b4 	.word	0x240001b4
 8000e5c:	40011000 	.word	0x40011000

08000e60 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b52      	ldr	r3, [pc, #328]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	4a50      	ldr	r2, [pc, #320]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e86:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	4a41      	ldr	r2, [pc, #260]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	4a3a      	ldr	r2, [pc, #232]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee0:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x160>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2108      	movs	r1, #8
 8000f4c:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <_ZL12MX_GPIO_Initv+0x164>)
 8000f4e:	f000 fe99 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2101      	movs	r1, #1
 8000f56:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <_ZL12MX_GPIO_Initv+0x168>)
 8000f58:	f000 fe94 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <_ZL12MX_GPIO_Initv+0x164>)
 8000f74:	f000 fcd6 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <_ZL12MX_GPIO_Initv+0x16c>)
 8000f96:	f000 fcc5 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSTest_Pin */
  GPIO_InitStruct.Pin = CSTest_Pin;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSTest_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <_ZL12MX_GPIO_Initv+0x168>)
 8000fb2:	f000 fcb7 	bl	8001924 <HAL_GPIO_Init>

}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020c00 	.word	0x58020c00
 8000fc8:	58022400 	.word	0x58022400
 8000fcc:	58020000 	.word	0x58020000

08000fd0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f005 ff1b 	bl	8006e14 <osDelay>
 8000fde:	e7fb      	b.n	8000fd8 <_Z16StartDefaultTaskPv+0x8>

08000fe0 <_Z13StartNTagTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNTagTask */
void StartNTagTask(void *argument)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartNTagTask */
	/* Infinite loop */
	NTagRC522 ntag;
	//ntag.SetI2CHandle(&hi2c4);
	ntag.SetSPIHandle(&hspi5);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	493b      	ldr	r1, [pc, #236]	; (80010dc <_Z13StartNTagTaskPv+0xfc>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fc27 	bl	8000842 <_ZN9NTagRC52212SetSPIHandleEP19__SPI_HandleTypeDef>
	vprintf("Start\r\n");
 8000ff4:	483a      	ldr	r0, [pc, #232]	; (80010e0 <_Z13StartNTagTaskPv+0x100>)
 8000ff6:	f7ff fc79 	bl	80008ec <_Z7vprintfPKcz>
	osDelay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffe:	f005 ff09 	bl	8006e14 <osDelay>
	for(;;)
	{
		//uint8_t test = ntag.SanityCheck(0x28);
		//vprintf("Version: %d\r\n", test);
		uint8_t read_result, ret;
		uint8_t versreg = 0x37;
 8001002:	2337      	movs	r3, #55	; 0x37
 8001004:	73fb      	strb	r3, [r7, #15]
			osDelay(5);
			read_result = ntag.SanityCheck2();
			vprintf("Second: %d\r\n", read_result);
			osDelay(1000);*/

		HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2101      	movs	r1, #1
 800100a:	4836      	ldr	r0, [pc, #216]	; (80010e4 <_Z13StartNTagTaskPv+0x104>)
 800100c:	f000 fe3a 	bl	8001c84 <HAL_GPIO_WritePin>
		osDelay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f005 feff 	bl	8006e14 <osDelay>
		ret = ntag.SetWaterLevel(0x00);
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fc2b 	bl	8000878 <_ZN9NTagRC52213SetWaterLevelEh>
 8001022:	4603      	mov	r3, r0
 8001024:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2101      	movs	r1, #1
 800102a:	482e      	ldr	r0, [pc, #184]	; (80010e4 <_Z13StartNTagTaskPv+0x104>)
 800102c:	f000 fe2a 	bl	8001c84 <HAL_GPIO_WritePin>
		osDelay(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f005 feef 	bl	8006e14 <osDelay>
		HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2101      	movs	r1, #1
 800103a:	482a      	ldr	r0, [pc, #168]	; (80010e4 <_Z13StartNTagTaskPv+0x104>)
 800103c:	f000 fe22 	bl	8001c84 <HAL_GPIO_WritePin>
		osDelay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f005 fee7 	bl	8006e14 <osDelay>
		read_result = ntag.GetWaterLevel();
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fc07 	bl	800085e <_ZN9NTagRC52213GetWaterLevelEv>
 8001050:	4603      	mov	r3, r0
 8001052:	737b      	strb	r3, [r7, #13]
		HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2101      	movs	r1, #1
 8001058:	4822      	ldr	r0, [pc, #136]	; (80010e4 <_Z13StartNTagTaskPv+0x104>)
 800105a:	f000 fe13 	bl	8001c84 <HAL_GPIO_WritePin>
		vprintf("WaterLevel 0: %d\r\n", read_result);
 800105e:	7b7b      	ldrb	r3, [r7, #13]
 8001060:	4619      	mov	r1, r3
 8001062:	4821      	ldr	r0, [pc, #132]	; (80010e8 <_Z13StartNTagTaskPv+0x108>)
 8001064:	f7ff fc42 	bl	80008ec <_Z7vprintfPKcz>
		osDelay(100);
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f005 fed3 	bl	8006e14 <osDelay>

		HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2101      	movs	r1, #1
 8001072:	481c      	ldr	r0, [pc, #112]	; (80010e4 <_Z13StartNTagTaskPv+0x104>)
 8001074:	f000 fe06 	bl	8001c84 <HAL_GPIO_WritePin>
		osDelay(1);
 8001078:	2001      	movs	r0, #1
 800107a:	f005 fecb 	bl	8006e14 <osDelay>
		ret = ntag.SetWaterLevel(0x01);
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2101      	movs	r1, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fbf7 	bl	8000878 <_ZN9NTagRC52213SetWaterLevelEh>
 800108a:	4603      	mov	r3, r0
 800108c:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2101      	movs	r1, #1
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <_Z13StartNTagTaskPv+0x104>)
 8001094:	f000 fdf6 	bl	8001c84 <HAL_GPIO_WritePin>
		osDelay(10);
 8001098:	200a      	movs	r0, #10
 800109a:	f005 febb 	bl	8006e14 <osDelay>
		HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2101      	movs	r1, #1
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <_Z13StartNTagTaskPv+0x104>)
 80010a4:	f000 fdee 	bl	8001c84 <HAL_GPIO_WritePin>
		osDelay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f005 feb3 	bl	8006e14 <osDelay>
		read_result = ntag.GetWaterLevel();
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fbd3 	bl	800085e <_ZN9NTagRC52213GetWaterLevelEv>
 80010b8:	4603      	mov	r3, r0
 80010ba:	737b      	strb	r3, [r7, #13]
		HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2101      	movs	r1, #1
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <_Z13StartNTagTaskPv+0x104>)
 80010c2:	f000 fddf 	bl	8001c84 <HAL_GPIO_WritePin>
		vprintf("WaterLevel 1: %d\r\n", read_result);
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4808      	ldr	r0, [pc, #32]	; (80010ec <_Z13StartNTagTaskPv+0x10c>)
 80010cc:	f7ff fc0e 	bl	80008ec <_Z7vprintfPKcz>
		osDelay(2000);
 80010d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010d4:	f005 fe9e 	bl	8006e14 <osDelay>


	}
 80010d8:	e793      	b.n	8001002 <_Z13StartNTagTaskPv+0x22>
 80010da:	bf00      	nop
 80010dc:	2400012c 	.word	0x2400012c
 80010e0:	0800a190 	.word	0x0800a190
 80010e4:	58022400 	.word	0x58022400
 80010e8:	0800a198 	.word	0x0800a198
 80010ec:	0800a1ac 	.word	0x0800a1ac

080010f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001102:	f000 fb03 	bl	800170c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40010000 	.word	0x40010000

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	e7fe      	b.n	800111c <Error_Handler+0x8>
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x38>)
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_MspInit+0x38>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_MspInit+0x38>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	210f      	movs	r1, #15
 8001148:	f06f 0001 	mvn.w	r0, #1
 800114c:	f000 fbc2 	bl	80018d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	58024400 	.word	0x58024400

0800115c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0bc      	sub	sp, #240	; 0xf0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	22c0      	movs	r2, #192	; 0xc0
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f008 fb1f 	bl	80097c0 <memset>
  if(hi2c->Instance==I2C1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a54      	ldr	r2, [pc, #336]	; (80012d8 <HAL_I2C_MspInit+0x17c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d158      	bne.n	800123e <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800118c:	2308      	movs	r3, #8
 800118e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4618      	mov	r0, r3
 800119c:	f001 ffa2 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011a6:	f7ff ffb5 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <HAL_I2C_MspInit+0x180>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	4a4a      	ldr	r2, [pc, #296]	; (80012dc <HAL_I2C_MspInit+0x180>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ba:	4b48      	ldr	r3, [pc, #288]	; (80012dc <HAL_I2C_MspInit+0x180>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ce:	2312      	movs	r3, #18
 80011d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011da:	2301      	movs	r3, #1
 80011dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e0:	2304      	movs	r3, #4
 80011e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ea:	4619      	mov	r1, r3
 80011ec:	483c      	ldr	r0, [pc, #240]	; (80012e0 <HAL_I2C_MspInit+0x184>)
 80011ee:	f000 fb99 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fa:	2312      	movs	r3, #18
 80011fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001206:	2301      	movs	r3, #1
 8001208:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800120c:	2304      	movs	r3, #4
 800120e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001216:	4619      	mov	r1, r3
 8001218:	4831      	ldr	r0, [pc, #196]	; (80012e0 <HAL_I2C_MspInit+0x184>)
 800121a:	f000 fb83 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_I2C_MspInit+0x180>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <HAL_I2C_MspInit+0x180>)
 8001226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <HAL_I2C_MspInit+0x180>)
 8001230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800123c:	e047      	b.n	80012ce <HAL_I2C_MspInit+0x172>
  else if(hi2c->Instance==I2C4)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <HAL_I2C_MspInit+0x188>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d142      	bne.n	80012ce <HAL_I2C_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001248:	2310      	movs	r3, #16
 800124a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4618      	mov	r0, r3
 8001258:	f001 ff44 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8001262:	f7ff ff57 	bl	8001114 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_I2C_MspInit+0x180>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_I2C_MspInit+0x180>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_I2C_MspInit+0x180>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001284:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001288:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128c:	2312      	movs	r3, #18
 800128e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001298:	2301      	movs	r3, #1
 800129a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800129e:	2304      	movs	r3, #4
 80012a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012a8:	4619      	mov	r1, r3
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <HAL_I2C_MspInit+0x18c>)
 80012ac:	f000 fb3a 	bl	8001924 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_I2C_MspInit+0x180>)
 80012b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_I2C_MspInit+0x180>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_I2C_MspInit+0x180>)
 80012c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
}
 80012ce:	bf00      	nop
 80012d0:	37f0      	adds	r7, #240	; 0xf0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005400 	.word	0x40005400
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020400 	.word	0x58020400
 80012e4:	58001c00 	.word	0x58001c00
 80012e8:	58020c00 	.word	0x58020c00

080012ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ba      	sub	sp, #232	; 0xe8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	22c0      	movs	r2, #192	; 0xc0
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f008 fa57 	bl	80097c0 <memset>
  if(hspi->Instance==SPI5)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a37      	ldr	r2, [pc, #220]	; (80013f4 <HAL_SPI_MspInit+0x108>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d166      	bne.n	80013ea <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001320:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001322:	2300      	movs	r3, #0
 8001324:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4618      	mov	r0, r3
 800132c:	f001 feda 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001336:	f7ff feed 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 800133c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001340:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 8001342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001346:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 800134c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 8001360:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_SPI_MspInit+0x10c>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    PK0     ------> SPI5_SCK
    PK1     ------> SPI5_NSS
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8001394:	2303      	movs	r3, #3
 8001396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013ac:	2305      	movs	r3, #5
 80013ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80013b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4810      	ldr	r0, [pc, #64]	; (80013fc <HAL_SPI_MspInit+0x110>)
 80013ba:	f000 fab3 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80013be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013d8:	2305      	movs	r3, #5
 80013da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4806      	ldr	r0, [pc, #24]	; (8001400 <HAL_SPI_MspInit+0x114>)
 80013e6:	f000 fa9d 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	37e8      	adds	r7, #232	; 0xe8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40015000 	.word	0x40015000
 80013f8:	58024400 	.word	0x58024400
 80013fc:	58022800 	.word	0x58022800
 8001400:	58022400 	.word	0x58022400

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0ba      	sub	sp, #232	; 0xe8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	22c0      	movs	r2, #192	; 0xc0
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f008 f9cb 	bl	80097c0 <memset>
  if(huart->Instance==USART1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <HAL_UART_MspInit+0xc0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d142      	bne.n	80014ba <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001434:	2301      	movs	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fe4e 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800144e:	f7ff fe61 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_UART_MspInit+0xc4>)
 8001454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_UART_MspInit+0xc4>)
 800145a:	f043 0310 	orr.w	r3, r3, #16
 800145e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_UART_MspInit+0xc4>)
 8001464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0xc4>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <HAL_UART_MspInit+0xc4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_UART_MspInit+0xc4>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800148e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a8:	2307      	movs	r3, #7
 80014aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_MspInit+0xc8>)
 80014b6:	f000 fa35 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	37e8      	adds	r7, #232	; 0xe8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40011000 	.word	0x40011000
 80014c8:	58024400 	.word	0x58024400
 80014cc:	58020000 	.word	0x58020000

080014d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	d844      	bhi.n	8001568 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80014de:	2200      	movs	r2, #0
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	2019      	movs	r0, #25
 80014e4:	f000 f9f6 	bl	80018d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80014e8:	2019      	movs	r0, #25
 80014ea:	f000 fa0d 	bl	8001908 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014ee:	4a24      	ldr	r2, [pc, #144]	; (8001580 <HAL_InitTick+0xb0>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_InitTick+0xb4>)
 80014f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014fa:	4a22      	ldr	r2, [pc, #136]	; (8001584 <HAL_InitTick+0xb4>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_InitTick+0xb4>)
 8001506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001512:	f107 020c 	add.w	r2, r7, #12
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fd9f 	bl	8003060 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001522:	f001 fd87 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
 8001526:	4603      	mov	r3, r0
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <HAL_InitTick+0xb8>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	0c9b      	lsrs	r3, r3, #18
 8001536:	3b01      	subs	r3, #1
 8001538:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_InitTick+0xbc>)
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <HAL_InitTick+0xc0>)
 800153e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0xbc>)
 8001542:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001546:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001548:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_InitTick+0xbc>)
 800154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_InitTick+0xbc>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_InitTick+0xbc>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800155a:	480c      	ldr	r0, [pc, #48]	; (800158c <HAL_InitTick+0xbc>)
 800155c:	f003 ff5b 	bl	8005416 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d107      	bne.n	8001576 <HAL_InitTick+0xa6>
 8001566:	e001      	b.n	800156c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e005      	b.n	8001578 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <HAL_InitTick+0xbc>)
 800156e:	f003 ffb3 	bl	80054d8 <HAL_TIM_Base_Start_IT>
 8001572:	4603      	mov	r3, r0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3738      	adds	r7, #56	; 0x38
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	24000008 	.word	0x24000008
 8001584:	58024400 	.word	0x58024400
 8001588:	431bde83 	.word	0x431bde83
 800158c:	2400024c 	.word	0x2400024c
 8001590:	40010000 	.word	0x40010000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM1_UP_IRQHandler+0x10>)
 80015c6:	f003 ffff 	bl	80055c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2400024c 	.word	0x2400024c

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f008 f8a2 	bl	800974c <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	24080000 	.word	0x24080000
 8001634:	00000400 	.word	0x00000400
 8001638:	24000298 	.word	0x24000298
 800163c:	24004cc0 	.word	0x24004cc0

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001644:	f7ff f826 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	; (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f008 f873 	bl	8009758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7ff f94d 	bl	8000910 <main>
  bx  lr
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800167c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001680:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001684:	0800a2fc 	.word	0x0800a2fc
  ldr r2, =_sbss
 8001688:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800168c:	24004cc0 	.word	0x24004cc0

08001690 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC3_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f90f 	bl	80018be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016a0:	f001 fb08 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	4913      	ldr	r1, [pc, #76]	; (8001700 <HAL_Init+0x6c>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_Init+0x68>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_Init+0x6c>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_Init+0x70>)
 80016d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_Init+0x74>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016de:	200f      	movs	r0, #15
 80016e0:	f7ff fef6 	bl	80014d0 <HAL_InitTick>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e002      	b.n	80016f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ee:	f7ff fd17 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	58024400 	.word	0x58024400
 8001700:	0800a1d8 	.word	0x0800a1d8
 8001704:	24000004 	.word	0x24000004
 8001708:	24000000 	.word	0x24000000

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2400000c 	.word	0x2400000c
 8001730:	2400029c 	.word	0x2400029c

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2400029c 	.word	0x2400029c

0800174c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetREVID+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0c1b      	lsrs	r3, r3, #16
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	5c001000 	.word	0x5c001000

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	4313      	orrs	r3, r2
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	05fa0000 	.word	0x05fa0000

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ff4c 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018e2:	f7ff ff63 	bl	80017ac <__NVIC_GetPriorityGrouping>
 80018e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	6978      	ldr	r0, [r7, #20]
 80018ee:	f7ff ffb3 	bl	8001858 <NVIC_EncodePriority>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff82 	bl	8001804 <__NVIC_SetPriority>
}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff56 	bl	80017c8 <__NVIC_EnableIRQ>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001932:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_GPIO_Init+0x234>)
 8001934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001936:	e194      	b.n	8001c62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8186 	beq.w	8001c5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d005      	beq.n	8001968 <HAL_GPIO_Init+0x44>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	f003 0201 	and.w	r2, r3, #1
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d017      	beq.n	8001a06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d123      	bne.n	8001a5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	69b9      	ldr	r1, [r7, #24]
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80e0 	beq.w	8001c5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_GPIO_Init+0x238>)
 8001a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aa2:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <HAL_GPIO_Init+0x238>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_GPIO_Init+0x238>)
 8001aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aba:	4a29      	ldr	r2, [pc, #164]	; (8001b60 <HAL_GPIO_Init+0x23c>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_GPIO_Init+0x240>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d052      	beq.n	8001b8c <HAL_GPIO_Init+0x268>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <HAL_GPIO_Init+0x244>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d031      	beq.n	8001b52 <HAL_GPIO_Init+0x22e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_GPIO_Init+0x248>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d02b      	beq.n	8001b4e <HAL_GPIO_Init+0x22a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_GPIO_Init+0x24c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x226>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a1c      	ldr	r2, [pc, #112]	; (8001b74 <HAL_GPIO_Init+0x250>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x222>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_GPIO_Init+0x254>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x21e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_GPIO_Init+0x258>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x21a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_GPIO_Init+0x25c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x216>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_GPIO_Init+0x260>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_GPIO_Init+0x264>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x20e>
 8001b2e:	2309      	movs	r3, #9
 8001b30:	e02d      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b32:	230a      	movs	r3, #10
 8001b34:	e02b      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b36:	2308      	movs	r3, #8
 8001b38:	e029      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e027      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e025      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e023      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e021      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e01f      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e01d      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e01b      	b.n	8001b8e <HAL_GPIO_Init+0x26a>
 8001b56:	bf00      	nop
 8001b58:	58000080 	.word	0x58000080
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	58000400 	.word	0x58000400
 8001b64:	58020000 	.word	0x58020000
 8001b68:	58020400 	.word	0x58020400
 8001b6c:	58020800 	.word	0x58020800
 8001b70:	58020c00 	.word	0x58020c00
 8001b74:	58021000 	.word	0x58021000
 8001b78:	58021400 	.word	0x58021400
 8001b7c:	58021800 	.word	0x58021800
 8001b80:	58021c00 	.word	0x58021c00
 8001b84:	58022000 	.word	0x58022000
 8001b88:	58022400 	.word	0x58022400
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	f002 0203 	and.w	r2, r2, #3
 8001b94:	0092      	lsls	r2, r2, #2
 8001b96:	4093      	lsls	r3, r2
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9e:	4938      	ldr	r1, [pc, #224]	; (8001c80 <HAL_GPIO_Init+0x35c>)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f47f ae63 	bne.w	8001938 <HAL_GPIO_Init+0x14>
  }
}
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	3724      	adds	r7, #36	; 0x24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	58000400 	.word	0x58000400

08001c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ca0:	e003      	b.n	8001caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	619a      	str	r2, [r3, #24]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_HSEM_FastTake+0x2c>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3320      	adds	r3, #32
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_HSEM_FastTake+0x30>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	58026400 	.word	0x58026400
 8001ce8:	80000300 	.word	0x80000300

08001cec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001cf6:	4906      	ldr	r1, [pc, #24]	; (8001d10 <HAL_HSEM_Release+0x24>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	58026400 	.word	0x58026400

08001d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fa0e 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2224      	movs	r2, #36	; 0x24
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	e006      	b.n	8001d9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d104      	bne.n	8001dae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_I2C_Init+0x11c>)
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69d9      	ldr	r1, [r3, #28]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	02008000 	.word	0x02008000

08001e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d138      	bne.n	8001ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e032      	b.n	8001ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d139      	bne.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e033      	b.n	8001f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2224      	movs	r2, #36	; 0x24
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d00a      	beq.n	8001f8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f78:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e040      	b.n	800200c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e03e      	b.n	800200c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f96:	491f      	ldr	r1, [pc, #124]	; (8002014 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f9e:	f7ff fbc9 	bl	8001734 <HAL_GetTick>
 8001fa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fa4:	e009      	b.n	8001fba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fa6:	f7ff fbc5 	bl	8001734 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb4:	d901      	bls.n	8001fba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e028      	b.n	800200c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc6:	d1ee      	bne.n	8001fa6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b1e      	cmp	r3, #30
 8001fcc:	d008      	beq.n	8001fe0 <HAL_PWREx_ConfigSupply+0x7c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8001fd2:	d005      	beq.n	8001fe0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b1d      	cmp	r3, #29
 8001fd8:	d002      	beq.n	8001fe0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b2d      	cmp	r3, #45	; 0x2d
 8001fde:	d114      	bne.n	800200a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001fe0:	f7ff fba8 	bl	8001734 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fe6:	e009      	b.n	8001ffc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fe8:	f7ff fba4 	bl	8001734 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ff6:	d901      	bls.n	8001ffc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e007      	b.n	800200c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d1ee      	bne.n	8001fe8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	58024800 	.word	0x58024800

08002018 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	f000 bc1d 	b.w	8002866 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8087 	beq.w	8002148 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4b99      	ldr	r3, [pc, #612]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002044:	4b96      	ldr	r3, [pc, #600]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	2b10      	cmp	r3, #16
 800204e:	d007      	beq.n	8002060 <HAL_RCC_OscConfig+0x48>
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	2b18      	cmp	r3, #24
 8002054:	d110      	bne.n	8002078 <HAL_RCC_OscConfig+0x60>
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4b8f      	ldr	r3, [pc, #572]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d06c      	beq.n	8002146 <HAL_RCC_OscConfig+0x12e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d168      	bne.n	8002146 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e3f6      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x78>
 8002082:	4b87      	ldr	r3, [pc, #540]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a86      	ldr	r2, [pc, #536]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e02e      	b.n	80020ee <HAL_RCC_OscConfig+0xd6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x9a>
 8002098:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a80      	ldr	r2, [pc, #512]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a7d      	ldr	r2, [pc, #500]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e01d      	b.n	80020ee <HAL_RCC_OscConfig+0xd6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0xbe>
 80020bc:	4b78      	ldr	r3, [pc, #480]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a77      	ldr	r2, [pc, #476]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a74      	ldr	r2, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e00b      	b.n	80020ee <HAL_RCC_OscConfig+0xd6>
 80020d6:	4b72      	ldr	r3, [pc, #456]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a71      	ldr	r2, [pc, #452]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80020e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d013      	beq.n	800211e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7ff fb1d 	bl	8001734 <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fe:	f7ff fb19 	bl	8001734 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e3aa      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002110:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0xe6>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7ff fb09 	bl	8001734 <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002126:	f7ff fb05 	bl	8001734 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	; 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e396      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x10e>
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002146:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80cb 	beq.w	80022ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002156:	4b52      	ldr	r3, [pc, #328]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800215e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002160:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_RCC_OscConfig+0x164>
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2b18      	cmp	r3, #24
 8002170:	d156      	bne.n	8002220 <HAL_RCC_OscConfig+0x208>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d151      	bne.n	8002220 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x17c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e368      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002194:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 0219 	bic.w	r2, r3, #25
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	493f      	ldr	r1, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a6:	f7ff fac5 	bl	8001734 <HAL_GetTick>
 80021aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff fac1 	bl	8001734 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e352      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	f7ff fabe 	bl	800174c <HAL_GetREVID>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d817      	bhi.n	800220a <HAL_RCC_OscConfig+0x1f2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d108      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1dc>
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021ea:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f2:	e07b      	b.n	80022ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	031b      	lsls	r3, r3, #12
 8002202:	4927      	ldr	r1, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002208:	e070      	b.n	80022ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	4921      	ldr	r1, [pc, #132]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221e:	e065      	b.n	80022ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d048      	beq.n	80022ba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 0219 	bic.w	r2, r3, #25
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	491a      	ldr	r1, [pc, #104]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7ff fa7b 	bl	8001734 <HAL_GetTick>
 800223e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff fa77 	bl	8001734 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e308      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	f7ff fa74 	bl	800174c <HAL_GetREVID>
 8002264:	4603      	mov	r3, r0
 8002266:	f241 0203 	movw	r2, #4099	; 0x1003
 800226a:	4293      	cmp	r3, r2
 800226c:	d81a      	bhi.n	80022a4 <HAL_RCC_OscConfig+0x28c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	d108      	bne.n	8002288 <HAL_RCC_OscConfig+0x270>
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	6053      	str	r3, [r2, #4]
 8002286:	e031      	b.n	80022ec <HAL_RCC_OscConfig+0x2d4>
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	031b      	lsls	r3, r3, #12
 8002296:	4902      	ldr	r1, [pc, #8]	; (80022a0 <HAL_RCC_OscConfig+0x288>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
 800229c:	e026      	b.n	80022ec <HAL_RCC_OscConfig+0x2d4>
 800229e:	bf00      	nop
 80022a0:	58024400 	.word	0x58024400
 80022a4:	4b9a      	ldr	r3, [pc, #616]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	4997      	ldr	r1, [pc, #604]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e018      	b.n	80022ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b95      	ldr	r3, [pc, #596]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a94      	ldr	r2, [pc, #592]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff fa35 	bl	8001734 <HAL_GetTick>
 80022ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff fa31 	bl	8001734 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e2c2      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022e0:	4b8b      	ldr	r3, [pc, #556]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a9 	beq.w	800244c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fa:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002302:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002304:	4b82      	ldr	r3, [pc, #520]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d007      	beq.n	8002320 <HAL_RCC_OscConfig+0x308>
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b18      	cmp	r3, #24
 8002314:	d13a      	bne.n	800238c <HAL_RCC_OscConfig+0x374>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d135      	bne.n	800238c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002320:	4b7b      	ldr	r3, [pc, #492]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x320>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e296      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002338:	f7ff fa08 	bl	800174c <HAL_GetREVID>
 800233c:	4603      	mov	r3, r0
 800233e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002342:	4293      	cmp	r3, r2
 8002344:	d817      	bhi.n	8002376 <HAL_RCC_OscConfig+0x35e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	2b20      	cmp	r3, #32
 800234c:	d108      	bne.n	8002360 <HAL_RCC_OscConfig+0x348>
 800234e:	4b70      	ldr	r3, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002356:	4a6e      	ldr	r2, [pc, #440]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800235c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800235e:	e075      	b.n	800244c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002360:	4b6b      	ldr	r3, [pc, #428]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	069b      	lsls	r3, r3, #26
 800236e:	4968      	ldr	r1, [pc, #416]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002374:	e06a      	b.n	800244c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002376:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	4962      	ldr	r1, [pc, #392]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002386:	4313      	orrs	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800238a:	e05f      	b.n	800244c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d042      	beq.n	800241a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002394:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a5d      	ldr	r2, [pc, #372]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 800239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff f9c8 	bl	8001734 <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023a8:	f7ff f9c4 	bl	8001734 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e255      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023ba:	4b55      	ldr	r3, [pc, #340]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023c6:	f7ff f9c1 	bl	800174c <HAL_GetREVID>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d817      	bhi.n	8002404 <HAL_RCC_OscConfig+0x3ec>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d108      	bne.n	80023ee <HAL_RCC_OscConfig+0x3d6>
 80023dc:	4b4c      	ldr	r3, [pc, #304]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023e4:	4a4a      	ldr	r2, [pc, #296]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80023e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023ea:	6053      	str	r3, [r2, #4]
 80023ec:	e02e      	b.n	800244c <HAL_RCC_OscConfig+0x434>
 80023ee:	4b48      	ldr	r3, [pc, #288]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	069b      	lsls	r3, r3, #26
 80023fc:	4944      	ldr	r1, [pc, #272]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
 8002402:	e023      	b.n	800244c <HAL_RCC_OscConfig+0x434>
 8002404:	4b42      	ldr	r3, [pc, #264]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	493f      	ldr	r1, [pc, #252]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002414:	4313      	orrs	r3, r2
 8002416:	60cb      	str	r3, [r1, #12]
 8002418:	e018      	b.n	800244c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a3c      	ldr	r2, [pc, #240]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7ff f985 	bl	8001734 <HAL_GetTick>
 800242a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800242e:	f7ff f981 	bl	8001734 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e212      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002440:	4b33      	ldr	r3, [pc, #204]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d036      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d019      	beq.n	8002494 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002460:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002464:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7ff f962 	bl	8001734 <HAL_GetTick>
 8002470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002474:	f7ff f95e 	bl	8001734 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1ef      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x45c>
 8002492:	e018      	b.n	80024c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7ff f948 	bl	8001734 <HAL_GetTick>
 80024a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a8:	f7ff f944 	bl	8001734 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1d5      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80024bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d039      	beq.n	8002546 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01c      	beq.n	8002514 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024e6:	f7ff f925 	bl	8001734 <HAL_GetTick>
 80024ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024ee:	f7ff f921 	bl	8001734 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e1b2      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_RCC_OscConfig+0x4f8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x4d6>
 800250c:	e01b      	b.n	8002546 <HAL_RCC_OscConfig+0x52e>
 800250e:	bf00      	nop
 8002510:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002514:	4b9b      	ldr	r3, [pc, #620]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a9a      	ldr	r2, [pc, #616]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800251a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800251e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002520:	f7ff f908 	bl	8001734 <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002528:	f7ff f904 	bl	8001734 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e195      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800253a:	4b92      	ldr	r3, [pc, #584]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8081 	beq.w	8002656 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002554:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_OscConfig+0x770>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a8b      	ldr	r2, [pc, #556]	; (8002788 <HAL_RCC_OscConfig+0x770>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002560:	f7ff f8e8 	bl	8001734 <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7ff f8e4 	bl	8001734 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e175      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800257a:	4b83      	ldr	r3, [pc, #524]	; (8002788 <HAL_RCC_OscConfig+0x770>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x584>
 800258e:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a7c      	ldr	r2, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	e02d      	b.n	80025f8 <HAL_RCC_OscConfig+0x5e0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10c      	bne.n	80025be <HAL_RCC_OscConfig+0x5a6>
 80025a4:	4b77      	ldr	r3, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a76      	ldr	r2, [pc, #472]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
 80025b0:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a73      	ldr	r2, [pc, #460]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025b6:	f023 0304 	bic.w	r3, r3, #4
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x5e0>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5c8>
 80025c6:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a6b      	ldr	r2, [pc, #428]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0x5e0>
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b65      	ldr	r3, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a64      	ldr	r2, [pc, #400]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff f898 	bl	8001734 <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7ff f894 	bl	8001734 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e123      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800261e:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ee      	beq.n	8002608 <HAL_RCC_OscConfig+0x5f0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff f882 	bl	8001734 <HAL_GetTick>
 8002630:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7ff f87e 	bl	8001734 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e10d      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800264a:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8102 	beq.w	8002864 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002660:	4b48      	ldr	r3, [pc, #288]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002668:	2b18      	cmp	r3, #24
 800266a:	f000 80bd 	beq.w	80027e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b02      	cmp	r3, #2
 8002674:	f040 809e 	bne.w	80027b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b42      	ldr	r3, [pc, #264]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a41      	ldr	r2, [pc, #260]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800267e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff f856 	bl	8001734 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7ff f852 	bl	8001734 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0e3      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_OscConfig+0x774>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	430a      	orrs	r2, r1
 80026be:	4931      	ldr	r1, [pc, #196]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	628b      	str	r3, [r1, #40]	; 0x28
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	3b01      	subs	r3, #1
 80026ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d2:	3b01      	subs	r3, #1
 80026d4:	025b      	lsls	r3, r3, #9
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	3b01      	subs	r3, #1
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	3b01      	subs	r3, #1
 80026ee:	061b      	lsls	r3, r3, #24
 80026f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026f4:	4923      	ldr	r1, [pc, #140]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	4a21      	ldr	r2, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_OscConfig+0x778>)
 800270c:	4013      	ands	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002712:	00d2      	lsls	r2, r2, #3
 8002714:	491b      	ldr	r1, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	f023 020c 	bic.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4917      	ldr	r1, [pc, #92]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	f023 0202 	bic.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	4912      	ldr	r1, [pc, #72]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	4a10      	ldr	r2, [pc, #64]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	4a07      	ldr	r2, [pc, #28]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_RCC_OscConfig+0x76c>)
 8002774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe ffdb 	bl	8001734 <HAL_GetTick>
 800277e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002780:	e011      	b.n	80027a6 <HAL_RCC_OscConfig+0x78e>
 8002782:	bf00      	nop
 8002784:	58024400 	.word	0x58024400
 8002788:	58024800 	.word	0x58024800
 800278c:	fffffc0c 	.word	0xfffffc0c
 8002790:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe ffce 	bl	8001734 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e05f      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_RCC_OscConfig+0x858>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x77c>
 80027b2:	e057      	b.n	8002864 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_RCC_OscConfig+0x858>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2d      	ldr	r2, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x858>)
 80027ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe ffb8 	bl	8001734 <HAL_GetTick>
 80027c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe ffb4 	bl	8001734 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e045      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_RCC_OscConfig+0x858>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x7b0>
 80027e6:	e03d      	b.n	8002864 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCC_OscConfig+0x858>)
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_RCC_OscConfig+0x858>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d031      	beq.n	8002860 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0203 	and.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d12a      	bne.n	8002860 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d122      	bne.n	8002860 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d11a      	bne.n	8002860 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	0a5b      	lsrs	r3, r3, #9
 800282e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d111      	bne.n	8002860 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	0c1b      	lsrs	r3, r3, #16
 8002840:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	0e1b      	lsrs	r3, r3, #24
 8002852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3730      	adds	r7, #48	; 0x30
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	58024400 	.word	0x58024400

08002874 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e19c      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b8a      	ldr	r3, [pc, #552]	; (8002ab4 <HAL_RCC_ClockConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d910      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b87      	ldr	r3, [pc, #540]	; (8002ab4 <HAL_RCC_ClockConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	4985      	ldr	r1, [pc, #532]	; (8002ab4 <HAL_RCC_ClockConfig+0x240>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <HAL_RCC_ClockConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e184      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b7b      	ldr	r3, [pc, #492]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d908      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028d4:	4b78      	ldr	r3, [pc, #480]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	4975      	ldr	r1, [pc, #468]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d010      	beq.n	8002914 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028fe:	429a      	cmp	r2, r3
 8002900:	d908      	bls.n	8002914 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	496a      	ldr	r1, [pc, #424]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002910:	4313      	orrs	r3, r2
 8002912:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800292c:	429a      	cmp	r2, r3
 800292e:	d908      	bls.n	8002942 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	495e      	ldr	r1, [pc, #376]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 800293e:	4313      	orrs	r3, r2
 8002940:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d010      	beq.n	8002970 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800295a:	429a      	cmp	r2, r3
 800295c:	d908      	bls.n	8002970 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4953      	ldr	r1, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 800296c:	4313      	orrs	r3, r2
 800296e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	429a      	cmp	r2, r3
 800298a:	d908      	bls.n	800299e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f023 020f 	bic.w	r2, r3, #15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4947      	ldr	r1, [pc, #284]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 800299a:	4313      	orrs	r3, r2
 800299c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d055      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029aa:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	4940      	ldr	r1, [pc, #256]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029c4:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d121      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0f6      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d107      	bne.n	80029ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d115      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0ea      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0de      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a04:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0d6      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f023 0207 	bic.w	r2, r3, #7
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe fe85 	bl	8001734 <HAL_GetTick>
 8002a2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2e:	f7fe fe81 	bl	8001734 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0be      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d1eb      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d010      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d208      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f023 020f 	bic.w	r2, r3, #15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x244>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d214      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_RCC_ClockConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 020f 	bic.w	r2, r3, #15
 8002a9a:	4906      	ldr	r1, [pc, #24]	; (8002ab4 <HAL_RCC_ClockConfig+0x240>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_RCC_ClockConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e086      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x34e>
 8002ab4:	52002000 	.word	0x52002000
 8002ab8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d208      	bcs.n	8002aea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ad8:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	4939      	ldr	r1, [pc, #228]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d010      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d208      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b06:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	492e      	ldr	r1, [pc, #184]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d208      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4922      	ldr	r1, [pc, #136]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d010      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d208      	bcs.n	8002b74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4917      	ldr	r1, [pc, #92]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b74:	f000 f89e 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	4912      	ldr	r1, [pc, #72]	; (8002bd0 <HAL_RCC_ClockConfig+0x35c>)
 8002b86:	5ccb      	ldrb	r3, [r1, r3]
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_RCC_ClockConfig+0x358>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <HAL_RCC_ClockConfig+0x35c>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x360>)
 8002baa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bac:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x364>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x368>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fc8a 	bl	80014d0 <HAL_InitTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	0800a1d8 	.word	0x0800a1d8
 8002bd4:	24000004 	.word	0x24000004
 8002bd8:	24000000 	.word	0x24000000
 8002bdc:	24000008 	.word	0x24000008

08002be0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12a      	bne.n	8002c48 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002c26:	f107 031c 	add.w	r3, r7, #28
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	481f      	ldr	r0, [pc, #124]	; (8002cac <HAL_RCC_MCOConfig+0xcc>)
 8002c2e:	f7fe fe79 	bl	8001924 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	4919      	ldr	r1, [pc, #100]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002c46:	e02a      	b.n	8002c9e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4e:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002c7c:	f107 031c 	add.w	r3, r7, #28
 8002c80:	4619      	mov	r1, r3
 8002c82:	480b      	ldr	r0, [pc, #44]	; (8002cb0 <HAL_RCC_MCOConfig+0xd0>)
 8002c84:	f7fe fe4e 	bl	8001924 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002c88:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	01d9      	lsls	r1, r3, #7
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	430b      	orrs	r3, r1
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_MCOConfig+0xc8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	610b      	str	r3, [r1, #16]
}
 8002c9e:	bf00      	nop
 8002ca0:	3730      	adds	r7, #48	; 0x30
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	58020000 	.word	0x58020000
 8002cb0:	58020800 	.word	0x58020800

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cba:	4bb3      	ldr	r3, [pc, #716]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cc2:	2b18      	cmp	r3, #24
 8002cc4:	f200 8155 	bhi.w	8002f72 <HAL_RCC_GetSysClockFreq+0x2be>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002d35 	.word	0x08002d35
 8002cd4:	08002f73 	.word	0x08002f73
 8002cd8:	08002f73 	.word	0x08002f73
 8002cdc:	08002f73 	.word	0x08002f73
 8002ce0:	08002f73 	.word	0x08002f73
 8002ce4:	08002f73 	.word	0x08002f73
 8002ce8:	08002f73 	.word	0x08002f73
 8002cec:	08002f73 	.word	0x08002f73
 8002cf0:	08002d5b 	.word	0x08002d5b
 8002cf4:	08002f73 	.word	0x08002f73
 8002cf8:	08002f73 	.word	0x08002f73
 8002cfc:	08002f73 	.word	0x08002f73
 8002d00:	08002f73 	.word	0x08002f73
 8002d04:	08002f73 	.word	0x08002f73
 8002d08:	08002f73 	.word	0x08002f73
 8002d0c:	08002f73 	.word	0x08002f73
 8002d10:	08002d61 	.word	0x08002d61
 8002d14:	08002f73 	.word	0x08002f73
 8002d18:	08002f73 	.word	0x08002f73
 8002d1c:	08002f73 	.word	0x08002f73
 8002d20:	08002f73 	.word	0x08002f73
 8002d24:	08002f73 	.word	0x08002f73
 8002d28:	08002f73 	.word	0x08002f73
 8002d2c:	08002f73 	.word	0x08002f73
 8002d30:	08002d67 	.word	0x08002d67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d34:	4b94      	ldr	r3, [pc, #592]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d40:	4b91      	ldr	r3, [pc, #580]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	08db      	lsrs	r3, r3, #3
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	4a90      	ldr	r2, [pc, #576]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d52:	e111      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d54:	4b8d      	ldr	r3, [pc, #564]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d56:	61bb      	str	r3, [r7, #24]
    break;
 8002d58:	e10e      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d5a:	4b8d      	ldr	r3, [pc, #564]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d5c:	61bb      	str	r3, [r7, #24]
    break;
 8002d5e:	e10b      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002d60:	4b8c      	ldr	r3, [pc, #560]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d62:	61bb      	str	r3, [r7, #24]
    break;
 8002d64:	e108      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d66:	4b88      	ldr	r3, [pc, #544]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d70:	4b85      	ldr	r3, [pc, #532]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d7c:	4b82      	ldr	r3, [pc, #520]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d86:	4b80      	ldr	r3, [pc, #512]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	08db      	lsrs	r3, r3, #3
 8002d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80e1 	beq.w	8002f6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	f000 8083 	beq.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x204>
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	f200 80a1 	bhi.w	8002efc <HAL_RCC_GetSysClockFreq+0x248>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x114>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d056      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002dc6:	e099      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dc8:	4b6f      	ldr	r3, [pc, #444]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d02d      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dd4:	4b6c      	ldr	r3, [pc, #432]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	08db      	lsrs	r3, r3, #3
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	4a6b      	ldr	r2, [pc, #428]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
 8002de4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	ee07 3a90 	vmov	s15, r3
 8002dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfe:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e2e:	e087      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e42:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e72:	e065      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e86:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eb6:	e043      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002fa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eca:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ede:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002efa:	e021      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	0a5b      	lsrs	r3, r3, #9
 8002f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	ee07 3a90 	vmov	s15, r3
 8002f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f64:	ee17 3a90 	vmov	r3, s15
 8002f68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002f6a:	e005      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
    break;
 8002f70:	e002      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f74:	61bb      	str	r3, [r7, #24]
    break;
 8002f76:	bf00      	nop
  }

  return sysclockfreq;
 8002f78:	69bb      	ldr	r3, [r7, #24]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	; 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	03d09000 	.word	0x03d09000
 8002f90:	003d0900 	.word	0x003d0900
 8002f94:	017d7840 	.word	0x017d7840
 8002f98:	46000000 	.word	0x46000000
 8002f9c:	4c742400 	.word	0x4c742400
 8002fa0:	4a742400 	.word	0x4a742400
 8002fa4:	4bbebc20 	.word	0x4bbebc20

08002fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fae:	f7ff fe81 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490f      	ldr	r1, [pc, #60]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8002fd6:	5cd3      	ldrb	r3, [r2, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	4a07      	ldr	r2, [pc, #28]	; (8003000 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fe4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	0800a1d8 	.word	0x0800a1d8
 8003000:	24000004 	.word	0x24000004
 8003004:	24000000 	.word	0x24000000

08003008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800300c:	f7ff ffcc 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4904      	ldr	r1, [pc, #16]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	58024400 	.word	0x58024400
 8003030:	0800a1d8 	.word	0x0800a1d8

08003034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003038:	f7ff ffb6 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4904      	ldr	r1, [pc, #16]	; (800305c <HAL_RCC_GetPCLK2Freq+0x28>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	58024400 	.word	0x58024400
 800305c:	0800a1d8 	.word	0x0800a1d8

08003060 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	223f      	movs	r2, #63	; 0x3f
 800306e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCC_GetClockConfig+0x7c>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f003 0207 	and.w	r2, r3, #7
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_RCC_GetClockConfig+0x7c>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_RCC_GetClockConfig+0x7c>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCC_GetClockConfig+0x7c>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <HAL_RCC_GetClockConfig+0x7c>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_GetClockConfig+0x7c>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_RCC_GetClockConfig+0x7c>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_GetClockConfig+0x80>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	58024400 	.word	0x58024400
 80030e0:	52002000 	.word	0x52002000

080030e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030ec:	2300      	movs	r3, #0
 80030ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f0:	2300      	movs	r3, #0
 80030f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d03f      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003104:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003108:	d02a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800310a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800310e:	d824      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003114:	d018      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800311a:	d81e      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003124:	d007      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003126:	e018      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003128:	4ba3      	ldr	r3, [pc, #652]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	4aa2      	ldr	r2, [pc, #648]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800312e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003132:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003134:	e015      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f001 f9fd 	bl	800453c <RCCEx_PLL2_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003146:	e00c      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3324      	adds	r3, #36	; 0x24
 800314c:	2102      	movs	r1, #2
 800314e:	4618      	mov	r0, r3
 8003150:	f001 faa6 	bl	80046a0 <RCCEx_PLL3_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
      break;
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003168:	4b93      	ldr	r3, [pc, #588]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003174:	4990      	ldr	r1, [pc, #576]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	650b      	str	r3, [r1, #80]	; 0x50
 800317a:	e001      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d03d      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	2b04      	cmp	r3, #4
 8003192:	d826      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031b1 	.word	0x080031b1
 80031a0:	080031bf 	.word	0x080031bf
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031e9 	.word	0x080031e9
 80031ac:	080031e9 	.word	0x080031e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b0:	4b81      	ldr	r3, [pc, #516]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	4a80      	ldr	r2, [pc, #512]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031bc:	e015      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 f9b9 	bl	800453c <RCCEx_PLL2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031ce:	e00c      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3324      	adds	r3, #36	; 0x24
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 fa62 	bl	80046a0 <RCCEx_PLL3_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031e0:	e003      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
      break;
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f0:	4b71      	ldr	r3, [pc, #452]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	f023 0207 	bic.w	r2, r3, #7
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	496e      	ldr	r1, [pc, #440]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	650b      	str	r3, [r1, #80]	; 0x50
 8003202:	e001      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003210:	2b00      	cmp	r3, #0
 8003212:	d042      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321c:	d02b      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800321e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003222:	d825      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003224:	2bc0      	cmp	r3, #192	; 0xc0
 8003226:	d028      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003228:	2bc0      	cmp	r3, #192	; 0xc0
 800322a:	d821      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	d016      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d81d      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d007      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800323c:	e018      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323e:	4b5e      	ldr	r3, [pc, #376]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	4a5d      	ldr	r2, [pc, #372]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800324a:	e017      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f001 f972 	bl	800453c <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800325c:	e00e      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3324      	adds	r3, #36	; 0x24
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f001 fa1b 	bl	80046a0 <RCCEx_PLL3_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800326e:	e005      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
      break;
 8003274:	e002      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800327a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003282:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003286:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	494a      	ldr	r1, [pc, #296]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	650b      	str	r3, [r1, #80]	; 0x50
 8003294:	e001      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d049      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b0:	d030      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80032b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b6:	d82a      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032bc:	d02c      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80032be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032c2:	d824      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c8:	d018      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80032ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ce:	d81e      	bhi.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80032d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032d8:	d007      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80032da:	e018      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032dc:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	4a35      	ldr	r2, [pc, #212]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032e8:	e017      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f001 f923 	bl	800453c <RCCEx_PLL2_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032fa:	e00e      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3324      	adds	r3, #36	; 0x24
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f001 f9cc 	bl	80046a0 <RCCEx_PLL3_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800330c:	e005      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003314:	bf00      	nop
 8003316:	e000      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800332e:	4922      	ldr	r1, [pc, #136]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	658b      	str	r3, [r1, #88]	; 0x58
 8003334:	e001      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003342:	2b00      	cmp	r3, #0
 8003344:	d04b      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800334c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003350:	d030      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003356:	d82a      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003358:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800335c:	d02e      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800335e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003362:	d824      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003368:	d018      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800336a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336e:	d81e      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d007      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800337a:	e018      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003388:	e019      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f001 f8d3 	bl	800453c <RCCEx_PLL2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800339a:	e010      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3324      	adds	r3, #36	; 0x24
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 f97c 	bl	80046a0 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033ac:	e007      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
      break;
 80033b2:	e004      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80033b4:	bf00      	nop
 80033b6:	e002      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80033b8:	58024400 	.word	0x58024400
      break;
 80033bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033c4:	4b99      	ldr	r3, [pc, #612]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033d2:	4996      	ldr	r1, [pc, #600]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	658b      	str	r3, [r1, #88]	; 0x58
 80033d8:	e001      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d032      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ee:	2b30      	cmp	r3, #48	; 0x30
 80033f0:	d01c      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80033f2:	2b30      	cmp	r3, #48	; 0x30
 80033f4:	d817      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d00c      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d813      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003402:	2b10      	cmp	r3, #16
 8003404:	d10f      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003406:	4b89      	ldr	r3, [pc, #548]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	4a88      	ldr	r2, [pc, #544]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003412:	e00e      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f88e 	bl	800453c <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003424:	e005      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800342c:	bf00      	nop
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003438:	4b7c      	ldr	r3, [pc, #496]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800343a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003444:	4979      	ldr	r1, [pc, #484]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003446:	4313      	orrs	r3, r2
 8003448:	64cb      	str	r3, [r1, #76]	; 0x4c
 800344a:	e001      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d047      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003464:	d030      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800346a:	d82a      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800346c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003470:	d02c      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003476:	d824      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347c:	d018      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800347e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003482:	d81e      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d007      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800348e:	e018      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003490:	4b66      	ldr	r3, [pc, #408]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	4a65      	ldr	r2, [pc, #404]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800349c:	e017      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 f849 	bl	800453c <RCCEx_PLL2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034ae:	e00e      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3324      	adds	r3, #36	; 0x24
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 f8f2 	bl	80046a0 <RCCEx_PLL3_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034c0:	e005      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80034cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034d4:	4b55      	ldr	r3, [pc, #340]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e0:	4952      	ldr	r1, [pc, #328]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	650b      	str	r3, [r1, #80]	; 0x50
 80034e6:	e001      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d049      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003500:	d02e      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003506:	d828      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003508:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800350c:	d02a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800350e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003512:	d822      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003514:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003518:	d026      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800351a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800351e:	d81c      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003524:	d010      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352a:	d816      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01d      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d111      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	2101      	movs	r1, #1
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fffd 	bl	800453c <RCCEx_PLL2_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003546:	e012      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3324      	adds	r3, #36	; 0x24
 800354c:	2101      	movs	r1, #1
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f8a6 	bl	80046a0 <RCCEx_PLL3_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003558:	e009      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
      break;
 800355e:	e006      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003560:	bf00      	nop
 8003562:	e004      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800356c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003574:	4b2d      	ldr	r3, [pc, #180]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003578:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003580:	492a      	ldr	r1, [pc, #168]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003582:	4313      	orrs	r3, r2
 8003584:	650b      	str	r3, [r1, #80]	; 0x50
 8003586:	e001      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d04d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800359e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035a2:	d02e      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80035a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035a8:	d828      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ae:	d02a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d822      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80035b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035ba:	d026      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80035bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035c0:	d81c      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80035c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c6:	d010      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 80035c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035cc:	d816      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01d      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80035d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d6:	d111      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ffac 	bl	800453c <RCCEx_PLL2_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035e8:	e012      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3324      	adds	r3, #36	; 0x24
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 f855 	bl	80046a0 <RCCEx_PLL3_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035fa:	e009      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003602:	bf00      	nop
 8003604:	e004      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800360e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003624:	4901      	ldr	r1, [pc, #4]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003626:	4313      	orrs	r3, r2
 8003628:	658b      	str	r3, [r1, #88]	; 0x58
 800362a:	e003      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800362c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00e      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d108      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f000 ff71 	bl	800453c <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 800365e:	e003      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
      break;
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 8003666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800366e:	4b82      	ldr	r3, [pc, #520]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	497f      	ldr	r1, [pc, #508]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800367c:	4313      	orrs	r3, r2
 800367e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003680:	e001      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d02f      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369a:	d00e      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800369c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a0:	d814      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d015      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80036a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036aa:	d10f      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ac:	4b72      	ldr	r3, [pc, #456]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a71      	ldr	r2, [pc, #452]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036b8:	e00c      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	2101      	movs	r1, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 ff3b 	bl	800453c <RCCEx_PLL2_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036ca:	e003      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
      break;
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 80036d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036da:	4b67      	ldr	r3, [pc, #412]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4964      	ldr	r1, [pc, #400]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	650b      	str	r3, [r1, #80]	; 0x50
 80036ec:	e001      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d031      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	2b03      	cmp	r3, #3
 8003704:	d81a      	bhi.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	08003743 	.word	0x08003743
 8003710:	0800371d 	.word	0x0800371d
 8003714:	0800372b 	.word	0x0800372b
 8003718:	08003743 	.word	0x08003743
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	4a55      	ldr	r2, [pc, #340]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003728:	e00c      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	2102      	movs	r1, #2
 8003730:	4618      	mov	r0, r3
 8003732:	f000 ff03 	bl	800453c <RCCEx_PLL2_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
      break;
 8003740:	e000      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 8003742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800374a:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	f023 0203 	bic.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4948      	ldr	r1, [pc, #288]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003758:	4313      	orrs	r3, r2
 800375a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800375c:	e001      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 808c 	beq.w	8003888 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003770:	4b42      	ldr	r3, [pc, #264]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a41      	ldr	r2, [pc, #260]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800377c:	f7fd ffda 	bl	8001734 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003782:	e009      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003784:	f7fd ffd6 	bl	8001734 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d902      	bls.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	75fb      	strb	r3, [r7, #23]
        break;
 8003796:	e005      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003798:	4b38      	ldr	r3, [pc, #224]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ef      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d16c      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037aa:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80037ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037b4:	4053      	eors	r3, r2
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d013      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a2a      	ldr	r2, [pc, #168]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d4:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a27      	ldr	r2, [pc, #156]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037e0:	4a25      	ldr	r2, [pc, #148]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	d115      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fd ff9f 	bl	8001734 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037f8:	e00b      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7fd ff9b 	bl	8001734 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d902      	bls.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	75fb      	strb	r3, [r7, #23]
            break;
 8003810:	e005      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ed      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d126      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003832:	d10d      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003842:	0919      	lsrs	r1, r3, #4
 8003844:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8003846:	400b      	ands	r3, r1
 8003848:	490b      	ldr	r1, [pc, #44]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800384a:	4313      	orrs	r3, r2
 800384c:	610b      	str	r3, [r1, #16]
 800384e:	e005      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x778>
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003856:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800385a:	6113      	str	r3, [r2, #16]
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800385e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800386c:	4313      	orrs	r3, r2
 800386e:	670b      	str	r3, [r1, #112]	; 0x70
 8003870:	e00a      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	75bb      	strb	r3, [r7, #22]
 8003876:	e007      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8003878:	58024400 	.word	0x58024400
 800387c:	58024800 	.word	0x58024800
 8003880:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d07e      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003898:	2b28      	cmp	r3, #40	; 0x28
 800389a:	d867      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	08003973 	.word	0x08003973
 80038a8:	0800396d 	.word	0x0800396d
 80038ac:	0800396d 	.word	0x0800396d
 80038b0:	0800396d 	.word	0x0800396d
 80038b4:	0800396d 	.word	0x0800396d
 80038b8:	0800396d 	.word	0x0800396d
 80038bc:	0800396d 	.word	0x0800396d
 80038c0:	0800396d 	.word	0x0800396d
 80038c4:	08003949 	.word	0x08003949
 80038c8:	0800396d 	.word	0x0800396d
 80038cc:	0800396d 	.word	0x0800396d
 80038d0:	0800396d 	.word	0x0800396d
 80038d4:	0800396d 	.word	0x0800396d
 80038d8:	0800396d 	.word	0x0800396d
 80038dc:	0800396d 	.word	0x0800396d
 80038e0:	0800396d 	.word	0x0800396d
 80038e4:	0800395b 	.word	0x0800395b
 80038e8:	0800396d 	.word	0x0800396d
 80038ec:	0800396d 	.word	0x0800396d
 80038f0:	0800396d 	.word	0x0800396d
 80038f4:	0800396d 	.word	0x0800396d
 80038f8:	0800396d 	.word	0x0800396d
 80038fc:	0800396d 	.word	0x0800396d
 8003900:	0800396d 	.word	0x0800396d
 8003904:	08003973 	.word	0x08003973
 8003908:	0800396d 	.word	0x0800396d
 800390c:	0800396d 	.word	0x0800396d
 8003910:	0800396d 	.word	0x0800396d
 8003914:	0800396d 	.word	0x0800396d
 8003918:	0800396d 	.word	0x0800396d
 800391c:	0800396d 	.word	0x0800396d
 8003920:	0800396d 	.word	0x0800396d
 8003924:	08003973 	.word	0x08003973
 8003928:	0800396d 	.word	0x0800396d
 800392c:	0800396d 	.word	0x0800396d
 8003930:	0800396d 	.word	0x0800396d
 8003934:	0800396d 	.word	0x0800396d
 8003938:	0800396d 	.word	0x0800396d
 800393c:	0800396d 	.word	0x0800396d
 8003940:	0800396d 	.word	0x0800396d
 8003944:	08003973 	.word	0x08003973
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fdf4 	bl	800453c <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003958:	e00c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3324      	adds	r3, #36	; 0x24
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fe9d 	bl	80046a0 <RCCEx_PLL3_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800396a:	e003      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
      break;
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 8003972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800397a:	4b96      	ldr	r3, [pc, #600]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003986:	4993      	ldr	r1, [pc, #588]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003988:	4313      	orrs	r3, r2
 800398a:	654b      	str	r3, [r1, #84]	; 0x54
 800398c:	e001      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d037      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d820      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x904>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039ef 	.word	0x080039ef
 80039b0:	080039c5 	.word	0x080039c5
 80039b4:	080039d7 	.word	0x080039d7
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039ef 	.word	0x080039ef
 80039c0:	080039ef 	.word	0x080039ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fdb6 	bl	800453c <RCCEx_PLL2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039d4:	e00c      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3324      	adds	r3, #36	; 0x24
 80039da:	2101      	movs	r1, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fe5f 	bl	80046a0 <RCCEx_PLL3_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039e6:	e003      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
      break;
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 80039ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039f6:	4b77      	ldr	r3, [pc, #476]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f023 0207 	bic.w	r2, r3, #7
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a02:	4974      	ldr	r1, [pc, #464]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	654b      	str	r3, [r1, #84]	; 0x54
 8003a08:	e001      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d03a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d821      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a6f 	.word	0x08003a6f
 8003a30:	08003a45 	.word	0x08003a45
 8003a34:	08003a57 	.word	0x08003a57
 8003a38:	08003a6f 	.word	0x08003a6f
 8003a3c:	08003a6f 	.word	0x08003a6f
 8003a40:	08003a6f 	.word	0x08003a6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fd76 	bl	800453c <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a54:	e00c      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3324      	adds	r3, #36	; 0x24
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fe1f 	bl	80046a0 <RCCEx_PLL3_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a6c:	e000      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 8003a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a76:	4b57      	ldr	r3, [pc, #348]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	f023 0207 	bic.w	r2, r3, #7
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a84:	4953      	ldr	r1, [pc, #332]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	658b      	str	r3, [r1, #88]	; 0x58
 8003a8a:	e001      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d04b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa6:	d02e      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aac:	d828      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d02a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d822      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003abe:	d026      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ac4:	d81c      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aca:	d010      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad0:	d816      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01d      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ada:	d111      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fd2a 	bl	800453c <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003aec:	e012      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3324      	adds	r3, #36	; 0x24
 8003af2:	2102      	movs	r1, #2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fdd3 	bl	80046a0 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003afe:	e009      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
      break;
 8003b04:	e006      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8003b06:	bf00      	nop
 8003b08:	e004      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8003b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b1a:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	492a      	ldr	r1, [pc, #168]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	654b      	str	r3, [r1, #84]	; 0x54
 8003b2e:	e001      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d04d      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b4a:	d02e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8003b4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b50:	d828      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d02a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5c:	d822      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b62:	d026      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b68:	d81c      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b6e:	d010      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b74:	d816      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01d      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7e:	d111      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fcd8 	bl	800453c <RCCEx_PLL2_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b90:	e012      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3324      	adds	r3, #36	; 0x24
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fd81 	bl	80046a0 <RCCEx_PLL3_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ba2:	e009      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	e006      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003baa:	bf00      	nop
 8003bac:	e004      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bcc:	4901      	ldr	r1, [pc, #4]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	658b      	str	r3, [r1, #88]	; 0x58
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8003bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d04b      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bf2:	d02e      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003bf4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bf8:	d828      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfe:	d02a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c04:	d822      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003c06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c0a:	d026      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003c0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c10:	d81c      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c16:	d010      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1c:	d816      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01d      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c26:	d111      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fc84 	bl	800453c <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c38:	e012      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3324      	adds	r3, #36	; 0x24
 8003c3e:	2102      	movs	r1, #2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fd2d 	bl	80046a0 <RCCEx_PLL3_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c4a:	e009      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003c52:	bf00      	nop
 8003c54:	e004      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003c56:	bf00      	nop
 8003c58:	e002      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c66:	4b9e      	ldr	r3, [pc, #632]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c74:	499a      	ldr	r1, [pc, #616]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	658b      	str	r3, [r1, #88]	; 0x58
 8003c7a:	e001      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d10a      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3324      	adds	r3, #36	; 0x24
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fcfe 	bl	80046a0 <RCCEx_PLL3_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003cae:	4b8c      	ldr	r3, [pc, #560]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cbc:	4988      	ldr	r1, [pc, #544]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3324      	adds	r3, #36	; 0x24
 8003cde:	2102      	movs	r1, #2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fcdd 	bl	80046a0 <RCCEx_PLL3_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cf0:	4b7b      	ldr	r3, [pc, #492]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cfe:	4978      	ldr	r1, [pc, #480]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d034      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1a:	d01d      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d20:	d817      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d009      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003d2c:	e011      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fc01 	bl	800453c <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d3e:	e00c      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3324      	adds	r3, #36	; 0x24
 8003d44:	2102      	movs	r1, #2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fcaa 	bl	80046a0 <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]
      break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 8003d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d60:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d6e:	495c      	ldr	r1, [pc, #368]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	658b      	str	r3, [r1, #88]	; 0x58
 8003d74:	e001      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d033      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d90:	d01c      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003d92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d96:	d816      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8003d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da2:	d007      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8003da4:	e00f      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da6:	4b4e      	ldr	r3, [pc, #312]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4a4d      	ldr	r2, [pc, #308]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003db2:	e00c      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3324      	adds	r3, #36	; 0x24
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fc70 	bl	80046a0 <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003dc4:	e003      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 8003dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dd4:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	493f      	ldr	r1, [pc, #252]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	654b      	str	r3, [r1, #84]	; 0x54
 8003de8:	e001      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d029      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd26>
 8003e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e06:	d007      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8003e08:	e00f      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0a:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e16:	e00b      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb8c 	bl	800453c <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e42:	4927      	ldr	r1, [pc, #156]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e48:	e001      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3324      	adds	r3, #36	; 0x24
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fc1d 	bl	80046a0 <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d035      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e86:	d017      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 8003e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e8c:	d811      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8003e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e92:	d013      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d80b      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003eb0:	e007      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4902      	ldr	r1, [pc, #8]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	654b      	str	r3, [r1, #84]	; 0x54
 8003edc:	e004      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8003ede:	bf00      	nop
 8003ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ef4:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f00:	492e      	ldr	r1, [pc, #184]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f20:	4926      	ldr	r1, [pc, #152]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3e:	491f      	ldr	r1, [pc, #124]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00d      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f5a:	6113      	str	r3, [r2, #16]
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003f66:	4915      	ldr	r1, [pc, #84]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	da08      	bge.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	490e      	ldr	r1, [pc, #56]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003fa6:	7dbb      	ldrb	r3, [r7, #22]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400

08003fc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fc4:	f7fe fff0 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4904      	ldr	r1, [pc, #16]	; (8003fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	58024400 	.word	0x58024400
 8003fe8:	0800a1d8 	.word	0x0800a1d8

08003fec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	; 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ff4:	4ba1      	ldr	r3, [pc, #644]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003ffe:	4b9f      	ldr	r3, [pc, #636]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	0b1b      	lsrs	r3, r3, #12
 8004004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004008:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800400a:	4b9c      	ldr	r3, [pc, #624]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004016:	4b99      	ldr	r3, [pc, #612]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8111 	beq.w	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b02      	cmp	r3, #2
 800403e:	f000 8083 	beq.w	8004148 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b02      	cmp	r3, #2
 8004046:	f200 80a1 	bhi.w	800418c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d056      	beq.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004056:	e099      	b.n	800418c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004058:	4b88      	ldr	r3, [pc, #544]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02d      	beq.n	80040c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004064:	4b85      	ldr	r3, [pc, #532]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	4a84      	ldr	r2, [pc, #528]	; (8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408e:	4b7b      	ldr	r3, [pc, #492]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409e:	ed97 6a03 	vldr	s12, [r7, #12]
 80040a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040be:	e087      	b.n	80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d2:	4b6a      	ldr	r3, [pc, #424]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004102:	e065      	b.n	80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004116:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004126:	ed97 6a03 	vldr	s12, [r7, #12]
 800412a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004146:	e043      	b.n	80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415a:	4b48      	ldr	r3, [pc, #288]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416a:	ed97 6a03 	vldr	s12, [r7, #12]
 800416e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800417e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800418a:	e021      	b.n	80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	0a5b      	lsrs	r3, r3, #9
 80041d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f6:	ee17 2a90 	vmov	r2, s15
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80041fe:	4b1f      	ldr	r3, [pc, #124]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	0c1b      	lsrs	r3, r3, #16
 8004204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004218:	edd7 6a07 	vldr	s13, [r7, #28]
 800421c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004224:	ee17 2a90 	vmov	r2, s15
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	0e1b      	lsrs	r3, r3, #24
 8004232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004246:	edd7 6a07 	vldr	s13, [r7, #28]
 800424a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004252:	ee17 2a90 	vmov	r2, s15
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800425a:	e008      	b.n	800426e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
}
 800426e:	bf00      	nop
 8004270:	3724      	adds	r7, #36	; 0x24
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400
 8004280:	03d09000 	.word	0x03d09000
 8004284:	46000000 	.word	0x46000000
 8004288:	4c742400 	.word	0x4c742400
 800428c:	4a742400 	.word	0x4a742400
 8004290:	4bbebc20 	.word	0x4bbebc20

08004294 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800429c:	4ba1      	ldr	r3, [pc, #644]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80042a6:	4b9f      	ldr	r3, [pc, #636]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	0d1b      	lsrs	r3, r3, #20
 80042ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042b2:	4b9c      	ldr	r3, [pc, #624]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80042be:	4b99      	ldr	r3, [pc, #612]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	08db      	lsrs	r3, r3, #3
 80042c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8111 	beq.w	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f000 8083 	beq.w	80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	f200 80a1 	bhi.w	8004434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d056      	beq.n	80043ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042fe:	e099      	b.n	8004434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004300:	4b88      	ldr	r3, [pc, #544]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d02d      	beq.n	8004368 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800430c:	4b85      	ldr	r3, [pc, #532]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	08db      	lsrs	r3, r3, #3
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	4a84      	ldr	r2, [pc, #528]	; (8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004336:	4b7b      	ldr	r3, [pc, #492]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004346:	ed97 6a03 	vldr	s12, [r7, #12]
 800434a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800434e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800435a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004362:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004366:	e087      	b.n	8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437a:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438a:	ed97 6a03 	vldr	s12, [r7, #12]
 800438e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043aa:	e065      	b.n	8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043be:	4b59      	ldr	r3, [pc, #356]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80043d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ee:	e043      	b.n	8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004402:	4b48      	ldr	r3, [pc, #288]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004412:	ed97 6a03 	vldr	s12, [r7, #12]
 8004416:	eddf 5a45 	vldr	s11, [pc, #276]	; 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800441a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004432:	e021      	b.n	8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004446:	4b37      	ldr	r3, [pc, #220]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004456:	ed97 6a03 	vldr	s12, [r7, #12]
 800445a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004476:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004478:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	0a5b      	lsrs	r3, r3, #9
 800447e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800448e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004492:	edd7 6a07 	vldr	s13, [r7, #28]
 8004496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800449a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449e:	ee17 2a90 	vmov	r2, s15
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044cc:	ee17 2a90 	vmov	r2, s15
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80044f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fa:	ee17 2a90 	vmov	r2, s15
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
}
 8004516:	bf00      	nop
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	58024400 	.word	0x58024400
 8004528:	03d09000 	.word	0x03d09000
 800452c:	46000000 	.word	0x46000000
 8004530:	4c742400 	.word	0x4c742400
 8004534:	4a742400 	.word	0x4a742400
 8004538:	4bbebc20 	.word	0x4bbebc20

0800453c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800454a:	4b53      	ldr	r3, [pc, #332]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b03      	cmp	r3, #3
 8004554:	d101      	bne.n	800455a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e099      	b.n	800468e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800455a:	4b4f      	ldr	r3, [pc, #316]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a4e      	ldr	r2, [pc, #312]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004566:	f7fd f8e5 	bl	8001734 <HAL_GetTick>
 800456a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800456c:	e008      	b.n	8004580 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800456e:	f7fd f8e1 	bl	8001734 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e086      	b.n	800468e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004580:	4b45      	ldr	r3, [pc, #276]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f0      	bne.n	800456e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800458c:	4b42      	ldr	r3, [pc, #264]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	031b      	lsls	r3, r3, #12
 800459a:	493f      	ldr	r1, [pc, #252]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 800459c:	4313      	orrs	r3, r2
 800459e:	628b      	str	r3, [r1, #40]	; 0x28
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	061b      	lsls	r3, r3, #24
 80045cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045d0:	4931      	ldr	r1, [pc, #196]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045d6:	4b30      	ldr	r3, [pc, #192]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	492d      	ldr	r1, [pc, #180]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045e8:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f023 0220 	bic.w	r2, r3, #32
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	4928      	ldr	r1, [pc, #160]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045fa:	4b27      	ldr	r3, [pc, #156]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	4a26      	ldr	r2, [pc, #152]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004600:	f023 0310 	bic.w	r3, r3, #16
 8004604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <RCCEx_PLL2_Config+0x160>)
 800460c:	4013      	ands	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	69d2      	ldr	r2, [r2, #28]
 8004612:	00d2      	lsls	r2, r2, #3
 8004614:	4920      	ldr	r1, [pc, #128]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004616:	4313      	orrs	r3, r2
 8004618:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800461a:	4b1f      	ldr	r3, [pc, #124]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004620:	f043 0310 	orr.w	r3, r3, #16
 8004624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800462c:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	4a19      	ldr	r2, [pc, #100]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004638:	e00f      	b.n	800465a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d106      	bne.n	800464e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004640:	4b15      	ldr	r3, [pc, #84]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4a14      	ldr	r2, [pc, #80]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800464c:	e005      	b.n	800465a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	4a11      	ldr	r2, [pc, #68]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004658:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800465a:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004666:	f7fd f865 	bl	8001734 <HAL_GetTick>
 800466a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800466c:	e008      	b.n	8004680 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800466e:	f7fd f861 	bl	8001734 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e006      	b.n	800468e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <RCCEx_PLL2_Config+0x15c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	58024400 	.word	0x58024400
 800469c:	ffff0007 	.word	0xffff0007

080046a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046ae:	4b53      	ldr	r3, [pc, #332]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d101      	bne.n	80046be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e099      	b.n	80047f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046be:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a4e      	ldr	r2, [pc, #312]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80046c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ca:	f7fd f833 	bl	8001734 <HAL_GetTick>
 80046ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046d2:	f7fd f82f 	bl	8001734 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e086      	b.n	80047f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046f0:	4b42      	ldr	r3, [pc, #264]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	051b      	lsls	r3, r3, #20
 80046fe:	493f      	ldr	r1, [pc, #252]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004700:	4313      	orrs	r3, r2
 8004702:	628b      	str	r3, [r1, #40]	; 0x28
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	3b01      	subs	r3, #1
 800470a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	3b01      	subs	r3, #1
 8004714:	025b      	lsls	r3, r3, #9
 8004716:	b29b      	uxth	r3, r3
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	3b01      	subs	r3, #1
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	3b01      	subs	r3, #1
 800472e:	061b      	lsls	r3, r3, #24
 8004730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004734:	4931      	ldr	r1, [pc, #196]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800473a:	4b30      	ldr	r3, [pc, #192]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	492d      	ldr	r1, [pc, #180]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800474c:	4b2b      	ldr	r3, [pc, #172]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	4928      	ldr	r1, [pc, #160]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800475e:	4b27      	ldr	r3, [pc, #156]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	4a26      	ldr	r2, [pc, #152]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	4b24      	ldr	r3, [pc, #144]	; (8004800 <RCCEx_PLL3_Config+0x160>)
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	69d2      	ldr	r2, [r2, #28]
 8004776:	00d2      	lsls	r2, r2, #3
 8004778:	4920      	ldr	r1, [pc, #128]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800477e:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004788:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 8004796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800479a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800479c:	e00f      	b.n	80047be <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d106      	bne.n	80047b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047a4:	4b15      	ldr	r3, [pc, #84]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80047aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047b0:	e005      	b.n	80047be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	4a11      	ldr	r2, [pc, #68]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80047b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ca:	f7fc ffb3 	bl	8001734 <HAL_GetTick>
 80047ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047d0:	e008      	b.n	80047e4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047d2:	f7fc ffaf 	bl	8001734 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e006      	b.n	80047f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <RCCEx_PLL3_Config+0x15c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	58024400 	.word	0x58024400
 8004800:	ffff0007 	.word	0xffff0007

08004804 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0f1      	b.n	80049fa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a78      	ldr	r2, [pc, #480]	; (8004a04 <HAL_SPI_Init+0x200>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00f      	beq.n	8004846 <HAL_SPI_Init+0x42>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a77      	ldr	r2, [pc, #476]	; (8004a08 <HAL_SPI_Init+0x204>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00a      	beq.n	8004846 <HAL_SPI_Init+0x42>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a75      	ldr	r2, [pc, #468]	; (8004a0c <HAL_SPI_Init+0x208>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d005      	beq.n	8004846 <HAL_SPI_Init+0x42>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d901      	bls.n	8004846 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e0d9      	b.n	80049fa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fdca 	bl	80053e0 <SPI_GetPacketSize>
 800484c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a6c      	ldr	r2, [pc, #432]	; (8004a04 <HAL_SPI_Init+0x200>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00c      	beq.n	8004872 <HAL_SPI_Init+0x6e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a6a      	ldr	r2, [pc, #424]	; (8004a08 <HAL_SPI_Init+0x204>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <HAL_SPI_Init+0x6e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a69      	ldr	r2, [pc, #420]	; (8004a0c <HAL_SPI_Init+0x208>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d002      	beq.n	8004872 <HAL_SPI_Init+0x6e>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b08      	cmp	r3, #8
 8004870:	d811      	bhi.n	8004896 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004876:	4a63      	ldr	r2, [pc, #396]	; (8004a04 <HAL_SPI_Init+0x200>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d009      	beq.n	8004890 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a61      	ldr	r2, [pc, #388]	; (8004a08 <HAL_SPI_Init+0x204>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_SPI_Init+0x8c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a60      	ldr	r2, [pc, #384]	; (8004a0c <HAL_SPI_Init+0x208>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d104      	bne.n	800489a <HAL_SPI_Init+0x96>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b10      	cmp	r3, #16
 8004894:	d901      	bls.n	800489a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e0af      	b.n	80049fa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc fd1c 	bl	80012ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80048d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e0:	d119      	bne.n	8004916 <HAL_SPI_Init+0x112>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ea:	d103      	bne.n	80048f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10c      	bne.n	8004916 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004904:	d107      	bne.n	8004916 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	431a      	orrs	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	ea42 0103 	orr.w	r1, r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	ea42 0103 	orr.w	r1, r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d113      	bne.n	80049b6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40013000 	.word	0x40013000
 8004a08:	40003800 	.word	0x40003800
 8004a0c:	40003c00 	.word	0x40003c00

08004a10 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3320      	adds	r3, #32
 8004a26:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_SPI_Transmit+0x2a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e1d7      	b.n	8004dea <HAL_SPI_Transmit+0x3da>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a42:	f7fc fe77 	bl	8001734 <HAL_GetTick>
 8004a46:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d007      	beq.n	8004a64 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
 8004a56:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004a60:	7efb      	ldrb	r3, [r7, #27]
 8004a62:	e1c2      	b.n	8004dea <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Transmit+0x60>
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004a7c:	7efb      	ldrb	r3, [r7, #27]
 8004a7e:	e1b4      	b.n	8004dea <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2203      	movs	r2, #3
 8004a84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004ad0:	d107      	bne.n	8004ae2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	4b96      	ldr	r3, [pc, #600]	; (8004d44 <HAL_SPI_Transmit+0x334>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	88f9      	ldrh	r1, [r7, #6]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0e:	d107      	bne.n	8004b20 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b0f      	cmp	r3, #15
 8004b26:	d947      	bls.n	8004bb8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004b28:	e03f      	b.n	8004baa <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d114      	bne.n	8004b62 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	1d1a      	adds	r2, r3, #4
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004b60:	e023      	b.n	8004baa <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b62:	f7fc fde7 	bl	8001734 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d803      	bhi.n	8004b7a <HAL_SPI_Transmit+0x16a>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d102      	bne.n	8004b80 <HAL_SPI_Transmit+0x170>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d114      	bne.n	8004baa <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fb5f 	bl	8005244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e11f      	b.n	8004dea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1b9      	bne.n	8004b2a <HAL_SPI_Transmit+0x11a>
 8004bb6:	e0f2      	b.n	8004d9e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b07      	cmp	r3, #7
 8004bbe:	f240 80e7 	bls.w	8004d90 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004bc2:	e05d      	b.n	8004c80 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d132      	bne.n	8004c38 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d918      	bls.n	8004c10 <HAL_SPI_Transmit+0x200>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d014      	beq.n	8004c10 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b02      	subs	r3, #2
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004c0e:	e037      	b.n	8004c80 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	881a      	ldrh	r2, [r3, #0]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004c36:	e023      	b.n	8004c80 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c38:	f7fc fd7c 	bl	8001734 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d803      	bhi.n	8004c50 <HAL_SPI_Transmit+0x240>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d102      	bne.n	8004c56 <HAL_SPI_Transmit+0x246>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d114      	bne.n	8004c80 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 faf4 	bl	8005244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0b4      	b.n	8004dea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d19b      	bne.n	8004bc4 <HAL_SPI_Transmit+0x1b4>
 8004c8c:	e087      	b.n	8004d9e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d155      	bne.n	8004d48 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d918      	bls.n	8004cda <HAL_SPI_Transmit+0x2ca>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d914      	bls.n	8004cda <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	1d1a      	adds	r2, r3, #4
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b04      	subs	r3, #4
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004cd8:	e05a      	b.n	8004d90 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d917      	bls.n	8004d16 <HAL_SPI_Transmit+0x306>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d013      	beq.n	8004d16 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf2:	881a      	ldrh	r2, [r3, #0]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	1c9a      	adds	r2, r3, #2
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b02      	subs	r3, #2
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004d14:	e03c      	b.n	8004d90 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3320      	adds	r3, #32
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004d40:	e026      	b.n	8004d90 <HAL_SPI_Transmit+0x380>
 8004d42:	bf00      	nop
 8004d44:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d48:	f7fc fcf4 	bl	8001734 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d803      	bhi.n	8004d60 <HAL_SPI_Transmit+0x350>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_Transmit+0x356>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d114      	bne.n	8004d90 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa6c 	bl	8005244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e02c      	b.n	8004dea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f47f af78 	bne.w	8004c8e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2108      	movs	r1, #8
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 faeb 	bl	8005384 <SPI_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fa3d 	bl	8005244 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8004de8:	7efb      	ldrb	r3, [r7, #27]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop

08004df4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3320      	adds	r3, #32
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3330      	adds	r3, #48	; 0x30
 8004e16:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x32>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e209      	b.n	800523a <HAL_SPI_TransmitReceive+0x446>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e2e:	f7fc fc81 	bl	8001734 <HAL_GetTick>
 8004e32:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004e38:	887b      	ldrh	r3, [r7, #2]
 8004e3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004e42:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e4a:	7efb      	ldrb	r3, [r7, #27]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d014      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x86>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e56:	d106      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004e60:	7efb      	ldrb	r3, [r7, #27]
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d009      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
 8004e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e78:	e1df      	b.n	800523a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x98>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x98>
 8004e86:	887b      	ldrh	r3, [r7, #2]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e9e:	e1cc      	b.n	800523a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d003      	beq.n	8004eb4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2205      	movs	r2, #5
 8004eb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	887a      	ldrh	r2, [r7, #2]
 8004ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	887a      	ldrh	r2, [r7, #2]
 8004ece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	4b82      	ldr	r3, [pc, #520]	; (8005104 <HAL_SPI_TransmitReceive+0x310>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	8879      	ldrh	r1, [r7, #2]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f20:	d107      	bne.n	8004f32 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d970      	bls.n	800501c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004f3a:	e068      	b.n	800500e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d11a      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x18c>
 8004f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d017      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	1d1a      	adds	r2, r3, #4
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695a      	ldr	r2, [r3, #20]
 8004f86:	f248 0308 	movw	r3, #32776	; 0x8008
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01a      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x1d2>
 8004f90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d017      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fa0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa6:	1d1a      	adds	r2, r3, #4
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004fc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fc6:	f7fc fbb5 	bl	8001734 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d803      	bhi.n	8004fde <HAL_SPI_TransmitReceive+0x1ea>
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d102      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x1f0>
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d114      	bne.n	800500e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f92d 	bl	8005244 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e115      	b.n	800523a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800500e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005010:	2b00      	cmp	r3, #0
 8005012:	d193      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x148>
 8005014:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d190      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x148>
 800501a:	e0e7      	b.n	80051ec <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b07      	cmp	r3, #7
 8005022:	f240 80dd 	bls.w	80051e0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005026:	e066      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b02      	cmp	r3, #2
 8005034:	d119      	bne.n	800506a <HAL_SPI_TransmitReceive+0x276>
 8005036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005038:	2b00      	cmp	r3, #0
 800503a:	d016      	beq.n	800506a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005040:	881a      	ldrh	r2, [r3, #0]
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504a:	1c9a      	adds	r2, r3, #2
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005068:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d11a      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x2ba>
 8005078:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d017      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	8812      	ldrh	r2, [r2, #0]
 8005086:	b292      	uxth	r2, r2
 8005088:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508e:	1c9a      	adds	r2, r3, #2
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80050ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ae:	f7fc fb41 	bl	8001734 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d803      	bhi.n	80050c6 <HAL_SPI_TransmitReceive+0x2d2>
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d102      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x2d8>
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d114      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f8b9 	bl	8005244 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0a1      	b.n	800523a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80050f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d195      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x234>
 80050fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d192      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x234>
 8005102:	e073      	b.n	80051ec <HAL_SPI_TransmitReceive+0x3f8>
 8005104:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d11b      	bne.n	800514e <HAL_SPI_TransmitReceive+0x35a>
 8005116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005118:	2b00      	cmp	r3, #0
 800511a:	d018      	beq.n	800514e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3320      	adds	r3, #32
 8005126:	7812      	ldrb	r2, [r2, #0]
 8005128:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800514c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d11d      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x3a4>
 800515c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005196:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005198:	f7fc facc 	bl	8001734 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d803      	bhi.n	80051b0 <HAL_SPI_TransmitReceive+0x3bc>
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_TransmitReceive+0x3c2>
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d114      	bne.n	80051e0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f844 	bl	8005244 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e02c      	b.n	800523a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80051e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d190      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x314>
 80051e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d18d      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2200      	movs	r2, #0
 80051f4:	2108      	movs	r1, #8
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f8c4 	bl	8005384 <SPI_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f816 	bl	8005244 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e001      	b.n	800523a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8005236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800523a:	4618      	mov	r0, r3
 800523c:	3730      	adds	r7, #48	; 0x30
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0210 	orr.w	r2, r2, #16
 8005272:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6919      	ldr	r1, [r3, #16]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b3c      	ldr	r3, [pc, #240]	; (8005380 <SPI_CloseTransfer+0x13c>)
 8005290:	400b      	ands	r3, r1
 8005292:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80052a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d014      	beq.n	80052da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00f      	beq.n	80052da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0220 	orr.w	r2, r2, #32
 80052d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d014      	beq.n	8005310 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00f      	beq.n	8005310 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f6:	f043 0204 	orr.w	r2, r3, #4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800530e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00f      	beq.n	800533a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005338:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00f      	beq.n	8005364 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534a:	f043 0208 	orr.w	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005362:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	fffffc90 	.word	0xfffffc90

08005384 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005394:	e010      	b.n	80053b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005396:	f7fc f9cd 	bl	8001734 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d803      	bhi.n	80053ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d102      	bne.n	80053b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e00f      	b.n	80053d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4013      	ands	r3, r2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d0df      	beq.n	8005396 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	3307      	adds	r3, #7
 80053fe:	08db      	lsrs	r3, r3, #3
 8005400:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	fb02 f303 	mul.w	r3, r2, r3
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e049      	b.n	80054bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f841 	bl	80054c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f000 f9ff 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d001      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e054      	b.n	800559a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d022      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d01d      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a22      	ldr	r2, [pc, #136]	; (80055ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d018      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <HAL_TIM_Base_Start_IT+0xe4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d115      	bne.n	8005584 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <HAL_TIM_Base_Start_IT+0xec>)
 8005560:	4013      	ands	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b06      	cmp	r3, #6
 8005568:	d015      	beq.n	8005596 <HAL_TIM_Base_Start_IT+0xbe>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005570:	d011      	beq.n	8005596 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005582:	e008      	b.n	8005596 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e000      	b.n	8005598 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005596:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40000400 	.word	0x40000400
 80055b0:	40000800 	.word	0x40000800
 80055b4:	40000c00 	.word	0x40000c00
 80055b8:	40010400 	.word	0x40010400
 80055bc:	40001800 	.word	0x40001800
 80055c0:	40014000 	.word	0x40014000
 80055c4:	00010007 	.word	0x00010007

080055c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d122      	bne.n	8005624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0202 	mvn.w	r2, #2
 80055f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f905 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f8f7 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f908 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b04      	cmp	r3, #4
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0204 	mvn.w	r2, #4
 8005648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8db 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8cd 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8de 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b08      	cmp	r3, #8
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b08      	cmp	r3, #8
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0208 	mvn.w	r2, #8
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2204      	movs	r2, #4
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f8b1 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8a3 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f8b4 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b10      	cmp	r3, #16
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0210 	mvn.w	r2, #16
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2208      	movs	r2, #8
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f887 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f879 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f88a 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d10e      	bne.n	800574c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b01      	cmp	r3, #1
 800573a:	d107      	bne.n	800574c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0201 	mvn.w	r2, #1
 8005744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fb fcd2 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d10e      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d107      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f914 	bl	80059a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005786:	d10e      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f907 	bl	80059b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d10e      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d107      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f838 	bl	8005842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d10e      	bne.n	80057fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d107      	bne.n	80057fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0220 	mvn.w	r2, #32
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f8c7 	bl	800598c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a40      	ldr	r2, [pc, #256]	; (800596c <TIM_Base_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d00f      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3d      	ldr	r2, [pc, #244]	; (8005970 <TIM_Base_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00b      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <TIM_Base_SetConfig+0x120>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3a      	ldr	r2, [pc, #232]	; (800597c <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d108      	bne.n	80058aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2f      	ldr	r2, [pc, #188]	; (800596c <TIM_Base_SetConfig+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01f      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d01b      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <TIM_Base_SetConfig+0x118>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d017      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <TIM_Base_SetConfig+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	; (800597c <TIM_Base_SetConfig+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_Base_SetConfig+0x128>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <TIM_Base_SetConfig+0x12c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_Base_SetConfig+0x9a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a26      	ldr	r2, [pc, #152]	; (8005988 <TIM_Base_SetConfig+0x130>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d108      	bne.n	8005904 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a10      	ldr	r2, [pc, #64]	; (800596c <TIM_Base_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a12      	ldr	r2, [pc, #72]	; (800597c <TIM_Base_SetConfig+0x124>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a11      	ldr	r2, [pc, #68]	; (8005980 <TIM_Base_SetConfig+0x128>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a10      	ldr	r2, [pc, #64]	; (8005984 <TIM_Base_SetConfig+0x12c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0f      	ldr	r2, [pc, #60]	; (8005988 <TIM_Base_SetConfig+0x130>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e042      	b.n	8005a60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7fb fd09 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2224      	movs	r2, #36	; 0x24
 80059f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8c2 	bl	8005b94 <UART_SetConfig>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e022      	b.n	8005a60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fe1e 	bl	8006664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fea5 	bl	80067a8 <UART_CheckIdleState>
 8005a5e:	4603      	mov	r3, r0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	f040 8083 	bne.w	8005b8a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_UART_Transmit+0x28>
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e07b      	b.n	8005b8c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Transmit+0x3a>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e074      	b.n	8005b8c <HAL_UART_Transmit+0x124>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2221      	movs	r2, #33	; 0x21
 8005ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aba:	f7fb fe3b 	bl	8001734 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d108      	bne.n	8005aec <HAL_UART_Transmit+0x84>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	e003      	b.n	8005af4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005afc:	e02c      	b.n	8005b58 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fe98 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e039      	b.n	8005b8c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3302      	adds	r3, #2
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	e007      	b.n	8005b46 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1cc      	bne.n	8005afe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2140      	movs	r1, #64	; 0x40
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fe65 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e006      	b.n	8005b8c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e000      	b.n	8005b8c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b98:	b092      	sub	sp, #72	; 0x48
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4bbe      	ldr	r3, [pc, #760]	; (8005ebc <UART_SetConfig+0x328>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4ab3      	ldr	r2, [pc, #716]	; (8005ec0 <UART_SetConfig+0x32c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	4baf      	ldr	r3, [pc, #700]	; (8005ec4 <UART_SetConfig+0x330>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c10:	430b      	orrs	r3, r1
 8005c12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	f023 010f 	bic.w	r1, r3, #15
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4aa6      	ldr	r2, [pc, #664]	; (8005ec8 <UART_SetConfig+0x334>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d177      	bne.n	8005d24 <UART_SetConfig+0x190>
 8005c34:	4ba5      	ldr	r3, [pc, #660]	; (8005ecc <UART_SetConfig+0x338>)
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c3c:	2b28      	cmp	r3, #40	; 0x28
 8005c3e:	d86d      	bhi.n	8005d1c <UART_SetConfig+0x188>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0xb4>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005ced 	.word	0x08005ced
 8005c4c:	08005d1d 	.word	0x08005d1d
 8005c50:	08005d1d 	.word	0x08005d1d
 8005c54:	08005d1d 	.word	0x08005d1d
 8005c58:	08005d1d 	.word	0x08005d1d
 8005c5c:	08005d1d 	.word	0x08005d1d
 8005c60:	08005d1d 	.word	0x08005d1d
 8005c64:	08005d1d 	.word	0x08005d1d
 8005c68:	08005cf5 	.word	0x08005cf5
 8005c6c:	08005d1d 	.word	0x08005d1d
 8005c70:	08005d1d 	.word	0x08005d1d
 8005c74:	08005d1d 	.word	0x08005d1d
 8005c78:	08005d1d 	.word	0x08005d1d
 8005c7c:	08005d1d 	.word	0x08005d1d
 8005c80:	08005d1d 	.word	0x08005d1d
 8005c84:	08005d1d 	.word	0x08005d1d
 8005c88:	08005cfd 	.word	0x08005cfd
 8005c8c:	08005d1d 	.word	0x08005d1d
 8005c90:	08005d1d 	.word	0x08005d1d
 8005c94:	08005d1d 	.word	0x08005d1d
 8005c98:	08005d1d 	.word	0x08005d1d
 8005c9c:	08005d1d 	.word	0x08005d1d
 8005ca0:	08005d1d 	.word	0x08005d1d
 8005ca4:	08005d1d 	.word	0x08005d1d
 8005ca8:	08005d05 	.word	0x08005d05
 8005cac:	08005d1d 	.word	0x08005d1d
 8005cb0:	08005d1d 	.word	0x08005d1d
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005d1d 	.word	0x08005d1d
 8005cbc:	08005d1d 	.word	0x08005d1d
 8005cc0:	08005d1d 	.word	0x08005d1d
 8005cc4:	08005d1d 	.word	0x08005d1d
 8005cc8:	08005d0d 	.word	0x08005d0d
 8005ccc:	08005d1d 	.word	0x08005d1d
 8005cd0:	08005d1d 	.word	0x08005d1d
 8005cd4:	08005d1d 	.word	0x08005d1d
 8005cd8:	08005d1d 	.word	0x08005d1d
 8005cdc:	08005d1d 	.word	0x08005d1d
 8005ce0:	08005d1d 	.word	0x08005d1d
 8005ce4:	08005d1d 	.word	0x08005d1d
 8005ce8:	08005d15 	.word	0x08005d15
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e222      	b.n	800613a <UART_SetConfig+0x5a6>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e21e      	b.n	800613a <UART_SetConfig+0x5a6>
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e21a      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d04:	2310      	movs	r3, #16
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0a:	e216      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e212      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e20e      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d1c:	2380      	movs	r3, #128	; 0x80
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d22:	e20a      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a69      	ldr	r2, [pc, #420]	; (8005ed0 <UART_SetConfig+0x33c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d130      	bne.n	8005d90 <UART_SetConfig+0x1fc>
 8005d2e:	4b67      	ldr	r3, [pc, #412]	; (8005ecc <UART_SetConfig+0x338>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d826      	bhi.n	8005d88 <UART_SetConfig+0x1f4>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0x1ac>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d59 	.word	0x08005d59
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d69 	.word	0x08005d69
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e1ec      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e1e8      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e1e4      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d76:	e1e0      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7e:	e1dc      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d80:	2340      	movs	r3, #64	; 0x40
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d86:	e1d8      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8e:	e1d4      	b.n	800613a <UART_SetConfig+0x5a6>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a4f      	ldr	r2, [pc, #316]	; (8005ed4 <UART_SetConfig+0x340>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d130      	bne.n	8005dfc <UART_SetConfig+0x268>
 8005d9a:	4b4c      	ldr	r3, [pc, #304]	; (8005ecc <UART_SetConfig+0x338>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d826      	bhi.n	8005df4 <UART_SetConfig+0x260>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0x218>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dc5 	.word	0x08005dc5
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005dd5 	.word	0x08005dd5
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e1b6      	b.n	800613a <UART_SetConfig+0x5a6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e1b2      	b.n	800613a <UART_SetConfig+0x5a6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e1ae      	b.n	800613a <UART_SetConfig+0x5a6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de2:	e1aa      	b.n	800613a <UART_SetConfig+0x5a6>
 8005de4:	2320      	movs	r3, #32
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dea:	e1a6      	b.n	800613a <UART_SetConfig+0x5a6>
 8005dec:	2340      	movs	r3, #64	; 0x40
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df2:	e1a2      	b.n	800613a <UART_SetConfig+0x5a6>
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfa:	e19e      	b.n	800613a <UART_SetConfig+0x5a6>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a35      	ldr	r2, [pc, #212]	; (8005ed8 <UART_SetConfig+0x344>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d130      	bne.n	8005e68 <UART_SetConfig+0x2d4>
 8005e06:	4b31      	ldr	r3, [pc, #196]	; (8005ecc <UART_SetConfig+0x338>)
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d826      	bhi.n	8005e60 <UART_SetConfig+0x2cc>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <UART_SetConfig+0x284>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e31 	.word	0x08005e31
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e41 	.word	0x08005e41
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e51 	.word	0x08005e51
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e36:	e180      	b.n	800613a <UART_SetConfig+0x5a6>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3e:	e17c      	b.n	800613a <UART_SetConfig+0x5a6>
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e178      	b.n	800613a <UART_SetConfig+0x5a6>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e174      	b.n	800613a <UART_SetConfig+0x5a6>
 8005e50:	2320      	movs	r3, #32
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e170      	b.n	800613a <UART_SetConfig+0x5a6>
 8005e58:	2340      	movs	r3, #64	; 0x40
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5e:	e16c      	b.n	800613a <UART_SetConfig+0x5a6>
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e66:	e168      	b.n	800613a <UART_SetConfig+0x5a6>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <UART_SetConfig+0x348>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d142      	bne.n	8005ef8 <UART_SetConfig+0x364>
 8005e72:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <UART_SetConfig+0x338>)
 8005e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d838      	bhi.n	8005ef0 <UART_SetConfig+0x35c>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0x2f0>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005e9d 	.word	0x08005e9d
 8005e88:	08005ea5 	.word	0x08005ea5
 8005e8c:	08005ead 	.word	0x08005ead
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ee1 	.word	0x08005ee1
 8005e98:	08005ee9 	.word	0x08005ee9
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e14a      	b.n	800613a <UART_SetConfig+0x5a6>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e146      	b.n	800613a <UART_SetConfig+0x5a6>
 8005eac:	2308      	movs	r3, #8
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e142      	b.n	800613a <UART_SetConfig+0x5a6>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e13e      	b.n	800613a <UART_SetConfig+0x5a6>
 8005ebc:	cfff69f3 	.word	0xcfff69f3
 8005ec0:	58000c00 	.word	0x58000c00
 8005ec4:	11fff4ff 	.word	0x11fff4ff
 8005ec8:	40011000 	.word	0x40011000
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	40004400 	.word	0x40004400
 8005ed4:	40004800 	.word	0x40004800
 8005ed8:	40004c00 	.word	0x40004c00
 8005edc:	40005000 	.word	0x40005000
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e128      	b.n	800613a <UART_SetConfig+0x5a6>
 8005ee8:	2340      	movs	r3, #64	; 0x40
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e124      	b.n	800613a <UART_SetConfig+0x5a6>
 8005ef0:	2380      	movs	r3, #128	; 0x80
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e120      	b.n	800613a <UART_SetConfig+0x5a6>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4acb      	ldr	r2, [pc, #812]	; (800622c <UART_SetConfig+0x698>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d176      	bne.n	8005ff0 <UART_SetConfig+0x45c>
 8005f02:	4bcb      	ldr	r3, [pc, #812]	; (8006230 <UART_SetConfig+0x69c>)
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f0a:	2b28      	cmp	r3, #40	; 0x28
 8005f0c:	d86c      	bhi.n	8005fe8 <UART_SetConfig+0x454>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <UART_SetConfig+0x380>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005fb9 	.word	0x08005fb9
 8005f18:	08005fe9 	.word	0x08005fe9
 8005f1c:	08005fe9 	.word	0x08005fe9
 8005f20:	08005fe9 	.word	0x08005fe9
 8005f24:	08005fe9 	.word	0x08005fe9
 8005f28:	08005fe9 	.word	0x08005fe9
 8005f2c:	08005fe9 	.word	0x08005fe9
 8005f30:	08005fe9 	.word	0x08005fe9
 8005f34:	08005fc1 	.word	0x08005fc1
 8005f38:	08005fe9 	.word	0x08005fe9
 8005f3c:	08005fe9 	.word	0x08005fe9
 8005f40:	08005fe9 	.word	0x08005fe9
 8005f44:	08005fe9 	.word	0x08005fe9
 8005f48:	08005fe9 	.word	0x08005fe9
 8005f4c:	08005fe9 	.word	0x08005fe9
 8005f50:	08005fe9 	.word	0x08005fe9
 8005f54:	08005fc9 	.word	0x08005fc9
 8005f58:	08005fe9 	.word	0x08005fe9
 8005f5c:	08005fe9 	.word	0x08005fe9
 8005f60:	08005fe9 	.word	0x08005fe9
 8005f64:	08005fe9 	.word	0x08005fe9
 8005f68:	08005fe9 	.word	0x08005fe9
 8005f6c:	08005fe9 	.word	0x08005fe9
 8005f70:	08005fe9 	.word	0x08005fe9
 8005f74:	08005fd1 	.word	0x08005fd1
 8005f78:	08005fe9 	.word	0x08005fe9
 8005f7c:	08005fe9 	.word	0x08005fe9
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005fe9 	.word	0x08005fe9
 8005f88:	08005fe9 	.word	0x08005fe9
 8005f8c:	08005fe9 	.word	0x08005fe9
 8005f90:	08005fe9 	.word	0x08005fe9
 8005f94:	08005fd9 	.word	0x08005fd9
 8005f98:	08005fe9 	.word	0x08005fe9
 8005f9c:	08005fe9 	.word	0x08005fe9
 8005fa0:	08005fe9 	.word	0x08005fe9
 8005fa4:	08005fe9 	.word	0x08005fe9
 8005fa8:	08005fe9 	.word	0x08005fe9
 8005fac:	08005fe9 	.word	0x08005fe9
 8005fb0:	08005fe9 	.word	0x08005fe9
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e0bc      	b.n	800613a <UART_SetConfig+0x5a6>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc6:	e0b8      	b.n	800613a <UART_SetConfig+0x5a6>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fce:	e0b4      	b.n	800613a <UART_SetConfig+0x5a6>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd6:	e0b0      	b.n	800613a <UART_SetConfig+0x5a6>
 8005fd8:	2320      	movs	r3, #32
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fde:	e0ac      	b.n	800613a <UART_SetConfig+0x5a6>
 8005fe0:	2340      	movs	r3, #64	; 0x40
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe6:	e0a8      	b.n	800613a <UART_SetConfig+0x5a6>
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fee:	e0a4      	b.n	800613a <UART_SetConfig+0x5a6>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a8f      	ldr	r2, [pc, #572]	; (8006234 <UART_SetConfig+0x6a0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d130      	bne.n	800605c <UART_SetConfig+0x4c8>
 8005ffa:	4b8d      	ldr	r3, [pc, #564]	; (8006230 <UART_SetConfig+0x69c>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b05      	cmp	r3, #5
 8006004:	d826      	bhi.n	8006054 <UART_SetConfig+0x4c0>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0x478>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006025 	.word	0x08006025
 8006010:	0800602d 	.word	0x0800602d
 8006014:	08006035 	.word	0x08006035
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	2300      	movs	r3, #0
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e086      	b.n	800613a <UART_SetConfig+0x5a6>
 800602c:	2304      	movs	r3, #4
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006032:	e082      	b.n	800613a <UART_SetConfig+0x5a6>
 8006034:	2308      	movs	r3, #8
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e07e      	b.n	800613a <UART_SetConfig+0x5a6>
 800603c:	2310      	movs	r3, #16
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006042:	e07a      	b.n	800613a <UART_SetConfig+0x5a6>
 8006044:	2320      	movs	r3, #32
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604a:	e076      	b.n	800613a <UART_SetConfig+0x5a6>
 800604c:	2340      	movs	r3, #64	; 0x40
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006052:	e072      	b.n	800613a <UART_SetConfig+0x5a6>
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605a:	e06e      	b.n	800613a <UART_SetConfig+0x5a6>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a75      	ldr	r2, [pc, #468]	; (8006238 <UART_SetConfig+0x6a4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d130      	bne.n	80060c8 <UART_SetConfig+0x534>
 8006066:	4b72      	ldr	r3, [pc, #456]	; (8006230 <UART_SetConfig+0x69c>)
 8006068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	2b05      	cmp	r3, #5
 8006070:	d826      	bhi.n	80060c0 <UART_SetConfig+0x52c>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x4e4>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006091 	.word	0x08006091
 800607c:	08006099 	.word	0x08006099
 8006080:	080060a1 	.word	0x080060a1
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	2300      	movs	r3, #0
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e050      	b.n	800613a <UART_SetConfig+0x5a6>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e04c      	b.n	800613a <UART_SetConfig+0x5a6>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e048      	b.n	800613a <UART_SetConfig+0x5a6>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e044      	b.n	800613a <UART_SetConfig+0x5a6>
 80060b0:	2320      	movs	r3, #32
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e040      	b.n	800613a <UART_SetConfig+0x5a6>
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e03c      	b.n	800613a <UART_SetConfig+0x5a6>
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e038      	b.n	800613a <UART_SetConfig+0x5a6>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a5b      	ldr	r2, [pc, #364]	; (800623c <UART_SetConfig+0x6a8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d130      	bne.n	8006134 <UART_SetConfig+0x5a0>
 80060d2:	4b57      	ldr	r3, [pc, #348]	; (8006230 <UART_SetConfig+0x69c>)
 80060d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	2b05      	cmp	r3, #5
 80060dc:	d826      	bhi.n	800612c <UART_SetConfig+0x598>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UART_SetConfig+0x550>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006105 	.word	0x08006105
 80060ec:	0800610d 	.word	0x0800610d
 80060f0:	08006115 	.word	0x08006115
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	08006125 	.word	0x08006125
 80060fc:	2302      	movs	r3, #2
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e01a      	b.n	800613a <UART_SetConfig+0x5a6>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e016      	b.n	800613a <UART_SetConfig+0x5a6>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e012      	b.n	800613a <UART_SetConfig+0x5a6>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e00e      	b.n	800613a <UART_SetConfig+0x5a6>
 800611c:	2320      	movs	r3, #32
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e00a      	b.n	800613a <UART_SetConfig+0x5a6>
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e006      	b.n	800613a <UART_SetConfig+0x5a6>
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e002      	b.n	800613a <UART_SetConfig+0x5a6>
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a3f      	ldr	r2, [pc, #252]	; (800623c <UART_SetConfig+0x6a8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	f040 80f8 	bne.w	8006336 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006146:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800614a:	2b20      	cmp	r3, #32
 800614c:	dc46      	bgt.n	80061dc <UART_SetConfig+0x648>
 800614e:	2b02      	cmp	r3, #2
 8006150:	f2c0 8082 	blt.w	8006258 <UART_SetConfig+0x6c4>
 8006154:	3b02      	subs	r3, #2
 8006156:	2b1e      	cmp	r3, #30
 8006158:	d87e      	bhi.n	8006258 <UART_SetConfig+0x6c4>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <UART_SetConfig+0x5cc>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	080061e3 	.word	0x080061e3
 8006164:	08006259 	.word	0x08006259
 8006168:	080061eb 	.word	0x080061eb
 800616c:	08006259 	.word	0x08006259
 8006170:	08006259 	.word	0x08006259
 8006174:	08006259 	.word	0x08006259
 8006178:	080061fb 	.word	0x080061fb
 800617c:	08006259 	.word	0x08006259
 8006180:	08006259 	.word	0x08006259
 8006184:	08006259 	.word	0x08006259
 8006188:	08006259 	.word	0x08006259
 800618c:	08006259 	.word	0x08006259
 8006190:	08006259 	.word	0x08006259
 8006194:	08006259 	.word	0x08006259
 8006198:	0800620b 	.word	0x0800620b
 800619c:	08006259 	.word	0x08006259
 80061a0:	08006259 	.word	0x08006259
 80061a4:	08006259 	.word	0x08006259
 80061a8:	08006259 	.word	0x08006259
 80061ac:	08006259 	.word	0x08006259
 80061b0:	08006259 	.word	0x08006259
 80061b4:	08006259 	.word	0x08006259
 80061b8:	08006259 	.word	0x08006259
 80061bc:	08006259 	.word	0x08006259
 80061c0:	08006259 	.word	0x08006259
 80061c4:	08006259 	.word	0x08006259
 80061c8:	08006259 	.word	0x08006259
 80061cc:	08006259 	.word	0x08006259
 80061d0:	08006259 	.word	0x08006259
 80061d4:	08006259 	.word	0x08006259
 80061d8:	0800624b 	.word	0x0800624b
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d037      	beq.n	8006250 <UART_SetConfig+0x6bc>
 80061e0:	e03a      	b.n	8006258 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061e2:	f7fd feed 	bl	8003fc0 <HAL_RCCEx_GetD3PCLK1Freq>
 80061e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061e8:	e03c      	b.n	8006264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd fefc 	bl	8003fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f8:	e034      	b.n	8006264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061fa:	f107 0318 	add.w	r3, r7, #24
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe f848 	bl	8004294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006208:	e02c      	b.n	8006264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <UART_SetConfig+0x69c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d016      	beq.n	8006244 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <UART_SetConfig+0x69c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	08db      	lsrs	r3, r3, #3
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	4a07      	ldr	r2, [pc, #28]	; (8006240 <UART_SetConfig+0x6ac>)
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006228:	e01c      	b.n	8006264 <UART_SetConfig+0x6d0>
 800622a:	bf00      	nop
 800622c:	40011400 	.word	0x40011400
 8006230:	58024400 	.word	0x58024400
 8006234:	40007800 	.word	0x40007800
 8006238:	40007c00 	.word	0x40007c00
 800623c:	58000c00 	.word	0x58000c00
 8006240:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006244:	4b9d      	ldr	r3, [pc, #628]	; (80064bc <UART_SetConfig+0x928>)
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006248:	e00c      	b.n	8006264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800624a:	4b9d      	ldr	r3, [pc, #628]	; (80064c0 <UART_SetConfig+0x92c>)
 800624c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800624e:	e009      	b.n	8006264 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006256:	e005      	b.n	8006264 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006262:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 81de 	beq.w	8006628 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	4a94      	ldr	r2, [pc, #592]	; (80064c4 <UART_SetConfig+0x930>)
 8006272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006276:	461a      	mov	r2, r3
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627a:	fbb3 f3f2 	udiv	r3, r3, r2
 800627e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	4413      	add	r3, r2
 800628a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628c:	429a      	cmp	r2, r3
 800628e:	d305      	bcc.n	800629c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006298:	429a      	cmp	r2, r3
 800629a:	d903      	bls.n	80062a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062a2:	e1c1      	b.n	8006628 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a6:	2200      	movs	r2, #0
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	60fa      	str	r2, [r7, #12]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	4a84      	ldr	r2, [pc, #528]	; (80064c4 <UART_SetConfig+0x930>)
 80062b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2200      	movs	r2, #0
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062c6:	f7fa f863 	bl	8000390 <__aeabi_uldivmod>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4610      	mov	r0, r2
 80062d0:	4619      	mov	r1, r3
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	020b      	lsls	r3, r1, #8
 80062dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062e0:	0202      	lsls	r2, r0, #8
 80062e2:	6979      	ldr	r1, [r7, #20]
 80062e4:	6849      	ldr	r1, [r1, #4]
 80062e6:	0849      	lsrs	r1, r1, #1
 80062e8:	2000      	movs	r0, #0
 80062ea:	460c      	mov	r4, r1
 80062ec:	4605      	mov	r5, r0
 80062ee:	eb12 0804 	adds.w	r8, r2, r4
 80062f2:	eb43 0905 	adc.w	r9, r3, r5
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	469a      	mov	sl, r3
 80062fe:	4693      	mov	fp, r2
 8006300:	4652      	mov	r2, sl
 8006302:	465b      	mov	r3, fp
 8006304:	4640      	mov	r0, r8
 8006306:	4649      	mov	r1, r9
 8006308:	f7fa f842 	bl	8000390 <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4613      	mov	r3, r2
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631a:	d308      	bcc.n	800632e <UART_SetConfig+0x79a>
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006322:	d204      	bcs.n	800632e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800632a:	60da      	str	r2, [r3, #12]
 800632c:	e17c      	b.n	8006628 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006334:	e178      	b.n	8006628 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633e:	f040 80c5 	bne.w	80064cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006342:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006346:	2b20      	cmp	r3, #32
 8006348:	dc48      	bgt.n	80063dc <UART_SetConfig+0x848>
 800634a:	2b00      	cmp	r3, #0
 800634c:	db7b      	blt.n	8006446 <UART_SetConfig+0x8b2>
 800634e:	2b20      	cmp	r3, #32
 8006350:	d879      	bhi.n	8006446 <UART_SetConfig+0x8b2>
 8006352:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x7c4>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	080063e3 	.word	0x080063e3
 800635c:	080063eb 	.word	0x080063eb
 8006360:	08006447 	.word	0x08006447
 8006364:	08006447 	.word	0x08006447
 8006368:	080063f3 	.word	0x080063f3
 800636c:	08006447 	.word	0x08006447
 8006370:	08006447 	.word	0x08006447
 8006374:	08006447 	.word	0x08006447
 8006378:	08006403 	.word	0x08006403
 800637c:	08006447 	.word	0x08006447
 8006380:	08006447 	.word	0x08006447
 8006384:	08006447 	.word	0x08006447
 8006388:	08006447 	.word	0x08006447
 800638c:	08006447 	.word	0x08006447
 8006390:	08006447 	.word	0x08006447
 8006394:	08006447 	.word	0x08006447
 8006398:	08006413 	.word	0x08006413
 800639c:	08006447 	.word	0x08006447
 80063a0:	08006447 	.word	0x08006447
 80063a4:	08006447 	.word	0x08006447
 80063a8:	08006447 	.word	0x08006447
 80063ac:	08006447 	.word	0x08006447
 80063b0:	08006447 	.word	0x08006447
 80063b4:	08006447 	.word	0x08006447
 80063b8:	08006447 	.word	0x08006447
 80063bc:	08006447 	.word	0x08006447
 80063c0:	08006447 	.word	0x08006447
 80063c4:	08006447 	.word	0x08006447
 80063c8:	08006447 	.word	0x08006447
 80063cc:	08006447 	.word	0x08006447
 80063d0:	08006447 	.word	0x08006447
 80063d4:	08006447 	.word	0x08006447
 80063d8:	08006439 	.word	0x08006439
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d02e      	beq.n	800643e <UART_SetConfig+0x8aa>
 80063e0:	e031      	b.n	8006446 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e2:	f7fc fe11 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 80063e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063e8:	e033      	b.n	8006452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063ea:	f7fc fe23 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
 80063ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063f0:	e02f      	b.n	8006452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fd fdf8 	bl	8003fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006400:	e027      	b.n	8006452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006402:	f107 0318 	add.w	r3, r7, #24
 8006406:	4618      	mov	r0, r3
 8006408:	f7fd ff44 	bl	8004294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006410:	e01f      	b.n	8006452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006412:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <UART_SetConfig+0x934>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800641e:	4b2a      	ldr	r3, [pc, #168]	; (80064c8 <UART_SetConfig+0x934>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	08db      	lsrs	r3, r3, #3
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	4a24      	ldr	r2, [pc, #144]	; (80064bc <UART_SetConfig+0x928>)
 800642a:	fa22 f303 	lsr.w	r3, r2, r3
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006430:	e00f      	b.n	8006452 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006432:	4b22      	ldr	r3, [pc, #136]	; (80064bc <UART_SetConfig+0x928>)
 8006434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006436:	e00c      	b.n	8006452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006438:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <UART_SetConfig+0x92c>)
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800643c:	e009      	b.n	8006452 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006444:	e005      	b.n	8006452 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 80e7 	beq.w	8006628 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	4a19      	ldr	r2, [pc, #100]	; (80064c4 <UART_SetConfig+0x930>)
 8006460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006464:	461a      	mov	r2, r3
 8006466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006468:	fbb3 f3f2 	udiv	r3, r3, r2
 800646c:	005a      	lsls	r2, r3, #1
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	441a      	add	r2, r3
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	fbb2 f3f3 	udiv	r3, r2, r3
 800647e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	2b0f      	cmp	r3, #15
 8006484:	d916      	bls.n	80064b4 <UART_SetConfig+0x920>
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648c:	d212      	bcs.n	80064b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	b29b      	uxth	r3, r3
 8006492:	f023 030f 	bic.w	r3, r3, #15
 8006496:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	b29b      	uxth	r3, r3
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064a6:	4313      	orrs	r3, r2
 80064a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	e0b9      	b.n	8006628 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064ba:	e0b5      	b.n	8006628 <UART_SetConfig+0xa94>
 80064bc:	03d09000 	.word	0x03d09000
 80064c0:	003d0900 	.word	0x003d0900
 80064c4:	0800a230 	.word	0x0800a230
 80064c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80064cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	dc49      	bgt.n	8006568 <UART_SetConfig+0x9d4>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	db7c      	blt.n	80065d2 <UART_SetConfig+0xa3e>
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d87a      	bhi.n	80065d2 <UART_SetConfig+0xa3e>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0x950>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	0800656f 	.word	0x0800656f
 80064e8:	08006577 	.word	0x08006577
 80064ec:	080065d3 	.word	0x080065d3
 80064f0:	080065d3 	.word	0x080065d3
 80064f4:	0800657f 	.word	0x0800657f
 80064f8:	080065d3 	.word	0x080065d3
 80064fc:	080065d3 	.word	0x080065d3
 8006500:	080065d3 	.word	0x080065d3
 8006504:	0800658f 	.word	0x0800658f
 8006508:	080065d3 	.word	0x080065d3
 800650c:	080065d3 	.word	0x080065d3
 8006510:	080065d3 	.word	0x080065d3
 8006514:	080065d3 	.word	0x080065d3
 8006518:	080065d3 	.word	0x080065d3
 800651c:	080065d3 	.word	0x080065d3
 8006520:	080065d3 	.word	0x080065d3
 8006524:	0800659f 	.word	0x0800659f
 8006528:	080065d3 	.word	0x080065d3
 800652c:	080065d3 	.word	0x080065d3
 8006530:	080065d3 	.word	0x080065d3
 8006534:	080065d3 	.word	0x080065d3
 8006538:	080065d3 	.word	0x080065d3
 800653c:	080065d3 	.word	0x080065d3
 8006540:	080065d3 	.word	0x080065d3
 8006544:	080065d3 	.word	0x080065d3
 8006548:	080065d3 	.word	0x080065d3
 800654c:	080065d3 	.word	0x080065d3
 8006550:	080065d3 	.word	0x080065d3
 8006554:	080065d3 	.word	0x080065d3
 8006558:	080065d3 	.word	0x080065d3
 800655c:	080065d3 	.word	0x080065d3
 8006560:	080065d3 	.word	0x080065d3
 8006564:	080065c5 	.word	0x080065c5
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d02e      	beq.n	80065ca <UART_SetConfig+0xa36>
 800656c:	e031      	b.n	80065d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800656e:	f7fc fd4b 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 8006572:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006574:	e033      	b.n	80065de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006576:	f7fc fd5d 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
 800657a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800657c:	e02f      	b.n	80065de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800657e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006582:	4618      	mov	r0, r3
 8006584:	f7fd fd32 	bl	8003fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800658c:	e027      	b.n	80065de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800658e:	f107 0318 	add.w	r3, r7, #24
 8006592:	4618      	mov	r0, r3
 8006594:	f7fd fe7e 	bl	8004294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800659c:	e01f      	b.n	80065de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800659e:	4b2d      	ldr	r3, [pc, #180]	; (8006654 <UART_SetConfig+0xac0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065aa:	4b2a      	ldr	r3, [pc, #168]	; (8006654 <UART_SetConfig+0xac0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	08db      	lsrs	r3, r3, #3
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	4a28      	ldr	r2, [pc, #160]	; (8006658 <UART_SetConfig+0xac4>)
 80065b6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065bc:	e00f      	b.n	80065de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80065be:	4b26      	ldr	r3, [pc, #152]	; (8006658 <UART_SetConfig+0xac4>)
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c2:	e00c      	b.n	80065de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065c4:	4b25      	ldr	r3, [pc, #148]	; (800665c <UART_SetConfig+0xac8>)
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c8:	e009      	b.n	80065de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d0:	e005      	b.n	80065de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80065dc:	bf00      	nop
    }

    if (pclk != 0U)
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d021      	beq.n	8006628 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <UART_SetConfig+0xacc>)
 80065ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	441a      	add	r2, r3
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	2b0f      	cmp	r3, #15
 800660c:	d909      	bls.n	8006622 <UART_SetConfig+0xa8e>
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006614:	d205      	bcs.n	8006622 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	b29a      	uxth	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e002      	b.n	8006628 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2201      	movs	r2, #1
 800662c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2201      	movs	r2, #1
 8006634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2200      	movs	r2, #0
 800663c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2200      	movs	r2, #0
 8006642:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006644:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006648:	4618      	mov	r0, r3
 800664a:	3748      	adds	r7, #72	; 0x48
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006652:	bf00      	nop
 8006654:	58024400 	.word	0x58024400
 8006658:	03d09000 	.word	0x03d09000
 800665c:	003d0900 	.word	0x003d0900
 8006660:	0800a230 	.word	0x0800a230

08006664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01a      	beq.n	800677a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006762:	d10a      	bne.n	800677a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
  }
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067b8:	f7fa ffbc 	bl	8001734 <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d10e      	bne.n	80067ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f82f 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e025      	b.n	8006836 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d10e      	bne.n	8006816 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f819 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e00f      	b.n	8006836 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b09c      	sub	sp, #112	; 0x70
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	603b      	str	r3, [r7, #0]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684e:	e0a9      	b.n	80069a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	f000 80a5 	beq.w	80069a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fa ff6b 	bl	8001734 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <UART_WaitOnFlagUntilTimeout+0x32>
 800686a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800686c:	2b00      	cmp	r3, #0
 800686e:	d140      	bne.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800687e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006884:	667b      	str	r3, [r7, #100]	; 0x64
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006890:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006894:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800689c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e6      	bne.n	8006870 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	663b      	str	r3, [r7, #96]	; 0x60
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80068c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e5      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e069      	b.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d051      	beq.n	80069a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800690a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690e:	d149      	bne.n	80069a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006918:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800692e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
 800693a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	613b      	str	r3, [r7, #16]
   return(result);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	66bb      	str	r3, [r7, #104]	; 0x68
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800696c:	623a      	str	r2, [r7, #32]
 800696e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	69f9      	ldr	r1, [r7, #28]
 8006972:	6a3a      	ldr	r2, [r7, #32]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	61bb      	str	r3, [r7, #24]
   return(result);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e5      	bne.n	800694c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e010      	b.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69da      	ldr	r2, [r3, #28]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4013      	ands	r3, r2
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	79fb      	ldrb	r3, [r7, #7]
 80069be:	429a      	cmp	r2, r3
 80069c0:	f43f af46 	beq.w	8006850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3770      	adds	r7, #112	; 0x70
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e027      	b.n	8006a34 <HAL_UARTEx_DisableFifoMode+0x66>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	; 0x24
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e02d      	b.n	8006ab4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2224      	movs	r2, #36	; 0x24
 8006a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f84f 	bl	8006b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e02d      	b.n	8006b30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2224      	movs	r2, #36	; 0x24
 8006ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f811 	bl	8006b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b58:	e031      	b.n	8006bbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b5a:	2310      	movs	r3, #16
 8006b5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b5e:	2310      	movs	r3, #16
 8006b60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	0e5b      	lsrs	r3, r3, #25
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	0f5b      	lsrs	r3, r3, #29
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	7b3a      	ldrb	r2, [r7, #12]
 8006b86:	4911      	ldr	r1, [pc, #68]	; (8006bcc <UARTEx_SetNbDataToProcess+0x94>)
 8006b88:	5c8a      	ldrb	r2, [r1, r2]
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b8e:	7b3a      	ldrb	r2, [r7, #12]
 8006b90:	490f      	ldr	r1, [pc, #60]	; (8006bd0 <UARTEx_SetNbDataToProcess+0x98>)
 8006b92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	7b7a      	ldrb	r2, [r7, #13]
 8006ba4:	4909      	ldr	r1, [pc, #36]	; (8006bcc <UARTEx_SetNbDataToProcess+0x94>)
 8006ba6:	5c8a      	ldrb	r2, [r1, r2]
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bac:	7b7a      	ldrb	r2, [r7, #13]
 8006bae:	4908      	ldr	r1, [pc, #32]	; (8006bd0 <UARTEx_SetNbDataToProcess+0x98>)
 8006bb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	0800a248 	.word	0x0800a248
 8006bd0:	0800a250 	.word	0x0800a250

08006bd4 <__NVIC_SetPriority>:
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	6039      	str	r1, [r7, #0]
 8006bde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	db0a      	blt.n	8006bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	490c      	ldr	r1, [pc, #48]	; (8006c20 <__NVIC_SetPriority+0x4c>)
 8006bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bf2:	0112      	lsls	r2, r2, #4
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006bfc:	e00a      	b.n	8006c14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	4908      	ldr	r1, [pc, #32]	; (8006c24 <__NVIC_SetPriority+0x50>)
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	3b04      	subs	r3, #4
 8006c0c:	0112      	lsls	r2, r2, #4
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	440b      	add	r3, r1
 8006c12:	761a      	strb	r2, [r3, #24]
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	e000e100 	.word	0xe000e100
 8006c24:	e000ed00 	.word	0xe000ed00

08006c28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <SysTick_Handler+0x1c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006c30:	f002 f95e 	bl	8008ef0 <xTaskGetSchedulerState>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d001      	beq.n	8006c3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006c3a:	f000 fd95 	bl	8007768 <xPortSysTickHandler>
  }
}
 8006c3e:	bf00      	nop
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	e000e010 	.word	0xe000e010

08006c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	f06f 0004 	mvn.w	r0, #4
 8006c52:	f7ff ffbf 	bl	8006bd4 <__NVIC_SetPriority>
#endif
}
 8006c56:	bf00      	nop
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c62:	f3ef 8305 	mrs	r3, IPSR
 8006c66:	603b      	str	r3, [r7, #0]
  return(result);
 8006c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c6e:	f06f 0305 	mvn.w	r3, #5
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	e00c      	b.n	8006c90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <osKernelInitialize+0x44>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d105      	bne.n	8006c8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c7e:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <osKernelInitialize+0x44>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	e002      	b.n	8006c90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c90:	687b      	ldr	r3, [r7, #4]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	240002a0 	.word	0x240002a0

08006ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006caa:	f3ef 8305 	mrs	r3, IPSR
 8006cae:	603b      	str	r3, [r7, #0]
  return(result);
 8006cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8006cb6:	f06f 0305 	mvn.w	r3, #5
 8006cba:	607b      	str	r3, [r7, #4]
 8006cbc:	e010      	b.n	8006ce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <osKernelStart+0x48>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d109      	bne.n	8006cda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006cc6:	f7ff ffbf 	bl	8006c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006cca:	4b08      	ldr	r3, [pc, #32]	; (8006cec <osKernelStart+0x48>)
 8006ccc:	2202      	movs	r2, #2
 8006cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006cd0:	f001 fcb2 	bl	8008638 <vTaskStartScheduler>
      stat = osOK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	607b      	str	r3, [r7, #4]
 8006cd8:	e002      	b.n	8006ce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295
 8006cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ce0:	687b      	ldr	r3, [r7, #4]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	240002a0 	.word	0x240002a0

08006cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	; 0x38
 8006cf4:	af04      	add	r7, sp, #16
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d00:	f3ef 8305 	mrs	r3, IPSR
 8006d04:	617b      	str	r3, [r7, #20]
  return(result);
 8006d06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d17e      	bne.n	8006e0a <osThreadNew+0x11a>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d07b      	beq.n	8006e0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d12:	2380      	movs	r3, #128	; 0x80
 8006d14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d16:	2318      	movs	r3, #24
 8006d18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d045      	beq.n	8006db6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <osThreadNew+0x48>
        name = attr->name;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <osThreadNew+0x6e>
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	2b38      	cmp	r3, #56	; 0x38
 8006d50:	d805      	bhi.n	8006d5e <osThreadNew+0x6e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <osThreadNew+0x72>
        return (NULL);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e054      	b.n	8006e0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	089b      	lsrs	r3, r3, #2
 8006d70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00e      	beq.n	8006d98 <osThreadNew+0xa8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2bbb      	cmp	r3, #187	; 0xbb
 8006d80:	d90a      	bls.n	8006d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d006      	beq.n	8006d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <osThreadNew+0xa8>
        mem = 1;
 8006d92:	2301      	movs	r3, #1
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	e010      	b.n	8006dba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10c      	bne.n	8006dba <osThreadNew+0xca>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d108      	bne.n	8006dba <osThreadNew+0xca>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <osThreadNew+0xca>
          mem = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	e001      	b.n	8006dba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d110      	bne.n	8006de2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dc8:	9202      	str	r2, [sp, #8]
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f001 fa42 	bl	8008260 <xTaskCreateStatic>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	e013      	b.n	8006e0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d110      	bne.n	8006e0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f107 0310 	add.w	r3, r7, #16
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f001 fa8d 	bl	800831a <xTaskCreate>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d001      	beq.n	8006e0a <osThreadNew+0x11a>
            hTask = NULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e0a:	693b      	ldr	r3, [r7, #16]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3728      	adds	r7, #40	; 0x28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e1c:	f3ef 8305 	mrs	r3, IPSR
 8006e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <osDelay+0x1c>
    stat = osErrorISR;
 8006e28:	f06f 0305 	mvn.w	r3, #5
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e007      	b.n	8006e40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fbc8 	bl	80085d0 <vTaskDelay>
    }
  }

  return (stat);
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4a07      	ldr	r2, [pc, #28]	; (8006e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	4a06      	ldr	r2, [pc, #24]	; (8006e7c <vApplicationGetIdleTaskMemory+0x30>)
 8006e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2280      	movs	r2, #128	; 0x80
 8006e68:	601a      	str	r2, [r3, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	240002a4 	.word	0x240002a4
 8006e7c:	24000360 	.word	0x24000360

08006e80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4a07      	ldr	r2, [pc, #28]	; (8006eac <vApplicationGetTimerTaskMemory+0x2c>)
 8006e90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4a06      	ldr	r2, [pc, #24]	; (8006eb0 <vApplicationGetTimerTaskMemory+0x30>)
 8006e96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e9e:	601a      	str	r2, [r3, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	24000560 	.word	0x24000560
 8006eb0:	2400061c 	.word	0x2400061c

08006eb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ec0:	f001 fc2a 	bl	8008718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ec4:	4b5b      	ldr	r3, [pc, #364]	; (8007034 <pvPortMalloc+0x180>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ecc:	f000 f920 	bl	8007110 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ed0:	4b59      	ldr	r3, [pc, #356]	; (8007038 <pvPortMalloc+0x184>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f040 8093 	bne.w	8007004 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01d      	beq.n	8006f20 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d014      	beq.n	8006f20 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f023 0307 	bic.w	r3, r3, #7
 8006efc:	3308      	adds	r3, #8
 8006efe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d06e      	beq.n	8007004 <pvPortMalloc+0x150>
 8006f26:	4b45      	ldr	r3, [pc, #276]	; (800703c <pvPortMalloc+0x188>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d869      	bhi.n	8007004 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f30:	4b43      	ldr	r3, [pc, #268]	; (8007040 <pvPortMalloc+0x18c>)
 8006f32:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f34:	4b42      	ldr	r3, [pc, #264]	; (8007040 <pvPortMalloc+0x18c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f3a:	e004      	b.n	8006f46 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d903      	bls.n	8006f58 <pvPortMalloc+0xa4>
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1f1      	bne.n	8006f3c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f58:	4b36      	ldr	r3, [pc, #216]	; (8007034 <pvPortMalloc+0x180>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d050      	beq.n	8007004 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2208      	movs	r2, #8
 8006f68:	4413      	add	r3, r2
 8006f6a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	1ad2      	subs	r2, r2, r3
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d91f      	bls.n	8006fc4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4413      	add	r3, r2
 8006f8a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <pvPortMalloc+0xf8>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	613b      	str	r3, [r7, #16]
}
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fbe:	69b8      	ldr	r0, [r7, #24]
 8006fc0:	f000 f908 	bl	80071d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fc4:	4b1d      	ldr	r3, [pc, #116]	; (800703c <pvPortMalloc+0x188>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	4a1b      	ldr	r2, [pc, #108]	; (800703c <pvPortMalloc+0x188>)
 8006fd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fd2:	4b1a      	ldr	r3, [pc, #104]	; (800703c <pvPortMalloc+0x188>)
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <pvPortMalloc+0x190>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d203      	bcs.n	8006fe6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fde:	4b17      	ldr	r3, [pc, #92]	; (800703c <pvPortMalloc+0x188>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a18      	ldr	r2, [pc, #96]	; (8007044 <pvPortMalloc+0x190>)
 8006fe4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	4b13      	ldr	r3, [pc, #76]	; (8007038 <pvPortMalloc+0x184>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ffa:	4b13      	ldr	r3, [pc, #76]	; (8007048 <pvPortMalloc+0x194>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3301      	adds	r3, #1
 8007000:	4a11      	ldr	r2, [pc, #68]	; (8007048 <pvPortMalloc+0x194>)
 8007002:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007004:	f001 fb96 	bl	8008734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <pvPortMalloc+0x174>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60fb      	str	r3, [r7, #12]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <pvPortMalloc+0x172>
	return pvReturn;
 8007028:	69fb      	ldr	r3, [r7, #28]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3728      	adds	r7, #40	; 0x28
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	24004624 	.word	0x24004624
 8007038:	24004638 	.word	0x24004638
 800703c:	24004628 	.word	0x24004628
 8007040:	2400461c 	.word	0x2400461c
 8007044:	2400462c 	.word	0x2400462c
 8007048:	24004630 	.word	0x24004630

0800704c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d04d      	beq.n	80070fa <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800705e:	2308      	movs	r3, #8
 8007060:	425b      	negs	r3, r3
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	4b24      	ldr	r3, [pc, #144]	; (8007104 <vPortFree+0xb8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4013      	ands	r3, r2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <vPortFree+0x44>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	60fb      	str	r3, [r7, #12]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <vPortFree+0x62>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	60bb      	str	r3, [r7, #8]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	4b14      	ldr	r3, [pc, #80]	; (8007104 <vPortFree+0xb8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4013      	ands	r3, r2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01e      	beq.n	80070fa <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11a      	bne.n	80070fa <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <vPortFree+0xb8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	43db      	mvns	r3, r3
 80070ce:	401a      	ands	r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070d4:	f001 fb20 	bl	8008718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <vPortFree+0xbc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4413      	add	r3, r2
 80070e2:	4a09      	ldr	r2, [pc, #36]	; (8007108 <vPortFree+0xbc>)
 80070e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070e6:	6938      	ldr	r0, [r7, #16]
 80070e8:	f000 f874 	bl	80071d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070ec:	4b07      	ldr	r3, [pc, #28]	; (800710c <vPortFree+0xc0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	4a06      	ldr	r2, [pc, #24]	; (800710c <vPortFree+0xc0>)
 80070f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070f6:	f001 fb1d 	bl	8008734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070fa:	bf00      	nop
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	24004638 	.word	0x24004638
 8007108:	24004628 	.word	0x24004628
 800710c:	24004634 	.word	0x24004634

08007110 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007116:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800711a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800711c:	4b27      	ldr	r3, [pc, #156]	; (80071bc <prvHeapInit+0xac>)
 800711e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00c      	beq.n	8007144 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3307      	adds	r3, #7
 800712e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0307 	bic.w	r3, r3, #7
 8007136:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	4a1f      	ldr	r2, [pc, #124]	; (80071bc <prvHeapInit+0xac>)
 8007140:	4413      	add	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007148:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <prvHeapInit+0xb0>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800714e:	4b1c      	ldr	r3, [pc, #112]	; (80071c0 <prvHeapInit+0xb0>)
 8007150:	2200      	movs	r2, #0
 8007152:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	4413      	add	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800715c:	2208      	movs	r2, #8
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0307 	bic.w	r3, r3, #7
 800716a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a15      	ldr	r2, [pc, #84]	; (80071c4 <prvHeapInit+0xb4>)
 8007170:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007172:	4b14      	ldr	r3, [pc, #80]	; (80071c4 <prvHeapInit+0xb4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <prvHeapInit+0xb4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007190:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <prvHeapInit+0xb4>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <prvHeapInit+0xb8>)
 800719e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	4a09      	ldr	r2, [pc, #36]	; (80071cc <prvHeapInit+0xbc>)
 80071a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <prvHeapInit+0xc0>)
 80071aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071ae:	601a      	str	r2, [r3, #0]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	24000a1c 	.word	0x24000a1c
 80071c0:	2400461c 	.word	0x2400461c
 80071c4:	24004624 	.word	0x24004624
 80071c8:	2400462c 	.word	0x2400462c
 80071cc:	24004628 	.word	0x24004628
 80071d0:	24004638 	.word	0x24004638

080071d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071dc:	4b28      	ldr	r3, [pc, #160]	; (8007280 <prvInsertBlockIntoFreeList+0xac>)
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	e002      	b.n	80071e8 <prvInsertBlockIntoFreeList+0x14>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d8f7      	bhi.n	80071e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	4413      	add	r3, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	429a      	cmp	r2, r3
 8007202:	d108      	bne.n	8007216 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	441a      	add	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	441a      	add	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d118      	bne.n	800725c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b15      	ldr	r3, [pc, #84]	; (8007284 <prvInsertBlockIntoFreeList+0xb0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d00d      	beq.n	8007252 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	441a      	add	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e008      	b.n	8007264 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007252:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <prvInsertBlockIntoFreeList+0xb0>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	e003      	b.n	8007264 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	429a      	cmp	r2, r3
 800726a:	d002      	beq.n	8007272 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007272:	bf00      	nop
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	2400461c 	.word	0x2400461c
 8007284:	24004624 	.word	0x24004624

08007288 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f103 0208 	add.w	r2, r3, #8
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f04f 32ff 	mov.w	r2, #4294967295
 80072a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f103 0208 	add.w	r2, r3, #8
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f103 0208 	add.w	r2, r3, #8
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d103      	bne.n	800734a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	e00c      	b.n	8007364 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3308      	adds	r3, #8
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	e002      	b.n	8007358 <vListInsert+0x2e>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	d2f6      	bcs.n	8007352 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	601a      	str	r2, [r3, #0]
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6892      	ldr	r2, [r2, #8]
 80073b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6852      	ldr	r2, [r2, #4]
 80073bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d103      	bne.n	80073d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	1e5a      	subs	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3b04      	subs	r3, #4
 8007400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3b04      	subs	r3, #4
 800740e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f023 0201 	bic.w	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3b04      	subs	r3, #4
 800741e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007420:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <pxPortInitialiseStack+0x64>)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3b14      	subs	r3, #20
 800742a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b04      	subs	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f06f 0202 	mvn.w	r2, #2
 800743e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3b20      	subs	r3, #32
 8007444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007446:	68fb      	ldr	r3, [r7, #12]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	08007459 	.word	0x08007459

08007458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007462:	4b12      	ldr	r3, [pc, #72]	; (80074ac <prvTaskExitError+0x54>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746a:	d00a      	beq.n	8007482 <prvTaskExitError+0x2a>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	60fb      	str	r3, [r7, #12]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <prvTaskExitError+0x28>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	60bb      	str	r3, [r7, #8]
}
 8007494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007496:	bf00      	nop
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0fc      	beq.n	8007498 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	24000010 	.word	0x24000010

080074b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <pxCurrentTCBConst2>)
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6808      	ldr	r0, [r1, #0]
 80074b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f380 8809 	msr	PSP, r0
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8811 	msr	BASEPRI, r0
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst2>:
 80074d0:	24004684 	.word	0x24004684
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074d8:	4808      	ldr	r0, [pc, #32]	; (80074fc <prvPortStartFirstTask+0x24>)
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f380 8808 	msr	MSP, r0
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8814 	msr	CONTROL, r0
 80074ea:	b662      	cpsie	i
 80074ec:	b661      	cpsie	f
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	df00      	svc	0
 80074f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074fa:	bf00      	nop
 80074fc:	e000ed08 	.word	0xe000ed08

08007500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007506:	4b46      	ldr	r3, [pc, #280]	; (8007620 <xPortStartScheduler+0x120>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a46      	ldr	r2, [pc, #280]	; (8007624 <xPortStartScheduler+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10a      	bne.n	8007526 <xPortStartScheduler+0x26>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007526:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <xPortStartScheduler+0x120>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a3f      	ldr	r2, [pc, #252]	; (8007628 <xPortStartScheduler+0x128>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10a      	bne.n	8007546 <xPortStartScheduler+0x46>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	60fb      	str	r3, [r7, #12]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007546:	4b39      	ldr	r3, [pc, #228]	; (800762c <xPortStartScheduler+0x12c>)
 8007548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	22ff      	movs	r2, #255	; 0xff
 8007556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007568:	b2da      	uxtb	r2, r3
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <xPortStartScheduler+0x130>)
 800756c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800756e:	4b31      	ldr	r3, [pc, #196]	; (8007634 <xPortStartScheduler+0x134>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007574:	e009      	b.n	800758a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007576:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <xPortStartScheduler+0x134>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	4a2d      	ldr	r2, [pc, #180]	; (8007634 <xPortStartScheduler+0x134>)
 800757e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	b2db      	uxtb	r3, r3
 8007588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007592:	2b80      	cmp	r3, #128	; 0x80
 8007594:	d0ef      	beq.n	8007576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007596:	4b27      	ldr	r3, [pc, #156]	; (8007634 <xPortStartScheduler+0x134>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1c3 0307 	rsb	r3, r3, #7
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d00a      	beq.n	80075b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	60bb      	str	r3, [r7, #8]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <xPortStartScheduler+0x134>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <xPortStartScheduler+0x134>)
 80075c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075c2:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <xPortStartScheduler+0x134>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ca:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <xPortStartScheduler+0x134>)
 80075cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075d6:	4b18      	ldr	r3, [pc, #96]	; (8007638 <xPortStartScheduler+0x138>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a17      	ldr	r2, [pc, #92]	; (8007638 <xPortStartScheduler+0x138>)
 80075dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <xPortStartScheduler+0x138>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a14      	ldr	r2, [pc, #80]	; (8007638 <xPortStartScheduler+0x138>)
 80075e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075ee:	f000 f8dd 	bl	80077ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <xPortStartScheduler+0x13c>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075f8:	f000 f8fc 	bl	80077f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <xPortStartScheduler+0x140>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <xPortStartScheduler+0x140>)
 8007602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007608:	f7ff ff66 	bl	80074d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800760c:	f001 f9fa 	bl	8008a04 <vTaskSwitchContext>
	prvTaskExitError();
 8007610:	f7ff ff22 	bl	8007458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	e000ed00 	.word	0xe000ed00
 8007624:	410fc271 	.word	0x410fc271
 8007628:	410fc270 	.word	0x410fc270
 800762c:	e000e400 	.word	0xe000e400
 8007630:	2400463c 	.word	0x2400463c
 8007634:	24004640 	.word	0x24004640
 8007638:	e000ed20 	.word	0xe000ed20
 800763c:	24000010 	.word	0x24000010
 8007640:	e000ef34 	.word	0xe000ef34

08007644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	607b      	str	r3, [r7, #4]
}
 800765c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <vPortEnterCritical+0x58>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3301      	adds	r3, #1
 8007664:	4a0d      	ldr	r2, [pc, #52]	; (800769c <vPortEnterCritical+0x58>)
 8007666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <vPortEnterCritical+0x58>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d10f      	bne.n	8007690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <vPortEnterCritical+0x5c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <vPortEnterCritical+0x4c>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	603b      	str	r3, [r7, #0]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <vPortEnterCritical+0x4a>
	}
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	24000010 	.word	0x24000010
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076aa:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <vPortExitCritical+0x50>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <vPortExitCritical+0x24>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	607b      	str	r3, [r7, #4]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <vPortExitCritical+0x50>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <vPortExitCritical+0x50>)
 80076d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076d2:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <vPortExitCritical+0x50>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <vPortExitCritical+0x42>
 80076da:	2300      	movs	r3, #0
 80076dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	24000010 	.word	0x24000010
	...

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f001 f968 	bl	8008a04 <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	24004684 	.word	0x24004684
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007782:	f001 f885 	bl	8008890 <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <xPortSysTickHandler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
}
 800779e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	24000000 	.word	0x24000000
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007802:	bf00      	nop
 8007804:	e000ed88 	.word	0xe000ed88

08007808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800780e:	f3ef 8305 	mrs	r3, IPSR
 8007812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b0f      	cmp	r3, #15
 8007818:	d914      	bls.n	8007844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781a:	4a17      	ldr	r2, [pc, #92]	; (8007878 <vPortValidateInterruptPriority+0x70>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <vPortValidateInterruptPriority+0x74>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	7afa      	ldrb	r2, [r7, #11]
 800782a:	429a      	cmp	r2, r3
 800782c:	d20a      	bcs.n	8007844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007844:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <vPortValidateInterruptPriority+0x78>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800784c:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <vPortValidateInterruptPriority+0x7c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d90a      	bls.n	800786a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	603b      	str	r3, [r7, #0]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <vPortValidateInterruptPriority+0x60>
	}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	e000e3f0 	.word	0xe000e3f0
 800787c:	2400463c 	.word	0x2400463c
 8007880:	e000ed0c 	.word	0xe000ed0c
 8007884:	24004640 	.word	0x24004640

08007888 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60bb      	str	r3, [r7, #8]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078b2:	f7ff fec7 	bl	8007644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078be:	68f9      	ldr	r1, [r7, #12]
 80078c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078c2:	fb01 f303 	mul.w	r3, r1, r3
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	3b01      	subs	r3, #1
 80078e4:	68f9      	ldr	r1, [r7, #12]
 80078e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078e8:	fb01 f303 	mul.w	r3, r1, r3
 80078ec:	441a      	add	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	22ff      	movs	r2, #255	; 0xff
 80078f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	22ff      	movs	r2, #255	; 0xff
 80078fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d114      	bne.n	8007932 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01a      	beq.n	8007946 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3310      	adds	r3, #16
 8007914:	4618      	mov	r0, r3
 8007916:	f001 f929 	bl	8008b6c <xTaskRemoveFromEventList>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d012      	beq.n	8007946 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <xQueueGenericReset+0xcc>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	e009      	b.n	8007946 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3310      	adds	r3, #16
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff fca6 	bl	8007288 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3324      	adds	r3, #36	; 0x24
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fca1 	bl	8007288 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007946:	f7ff fead 	bl	80076a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800794a:	2301      	movs	r3, #1
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	e000ed04 	.word	0xe000ed04

08007958 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08e      	sub	sp, #56	; 0x38
 800795c:	af02      	add	r7, sp, #8
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <xQueueGenericCreateStatic+0x52>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <xQueueGenericCreateStatic+0x56>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <xQueueGenericCreateStatic+0x58>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	623b      	str	r3, [r7, #32]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <xQueueGenericCreateStatic+0x7e>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <xQueueGenericCreateStatic+0x82>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <xQueueGenericCreateStatic+0x84>
 80079da:	2300      	movs	r3, #0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	61fb      	str	r3, [r7, #28]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079f6:	2350      	movs	r3, #80	; 0x50
 80079f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b50      	cmp	r3, #80	; 0x50
 80079fe:	d00a      	beq.n	8007a16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	61bb      	str	r3, [r7, #24]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4613      	mov	r3, r2
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f805 	bl	8007a48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3730      	adds	r7, #48	; 0x30
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d103      	bne.n	8007a64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a76:	2101      	movs	r1, #1
 8007a78:	69b8      	ldr	r0, [r7, #24]
 8007a7a:	f7ff ff05 	bl	8007888 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	78fa      	ldrb	r2, [r7, #3]
 8007a82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08e      	sub	sp, #56	; 0x38
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <xQueueGenericSend+0x32>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d103      	bne.n	8007ad0 <xQueueGenericSend+0x40>
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <xQueueGenericSend+0x44>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e000      	b.n	8007ad6 <xQueueGenericSend+0x46>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <xQueueGenericSend+0x60>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d103      	bne.n	8007afe <xQueueGenericSend+0x6e>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <xQueueGenericSend+0x72>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <xQueueGenericSend+0x74>
 8007b02:	2300      	movs	r3, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <xQueueGenericSend+0x8e>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	623b      	str	r3, [r7, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b1e:	f001 f9e7 	bl	8008ef0 <xTaskGetSchedulerState>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d102      	bne.n	8007b2e <xQueueGenericSend+0x9e>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <xQueueGenericSend+0xa2>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <xQueueGenericSend+0xa4>
 8007b32:	2300      	movs	r3, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xQueueGenericSend+0xbe>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	61fb      	str	r3, [r7, #28]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b4e:	f7ff fd79 	bl	8007644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d302      	bcc.n	8007b64 <xQueueGenericSend+0xd4>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d129      	bne.n	8007bb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b6a:	f000 fa0b 	bl	8007f84 <prvCopyDataToQueue>
 8007b6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d010      	beq.n	8007b9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	3324      	adds	r3, #36	; 0x24
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fff5 	bl	8008b6c <xTaskRemoveFromEventList>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d013      	beq.n	8007bb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b88:	4b3f      	ldr	r3, [pc, #252]	; (8007c88 <xQueueGenericSend+0x1f8>)
 8007b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	e00a      	b.n	8007bb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d007      	beq.n	8007bb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ba0:	4b39      	ldr	r3, [pc, #228]	; (8007c88 <xQueueGenericSend+0x1f8>)
 8007ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bb0:	f7ff fd78 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e063      	b.n	8007c80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d103      	bne.n	8007bc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bbe:	f7ff fd71 	bl	80076a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e05c      	b.n	8007c80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d106      	bne.n	8007bda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 f82f 	bl	8008c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bda:	f7ff fd63 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bde:	f000 fd9b 	bl	8008718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007be2:	f7ff fd2f 	bl	8007644 <vPortEnterCritical>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bec:	b25b      	sxtb	r3, r3
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf2:	d103      	bne.n	8007bfc <xQueueGenericSend+0x16c>
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c02:	b25b      	sxtb	r3, r3
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d103      	bne.n	8007c12 <xQueueGenericSend+0x182>
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c12:	f7ff fd47 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c16:	1d3a      	adds	r2, r7, #4
 8007c18:	f107 0314 	add.w	r3, r7, #20
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 f81e 	bl	8008c60 <xTaskCheckForTimeOut>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d124      	bne.n	8007c74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c2c:	f000 faa2 	bl	8008174 <prvIsQueueFull>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d018      	beq.n	8007c68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	3310      	adds	r3, #16
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 ff44 	bl	8008acc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c46:	f000 fa2d 	bl	80080a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c4a:	f000 fd73 	bl	8008734 <xTaskResumeAll>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f47f af7c 	bne.w	8007b4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <xQueueGenericSend+0x1f8>)
 8007c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	e772      	b.n	8007b4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c6a:	f000 fa1b 	bl	80080a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c6e:	f000 fd61 	bl	8008734 <xTaskResumeAll>
 8007c72:	e76c      	b.n	8007b4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c76:	f000 fa15 	bl	80080a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c7a:	f000 fd5b 	bl	8008734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3738      	adds	r7, #56	; 0x38
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b090      	sub	sp, #64	; 0x40
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d103      	bne.n	8007cc8 <xQueueGenericSendFromISR+0x3c>
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <xQueueGenericSendFromISR+0x40>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e000      	b.n	8007cce <xQueueGenericSendFromISR+0x42>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d103      	bne.n	8007cf6 <xQueueGenericSendFromISR+0x6a>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <xQueueGenericSendFromISR+0x6e>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <xQueueGenericSendFromISR+0x70>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	623b      	str	r3, [r7, #32]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d16:	f7ff fd77 	bl	8007808 <vPortValidateInterruptPriority>
	__asm volatile
 8007d1a:	f3ef 8211 	mrs	r2, BASEPRI
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	61fa      	str	r2, [r7, #28]
 8007d30:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007d32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <xQueueGenericSendFromISR+0xbc>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d12f      	bne.n	8007da8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d5e:	f000 f911 	bl	8007f84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d112      	bne.n	8007d92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d016      	beq.n	8007da2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	3324      	adds	r3, #36	; 0x24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fef7 	bl	8008b6c <xTaskRemoveFromEventList>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00e      	beq.n	8007da2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	e007      	b.n	8007da2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d96:	3301      	adds	r3, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	b25a      	sxtb	r2, r3
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007da2:	2301      	movs	r3, #1
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007da6:	e001      	b.n	8007dac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f383 8811 	msr	BASEPRI, r3
}
 8007db6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3740      	adds	r7, #64	; 0x40
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08c      	sub	sp, #48	; 0x30
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <xQueueReceive+0x30>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	623b      	str	r3, [r7, #32]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d103      	bne.n	8007e02 <xQueueReceive+0x3e>
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <xQueueReceive+0x42>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <xQueueReceive+0x44>
 8007e06:	2300      	movs	r3, #0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <xQueueReceive+0x5e>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	61fb      	str	r3, [r7, #28]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e22:	f001 f865 	bl	8008ef0 <xTaskGetSchedulerState>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <xQueueReceive+0x6e>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <xQueueReceive+0x72>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e000      	b.n	8007e38 <xQueueReceive+0x74>
 8007e36:	2300      	movs	r3, #0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <xQueueReceive+0x8e>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	61bb      	str	r3, [r7, #24]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e52:	f7ff fbf7 	bl	8007644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d01f      	beq.n	8007ea2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e66:	f000 f8f7 	bl	8008058 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	1e5a      	subs	r2, r3, #1
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00f      	beq.n	8007e9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	3310      	adds	r3, #16
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fe74 	bl	8008b6c <xTaskRemoveFromEventList>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d007      	beq.n	8007e9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e8a:	4b3d      	ldr	r3, [pc, #244]	; (8007f80 <xQueueReceive+0x1bc>)
 8007e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e9a:	f7ff fc03 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e069      	b.n	8007f76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ea8:	f7ff fbfc 	bl	80076a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e062      	b.n	8007f76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d106      	bne.n	8007ec4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 feba 	bl	8008c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ec4:	f7ff fbee 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ec8:	f000 fc26 	bl	8008718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ecc:	f7ff fbba 	bl	8007644 <vPortEnterCritical>
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ed6:	b25b      	sxtb	r3, r3
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007edc:	d103      	bne.n	8007ee6 <xQueueReceive+0x122>
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eec:	b25b      	sxtb	r3, r3
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d103      	bne.n	8007efc <xQueueReceive+0x138>
 8007ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007efc:	f7ff fbd2 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f00:	1d3a      	adds	r2, r7, #4
 8007f02:	f107 0310 	add.w	r3, r7, #16
 8007f06:	4611      	mov	r1, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fea9 	bl	8008c60 <xTaskCheckForTimeOut>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d123      	bne.n	8007f5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f16:	f000 f917 	bl	8008148 <prvIsQueueEmpty>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d017      	beq.n	8007f50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	3324      	adds	r3, #36	; 0x24
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fdcf 	bl	8008acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f30:	f000 f8b8 	bl	80080a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f34:	f000 fbfe 	bl	8008734 <xTaskResumeAll>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d189      	bne.n	8007e52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f3e:	4b10      	ldr	r3, [pc, #64]	; (8007f80 <xQueueReceive+0x1bc>)
 8007f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	e780      	b.n	8007e52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f52:	f000 f8a7 	bl	80080a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f56:	f000 fbed 	bl	8008734 <xTaskResumeAll>
 8007f5a:	e77a      	b.n	8007e52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5e:	f000 f8a1 	bl	80080a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f62:	f000 fbe7 	bl	8008734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f68:	f000 f8ee 	bl	8008148 <prvIsQueueEmpty>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f43f af6f 	beq.w	8007e52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3730      	adds	r7, #48	; 0x30
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10d      	bne.n	8007fbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d14d      	bne.n	8008046 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 ffbc 	bl	8008f2c <xTaskPriorityDisinherit>
 8007fb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	609a      	str	r2, [r3, #8]
 8007fbc:	e043      	b.n	8008046 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d119      	bne.n	8007ff8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6858      	ldr	r0, [r3, #4]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	461a      	mov	r2, r3
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	f001 fbe8 	bl	80097a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	441a      	add	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d32b      	bcc.n	8008046 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	605a      	str	r2, [r3, #4]
 8007ff6:	e026      	b.n	8008046 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68d8      	ldr	r0, [r3, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008000:	461a      	mov	r2, r3
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	f001 fbce 	bl	80097a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	425b      	negs	r3, r3
 8008012:	441a      	add	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d207      	bcs.n	8008034 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	425b      	negs	r3, r3
 800802e:	441a      	add	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d105      	bne.n	8008046 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3b01      	subs	r3, #1
 8008044:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800804e:	697b      	ldr	r3, [r7, #20]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	2b00      	cmp	r3, #0
 8008068:	d018      	beq.n	800809c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	441a      	add	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	d303      	bcc.n	800808c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68d9      	ldr	r1, [r3, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	461a      	mov	r2, r3
 8008096:	6838      	ldr	r0, [r7, #0]
 8008098:	f001 fb84 	bl	80097a4 <memcpy>
	}
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080ac:	f7ff faca 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080b8:	e011      	b.n	80080de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d012      	beq.n	80080e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3324      	adds	r3, #36	; 0x24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fd50 	bl	8008b6c <xTaskRemoveFromEventList>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080d2:	f000 fe27 	bl	8008d24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	3b01      	subs	r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	dce9      	bgt.n	80080ba <prvUnlockQueue+0x16>
 80080e6:	e000      	b.n	80080ea <prvUnlockQueue+0x46>
					break;
 80080e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	22ff      	movs	r2, #255	; 0xff
 80080ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080f2:	f7ff fad7 	bl	80076a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080f6:	f7ff faa5 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008100:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008102:	e011      	b.n	8008128 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d012      	beq.n	8008132 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3310      	adds	r3, #16
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fd2b 	bl	8008b6c <xTaskRemoveFromEventList>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800811c:	f000 fe02 	bl	8008d24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	3b01      	subs	r3, #1
 8008124:	b2db      	uxtb	r3, r3
 8008126:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dce9      	bgt.n	8008104 <prvUnlockQueue+0x60>
 8008130:	e000      	b.n	8008134 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008132:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	22ff      	movs	r2, #255	; 0xff
 8008138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800813c:	f7ff fab2 	bl	80076a4 <vPortExitCritical>
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008150:	f7ff fa78 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	e001      	b.n	8008166 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008166:	f7ff fa9d 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 800816a:	68fb      	ldr	r3, [r7, #12]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800817c:	f7ff fa62 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008188:	429a      	cmp	r2, r3
 800818a:	d102      	bne.n	8008192 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e001      	b.n	8008196 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008196:	f7ff fa85 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 800819a:	68fb      	ldr	r3, [r7, #12]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	e014      	b.n	80081de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081b4:	4a0f      	ldr	r2, [pc, #60]	; (80081f4 <vQueueAddToRegistry+0x50>)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10b      	bne.n	80081d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081c0:	490c      	ldr	r1, [pc, #48]	; (80081f4 <vQueueAddToRegistry+0x50>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081ca:	4a0a      	ldr	r2, [pc, #40]	; (80081f4 <vQueueAddToRegistry+0x50>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	4413      	add	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081d6:	e006      	b.n	80081e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b07      	cmp	r3, #7
 80081e2:	d9e7      	bls.n	80081b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	24004644 	.word	0x24004644

080081f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008208:	f7ff fa1c 	bl	8007644 <vPortEnterCritical>
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008212:	b25b      	sxtb	r3, r3
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d103      	bne.n	8008222 <vQueueWaitForMessageRestricted+0x2a>
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008228:	b25b      	sxtb	r3, r3
 800822a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822e:	d103      	bne.n	8008238 <vQueueWaitForMessageRestricted+0x40>
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008238:	f7ff fa34 	bl	80076a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	2b00      	cmp	r3, #0
 8008242:	d106      	bne.n	8008252 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	3324      	adds	r3, #36	; 0x24
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	68b9      	ldr	r1, [r7, #8]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fc61 	bl	8008b14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008252:	6978      	ldr	r0, [r7, #20]
 8008254:	f7ff ff26 	bl	80080a4 <prvUnlockQueue>
	}
 8008258:	bf00      	nop
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08e      	sub	sp, #56	; 0x38
 8008264:	af04      	add	r7, sp, #16
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	623b      	str	r3, [r7, #32]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	61fb      	str	r3, [r7, #28]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082a6:	23bc      	movs	r3, #188	; 0xbc
 80082a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2bbc      	cmp	r3, #188	; 0xbc
 80082ae:	d00a      	beq.n	80082c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	61bb      	str	r3, [r7, #24]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01e      	beq.n	800830c <xTaskCreateStatic+0xac>
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01b      	beq.n	800830c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	2202      	movs	r2, #2
 80082e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082e6:	2300      	movs	r3, #0
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	9302      	str	r3, [sp, #8]
 80082ee:	f107 0314 	add.w	r3, r7, #20
 80082f2:	9301      	str	r3, [sp, #4]
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f850 	bl	80083a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008306:	f000 f8f3 	bl	80084f0 <prvAddNewTaskToReadyList>
 800830a:	e001      	b.n	8008310 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800830c:	2300      	movs	r3, #0
 800830e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008310:	697b      	ldr	r3, [r7, #20]
	}
 8008312:	4618      	mov	r0, r3
 8008314:	3728      	adds	r7, #40	; 0x28
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800831a:	b580      	push	{r7, lr}
 800831c:	b08c      	sub	sp, #48	; 0x30
 800831e:	af04      	add	r7, sp, #16
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	603b      	str	r3, [r7, #0]
 8008326:	4613      	mov	r3, r2
 8008328:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe fdc0 	bl	8006eb4 <pvPortMalloc>
 8008334:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800833c:	20bc      	movs	r0, #188	; 0xbc
 800833e:	f7fe fdb9 	bl	8006eb4 <pvPortMalloc>
 8008342:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
 8008350:	e005      	b.n	800835e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008352:	6978      	ldr	r0, [r7, #20]
 8008354:	f7fe fe7a 	bl	800704c <vPortFree>
 8008358:	e001      	b.n	800835e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d017      	beq.n	8008394 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800836c:	88fa      	ldrh	r2, [r7, #6]
 800836e:	2300      	movs	r3, #0
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	9302      	str	r3, [sp, #8]
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 f80e 	bl	80083a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008388:	69f8      	ldr	r0, [r7, #28]
 800838a:	f000 f8b1 	bl	80084f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800838e:	2301      	movs	r3, #1
 8008390:	61bb      	str	r3, [r7, #24]
 8008392:	e002      	b.n	800839a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008394:	f04f 33ff 	mov.w	r3, #4294967295
 8008398:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800839a:	69bb      	ldr	r3, [r7, #24]
	}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	461a      	mov	r2, r3
 80083bc:	21a5      	movs	r1, #165	; 0xa5
 80083be:	f001 f9ff 	bl	80097c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80083cc:	440b      	add	r3, r1
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	617b      	str	r3, [r7, #20]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d01f      	beq.n	8008442 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008402:	2300      	movs	r3, #0
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	e012      	b.n	800842e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	7819      	ldrb	r1, [r3, #0]
 8008410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4413      	add	r3, r2
 8008416:	3334      	adds	r3, #52	; 0x34
 8008418:	460a      	mov	r2, r1
 800841a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4413      	add	r3, r2
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d006      	beq.n	8008436 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	3301      	adds	r3, #1
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	2b0f      	cmp	r3, #15
 8008432:	d9e9      	bls.n	8008408 <prvInitialiseNewTask+0x64>
 8008434:	e000      	b.n	8008438 <prvInitialiseNewTask+0x94>
			{
				break;
 8008436:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008440:	e003      	b.n	800844a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	2b37      	cmp	r3, #55	; 0x37
 800844e:	d901      	bls.n	8008454 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008450:	2337      	movs	r3, #55	; 0x37
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008458:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800845e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	3304      	adds	r3, #4
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe ff2c 	bl	80072c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	3318      	adds	r3, #24
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe ff27 	bl	80072c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	2200      	movs	r2, #0
 800849c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	3354      	adds	r3, #84	; 0x54
 80084a4:	2260      	movs	r2, #96	; 0x60
 80084a6:	2100      	movs	r1, #0
 80084a8:	4618      	mov	r0, r3
 80084aa:	f001 f989 	bl	80097c0 <memset>
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <prvInitialiseNewTask+0x140>)
 80084b2:	659a      	str	r2, [r3, #88]	; 0x58
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	4a0c      	ldr	r2, [pc, #48]	; (80084e8 <prvInitialiseNewTask+0x144>)
 80084b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	4a0b      	ldr	r2, [pc, #44]	; (80084ec <prvInitialiseNewTask+0x148>)
 80084be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	69b8      	ldr	r0, [r7, #24]
 80084c6:	f7fe ff93 	bl	80073f0 <pxPortInitialiseStack>
 80084ca:	4602      	mov	r2, r0
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084dc:	bf00      	nop
 80084de:	3720      	adds	r7, #32
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	0800a278 	.word	0x0800a278
 80084e8:	0800a298 	.word	0x0800a298
 80084ec:	0800a258 	.word	0x0800a258

080084f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084f8:	f7ff f8a4 	bl	8007644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084fc:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <prvAddNewTaskToReadyList+0xc4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3301      	adds	r3, #1
 8008502:	4a2c      	ldr	r2, [pc, #176]	; (80085b4 <prvAddNewTaskToReadyList+0xc4>)
 8008504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008506:	4b2c      	ldr	r3, [pc, #176]	; (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800850e:	4a2a      	ldr	r2, [pc, #168]	; (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008514:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <prvAddNewTaskToReadyList+0xc4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d110      	bne.n	800853e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800851c:	f000 fc26 	bl	8008d6c <prvInitialiseTaskLists>
 8008520:	e00d      	b.n	800853e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008522:	4b26      	ldr	r3, [pc, #152]	; (80085bc <prvAddNewTaskToReadyList+0xcc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800852a:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	429a      	cmp	r2, r3
 8008536:	d802      	bhi.n	800853e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008538:	4a1f      	ldr	r2, [pc, #124]	; (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800853e:	4b20      	ldr	r3, [pc, #128]	; (80085c0 <prvAddNewTaskToReadyList+0xd0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3301      	adds	r3, #1
 8008544:	4a1e      	ldr	r2, [pc, #120]	; (80085c0 <prvAddNewTaskToReadyList+0xd0>)
 8008546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008548:	4b1d      	ldr	r3, [pc, #116]	; (80085c0 <prvAddNewTaskToReadyList+0xd0>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008554:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <prvAddNewTaskToReadyList+0xd4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d903      	bls.n	8008564 <prvAddNewTaskToReadyList+0x74>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4a18      	ldr	r2, [pc, #96]	; (80085c4 <prvAddNewTaskToReadyList+0xd4>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4a15      	ldr	r2, [pc, #84]	; (80085c8 <prvAddNewTaskToReadyList+0xd8>)
 8008572:	441a      	add	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3304      	adds	r3, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7fe feb1 	bl	80072e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008580:	f7ff f890 	bl	80076a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008584:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <prvAddNewTaskToReadyList+0xcc>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00e      	beq.n	80085aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800858c:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <prvAddNewTaskToReadyList+0xc8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	429a      	cmp	r2, r3
 8008598:	d207      	bcs.n	80085aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800859a:	4b0c      	ldr	r3, [pc, #48]	; (80085cc <prvAddNewTaskToReadyList+0xdc>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085aa:	bf00      	nop
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	24004b58 	.word	0x24004b58
 80085b8:	24004684 	.word	0x24004684
 80085bc:	24004b64 	.word	0x24004b64
 80085c0:	24004b74 	.word	0x24004b74
 80085c4:	24004b60 	.word	0x24004b60
 80085c8:	24004688 	.word	0x24004688
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d017      	beq.n	8008612 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085e2:	4b13      	ldr	r3, [pc, #76]	; (8008630 <vTaskDelay+0x60>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <vTaskDelay+0x30>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60bb      	str	r3, [r7, #8]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008600:	f000 f88a 	bl	8008718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008604:	2100      	movs	r1, #0
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fcfe 	bl	8009008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800860c:	f000 f892 	bl	8008734 <xTaskResumeAll>
 8008610:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d107      	bne.n	8008628 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008618:	4b06      	ldr	r3, [pc, #24]	; (8008634 <vTaskDelay+0x64>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	24004b80 	.word	0x24004b80
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08a      	sub	sp, #40	; 0x28
 800863c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008646:	463a      	mov	r2, r7
 8008648:	1d39      	adds	r1, r7, #4
 800864a:	f107 0308 	add.w	r3, r7, #8
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fbfc 	bl	8006e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	9202      	str	r2, [sp, #8]
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	2300      	movs	r3, #0
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	460a      	mov	r2, r1
 8008666:	4924      	ldr	r1, [pc, #144]	; (80086f8 <vTaskStartScheduler+0xc0>)
 8008668:	4824      	ldr	r0, [pc, #144]	; (80086fc <vTaskStartScheduler+0xc4>)
 800866a:	f7ff fdf9 	bl	8008260 <xTaskCreateStatic>
 800866e:	4603      	mov	r3, r0
 8008670:	4a23      	ldr	r2, [pc, #140]	; (8008700 <vTaskStartScheduler+0xc8>)
 8008672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008674:	4b22      	ldr	r3, [pc, #136]	; (8008700 <vTaskStartScheduler+0xc8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800867c:	2301      	movs	r3, #1
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e001      	b.n	8008686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d102      	bne.n	8008692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800868c:	f000 fd10 	bl	80090b0 <xTimerCreateTimerTask>
 8008690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d11b      	bne.n	80086d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	613b      	str	r3, [r7, #16]
}
 80086aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086ac:	4b15      	ldr	r3, [pc, #84]	; (8008704 <vTaskStartScheduler+0xcc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3354      	adds	r3, #84	; 0x54
 80086b2:	4a15      	ldr	r2, [pc, #84]	; (8008708 <vTaskStartScheduler+0xd0>)
 80086b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086b6:	4b15      	ldr	r3, [pc, #84]	; (800870c <vTaskStartScheduler+0xd4>)
 80086b8:	f04f 32ff 	mov.w	r2, #4294967295
 80086bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <vTaskStartScheduler+0xd8>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086c4:	4b13      	ldr	r3, [pc, #76]	; (8008714 <vTaskStartScheduler+0xdc>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086ca:	f7fe ff19 	bl	8007500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086ce:	e00e      	b.n	80086ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d6:	d10a      	bne.n	80086ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	60fb      	str	r3, [r7, #12]
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <vTaskStartScheduler+0xb4>
}
 80086ee:	bf00      	nop
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	0800a1c0 	.word	0x0800a1c0
 80086fc:	08008d3d 	.word	0x08008d3d
 8008700:	24004b7c 	.word	0x24004b7c
 8008704:	24004684 	.word	0x24004684
 8008708:	24000014 	.word	0x24000014
 800870c:	24004b78 	.word	0x24004b78
 8008710:	24004b64 	.word	0x24004b64
 8008714:	24004b5c 	.word	0x24004b5c

08008718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800871c:	4b04      	ldr	r3, [pc, #16]	; (8008730 <vTaskSuspendAll+0x18>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	4a03      	ldr	r2, [pc, #12]	; (8008730 <vTaskSuspendAll+0x18>)
 8008724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008726:	bf00      	nop
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	24004b80 	.word	0x24004b80

08008734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008742:	4b42      	ldr	r3, [pc, #264]	; (800884c <xTaskResumeAll+0x118>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <xTaskResumeAll+0x2c>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	603b      	str	r3, [r7, #0]
}
 800875c:	bf00      	nop
 800875e:	e7fe      	b.n	800875e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008760:	f7fe ff70 	bl	8007644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008764:	4b39      	ldr	r3, [pc, #228]	; (800884c <xTaskResumeAll+0x118>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3b01      	subs	r3, #1
 800876a:	4a38      	ldr	r2, [pc, #224]	; (800884c <xTaskResumeAll+0x118>)
 800876c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800876e:	4b37      	ldr	r3, [pc, #220]	; (800884c <xTaskResumeAll+0x118>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d162      	bne.n	800883c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008776:	4b36      	ldr	r3, [pc, #216]	; (8008850 <xTaskResumeAll+0x11c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d05e      	beq.n	800883c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800877e:	e02f      	b.n	80087e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008780:	4b34      	ldr	r3, [pc, #208]	; (8008854 <xTaskResumeAll+0x120>)
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3318      	adds	r3, #24
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe fe05 	bl	800739c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3304      	adds	r3, #4
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fe00 	bl	800739c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	4b2d      	ldr	r3, [pc, #180]	; (8008858 <xTaskResumeAll+0x124>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d903      	bls.n	80087b0 <xTaskResumeAll+0x7c>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4a2a      	ldr	r2, [pc, #168]	; (8008858 <xTaskResumeAll+0x124>)
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	4613      	mov	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4a27      	ldr	r2, [pc, #156]	; (800885c <xTaskResumeAll+0x128>)
 80087be:	441a      	add	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3304      	adds	r3, #4
 80087c4:	4619      	mov	r1, r3
 80087c6:	4610      	mov	r0, r2
 80087c8:	f7fe fd8b 	bl	80072e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	4b23      	ldr	r3, [pc, #140]	; (8008860 <xTaskResumeAll+0x12c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d302      	bcc.n	80087e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80087da:	4b22      	ldr	r3, [pc, #136]	; (8008864 <xTaskResumeAll+0x130>)
 80087dc:	2201      	movs	r2, #1
 80087de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087e0:	4b1c      	ldr	r3, [pc, #112]	; (8008854 <xTaskResumeAll+0x120>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1cb      	bne.n	8008780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087ee:	f000 fb5f 	bl	8008eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087f2:	4b1d      	ldr	r3, [pc, #116]	; (8008868 <xTaskResumeAll+0x134>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d010      	beq.n	8008820 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087fe:	f000 f847 	bl	8008890 <xTaskIncrementTick>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008808:	4b16      	ldr	r3, [pc, #88]	; (8008864 <xTaskResumeAll+0x130>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3b01      	subs	r3, #1
 8008812:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f1      	bne.n	80087fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800881a:	4b13      	ldr	r3, [pc, #76]	; (8008868 <xTaskResumeAll+0x134>)
 800881c:	2200      	movs	r2, #0
 800881e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008820:	4b10      	ldr	r3, [pc, #64]	; (8008864 <xTaskResumeAll+0x130>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d009      	beq.n	800883c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800882c:	4b0f      	ldr	r3, [pc, #60]	; (800886c <xTaskResumeAll+0x138>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800883c:	f7fe ff32 	bl	80076a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008840:	68bb      	ldr	r3, [r7, #8]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	24004b80 	.word	0x24004b80
 8008850:	24004b58 	.word	0x24004b58
 8008854:	24004b18 	.word	0x24004b18
 8008858:	24004b60 	.word	0x24004b60
 800885c:	24004688 	.word	0x24004688
 8008860:	24004684 	.word	0x24004684
 8008864:	24004b6c 	.word	0x24004b6c
 8008868:	24004b68 	.word	0x24004b68
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008876:	4b05      	ldr	r3, [pc, #20]	; (800888c <xTaskGetTickCount+0x1c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800887c:	687b      	ldr	r3, [r7, #4]
}
 800887e:	4618      	mov	r0, r3
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	24004b5c 	.word	0x24004b5c

08008890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800889a:	4b4f      	ldr	r3, [pc, #316]	; (80089d8 <xTaskIncrementTick+0x148>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f040 808f 	bne.w	80089c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088a4:	4b4d      	ldr	r3, [pc, #308]	; (80089dc <xTaskIncrementTick+0x14c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088ac:	4a4b      	ldr	r2, [pc, #300]	; (80089dc <xTaskIncrementTick+0x14c>)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d120      	bne.n	80088fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088b8:	4b49      	ldr	r3, [pc, #292]	; (80089e0 <xTaskIncrementTick+0x150>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	603b      	str	r3, [r7, #0]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <xTaskIncrementTick+0x46>
 80088d8:	4b41      	ldr	r3, [pc, #260]	; (80089e0 <xTaskIncrementTick+0x150>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	4b41      	ldr	r3, [pc, #260]	; (80089e4 <xTaskIncrementTick+0x154>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a3f      	ldr	r2, [pc, #252]	; (80089e0 <xTaskIncrementTick+0x150>)
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	4a3f      	ldr	r2, [pc, #252]	; (80089e4 <xTaskIncrementTick+0x154>)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	4b3e      	ldr	r3, [pc, #248]	; (80089e8 <xTaskIncrementTick+0x158>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	4a3d      	ldr	r2, [pc, #244]	; (80089e8 <xTaskIncrementTick+0x158>)
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	f000 fadb 	bl	8008eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088fa:	4b3c      	ldr	r3, [pc, #240]	; (80089ec <xTaskIncrementTick+0x15c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	429a      	cmp	r2, r3
 8008902:	d349      	bcc.n	8008998 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008904:	4b36      	ldr	r3, [pc, #216]	; (80089e0 <xTaskIncrementTick+0x150>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800890e:	4b37      	ldr	r3, [pc, #220]	; (80089ec <xTaskIncrementTick+0x15c>)
 8008910:	f04f 32ff 	mov.w	r2, #4294967295
 8008914:	601a      	str	r2, [r3, #0]
					break;
 8008916:	e03f      	b.n	8008998 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008918:	4b31      	ldr	r3, [pc, #196]	; (80089e0 <xTaskIncrementTick+0x150>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	429a      	cmp	r2, r3
 800892e:	d203      	bcs.n	8008938 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008930:	4a2e      	ldr	r2, [pc, #184]	; (80089ec <xTaskIncrementTick+0x15c>)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008936:	e02f      	b.n	8008998 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	3304      	adds	r3, #4
 800893c:	4618      	mov	r0, r3
 800893e:	f7fe fd2d 	bl	800739c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008946:	2b00      	cmp	r3, #0
 8008948:	d004      	beq.n	8008954 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	3318      	adds	r3, #24
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fd24 	bl	800739c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <xTaskIncrementTick+0x160>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d903      	bls.n	8008968 <xTaskIncrementTick+0xd8>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	4a22      	ldr	r2, [pc, #136]	; (80089f0 <xTaskIncrementTick+0x160>)
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4a1f      	ldr	r2, [pc, #124]	; (80089f4 <xTaskIncrementTick+0x164>)
 8008976:	441a      	add	r2, r3
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	3304      	adds	r3, #4
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f7fe fcaf 	bl	80072e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <xTaskIncrementTick+0x168>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	429a      	cmp	r2, r3
 8008990:	d3b8      	bcc.n	8008904 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008992:	2301      	movs	r3, #1
 8008994:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008996:	e7b5      	b.n	8008904 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008998:	4b17      	ldr	r3, [pc, #92]	; (80089f8 <xTaskIncrementTick+0x168>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899e:	4915      	ldr	r1, [pc, #84]	; (80089f4 <xTaskIncrementTick+0x164>)
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d901      	bls.n	80089b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80089b0:	2301      	movs	r3, #1
 80089b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089b4:	4b11      	ldr	r3, [pc, #68]	; (80089fc <xTaskIncrementTick+0x16c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d007      	beq.n	80089cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80089bc:	2301      	movs	r3, #1
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	e004      	b.n	80089cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089c2:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <xTaskIncrementTick+0x170>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3301      	adds	r3, #1
 80089c8:	4a0d      	ldr	r2, [pc, #52]	; (8008a00 <xTaskIncrementTick+0x170>)
 80089ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089cc:	697b      	ldr	r3, [r7, #20]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	24004b80 	.word	0x24004b80
 80089dc:	24004b5c 	.word	0x24004b5c
 80089e0:	24004b10 	.word	0x24004b10
 80089e4:	24004b14 	.word	0x24004b14
 80089e8:	24004b70 	.word	0x24004b70
 80089ec:	24004b78 	.word	0x24004b78
 80089f0:	24004b60 	.word	0x24004b60
 80089f4:	24004688 	.word	0x24004688
 80089f8:	24004684 	.word	0x24004684
 80089fc:	24004b6c 	.word	0x24004b6c
 8008a00:	24004b68 	.word	0x24004b68

08008a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a0a:	4b2a      	ldr	r3, [pc, #168]	; (8008ab4 <vTaskSwitchContext+0xb0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a12:	4b29      	ldr	r3, [pc, #164]	; (8008ab8 <vTaskSwitchContext+0xb4>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a18:	e046      	b.n	8008aa8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a1a:	4b27      	ldr	r3, [pc, #156]	; (8008ab8 <vTaskSwitchContext+0xb4>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a20:	4b26      	ldr	r3, [pc, #152]	; (8008abc <vTaskSwitchContext+0xb8>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60fb      	str	r3, [r7, #12]
 8008a26:	e010      	b.n	8008a4a <vTaskSwitchContext+0x46>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <vTaskSwitchContext+0x40>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	607b      	str	r3, [r7, #4]
}
 8008a40:	bf00      	nop
 8008a42:	e7fe      	b.n	8008a42 <vTaskSwitchContext+0x3e>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	491d      	ldr	r1, [pc, #116]	; (8008ac0 <vTaskSwitchContext+0xbc>)
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	440b      	add	r3, r1
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0e4      	beq.n	8008a28 <vTaskSwitchContext+0x24>
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4613      	mov	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <vTaskSwitchContext+0xbc>)
 8008a6a:	4413      	add	r3, r2
 8008a6c:	60bb      	str	r3, [r7, #8]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	605a      	str	r2, [r3, #4]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d104      	bne.n	8008a8e <vTaskSwitchContext+0x8a>
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	605a      	str	r2, [r3, #4]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	4a0b      	ldr	r2, [pc, #44]	; (8008ac4 <vTaskSwitchContext+0xc0>)
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	4a08      	ldr	r2, [pc, #32]	; (8008abc <vTaskSwitchContext+0xb8>)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <vTaskSwitchContext+0xc0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3354      	adds	r3, #84	; 0x54
 8008aa4:	4a08      	ldr	r2, [pc, #32]	; (8008ac8 <vTaskSwitchContext+0xc4>)
 8008aa6:	6013      	str	r3, [r2, #0]
}
 8008aa8:	bf00      	nop
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	24004b80 	.word	0x24004b80
 8008ab8:	24004b6c 	.word	0x24004b6c
 8008abc:	24004b60 	.word	0x24004b60
 8008ac0:	24004688 	.word	0x24004688
 8008ac4:	24004684 	.word	0x24004684
 8008ac8:	24000014 	.word	0x24000014

08008acc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	60fb      	str	r3, [r7, #12]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008af2:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <vTaskPlaceOnEventList+0x44>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3318      	adds	r3, #24
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7fe fc15 	bl	800732a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b00:	2101      	movs	r1, #1
 8008b02:	6838      	ldr	r0, [r7, #0]
 8008b04:	f000 fa80 	bl	8009008 <prvAddCurrentTaskToDelayedList>
}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	24004684 	.word	0x24004684

08008b14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10a      	bne.n	8008b3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	617b      	str	r3, [r7, #20]
}
 8008b38:	bf00      	nop
 8008b3a:	e7fe      	b.n	8008b3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3318      	adds	r3, #24
 8008b42:	4619      	mov	r1, r3
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f7fe fbcc 	bl	80072e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
 8008b54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	68b8      	ldr	r0, [r7, #8]
 8008b5a:	f000 fa55 	bl	8009008 <prvAddCurrentTaskToDelayedList>
	}
 8008b5e:	bf00      	nop
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	24004684 	.word	0x24004684

08008b6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	60fb      	str	r3, [r7, #12]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3318      	adds	r3, #24
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fbfd 	bl	800739c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba2:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <xTaskRemoveFromEventList+0xb0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d11d      	bne.n	8008be6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fbf4 	bl	800739c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	4b19      	ldr	r3, [pc, #100]	; (8008c20 <xTaskRemoveFromEventList+0xb4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d903      	bls.n	8008bc8 <xTaskRemoveFromEventList+0x5c>
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <xTaskRemoveFromEventList+0xb4>)
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4a13      	ldr	r2, [pc, #76]	; (8008c24 <xTaskRemoveFromEventList+0xb8>)
 8008bd6:	441a      	add	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7fe fb7f 	bl	80072e2 <vListInsertEnd>
 8008be4:	e005      	b.n	8008bf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	3318      	adds	r3, #24
 8008bea:	4619      	mov	r1, r3
 8008bec:	480e      	ldr	r0, [pc, #56]	; (8008c28 <xTaskRemoveFromEventList+0xbc>)
 8008bee:	f7fe fb78 	bl	80072e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <xTaskRemoveFromEventList+0xc0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d905      	bls.n	8008c0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c04:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <xTaskRemoveFromEventList+0xc4>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e001      	b.n	8008c10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c10:	697b      	ldr	r3, [r7, #20]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	24004b80 	.word	0x24004b80
 8008c20:	24004b60 	.word	0x24004b60
 8008c24:	24004688 	.word	0x24004688
 8008c28:	24004b18 	.word	0x24004b18
 8008c2c:	24004684 	.word	0x24004684
 8008c30:	24004b6c 	.word	0x24004b6c

08008c34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c3c:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <vTaskInternalSetTimeOutState+0x24>)
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <vTaskInternalSetTimeOutState+0x28>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	605a      	str	r2, [r3, #4]
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	24004b70 	.word	0x24004b70
 8008c5c:	24004b5c 	.word	0x24004b5c

08008c60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10a      	bne.n	8008ca2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	60fb      	str	r3, [r7, #12]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ca2:	f7fe fccf 	bl	8007644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ca6:	4b1d      	ldr	r3, [pc, #116]	; (8008d1c <xTaskCheckForTimeOut+0xbc>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbe:	d102      	bne.n	8008cc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	e023      	b.n	8008d0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	4b15      	ldr	r3, [pc, #84]	; (8008d20 <xTaskCheckForTimeOut+0xc0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d007      	beq.n	8008ce2 <xTaskCheckForTimeOut+0x82>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d302      	bcc.n	8008ce2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	61fb      	str	r3, [r7, #28]
 8008ce0:	e015      	b.n	8008d0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d20b      	bcs.n	8008d04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	1ad2      	subs	r2, r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7ff ff9b 	bl	8008c34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61fb      	str	r3, [r7, #28]
 8008d02:	e004      	b.n	8008d0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d0e:	f7fe fcc9 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 8008d12:	69fb      	ldr	r3, [r7, #28]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	24004b5c 	.word	0x24004b5c
 8008d20:	24004b70 	.word	0x24004b70

08008d24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d28:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <vTaskMissedYield+0x14>)
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]
}
 8008d2e:	bf00      	nop
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	24004b6c 	.word	0x24004b6c

08008d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d44:	f000 f852 	bl	8008dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d48:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <prvIdleTask+0x28>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d9f9      	bls.n	8008d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <prvIdleTask+0x2c>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d60:	e7f0      	b.n	8008d44 <prvIdleTask+0x8>
 8008d62:	bf00      	nop
 8008d64:	24004688 	.word	0x24004688
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d72:	2300      	movs	r3, #0
 8008d74:	607b      	str	r3, [r7, #4]
 8008d76:	e00c      	b.n	8008d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4a12      	ldr	r2, [pc, #72]	; (8008dcc <prvInitialiseTaskLists+0x60>)
 8008d84:	4413      	add	r3, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe fa7e 	bl	8007288 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	607b      	str	r3, [r7, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b37      	cmp	r3, #55	; 0x37
 8008d96:	d9ef      	bls.n	8008d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d98:	480d      	ldr	r0, [pc, #52]	; (8008dd0 <prvInitialiseTaskLists+0x64>)
 8008d9a:	f7fe fa75 	bl	8007288 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d9e:	480d      	ldr	r0, [pc, #52]	; (8008dd4 <prvInitialiseTaskLists+0x68>)
 8008da0:	f7fe fa72 	bl	8007288 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008da4:	480c      	ldr	r0, [pc, #48]	; (8008dd8 <prvInitialiseTaskLists+0x6c>)
 8008da6:	f7fe fa6f 	bl	8007288 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008daa:	480c      	ldr	r0, [pc, #48]	; (8008ddc <prvInitialiseTaskLists+0x70>)
 8008dac:	f7fe fa6c 	bl	8007288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008db0:	480b      	ldr	r0, [pc, #44]	; (8008de0 <prvInitialiseTaskLists+0x74>)
 8008db2:	f7fe fa69 	bl	8007288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008db6:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <prvInitialiseTaskLists+0x78>)
 8008db8:	4a05      	ldr	r2, [pc, #20]	; (8008dd0 <prvInitialiseTaskLists+0x64>)
 8008dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <prvInitialiseTaskLists+0x7c>)
 8008dbe:	4a05      	ldr	r2, [pc, #20]	; (8008dd4 <prvInitialiseTaskLists+0x68>)
 8008dc0:	601a      	str	r2, [r3, #0]
}
 8008dc2:	bf00      	nop
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	24004688 	.word	0x24004688
 8008dd0:	24004ae8 	.word	0x24004ae8
 8008dd4:	24004afc 	.word	0x24004afc
 8008dd8:	24004b18 	.word	0x24004b18
 8008ddc:	24004b2c 	.word	0x24004b2c
 8008de0:	24004b44 	.word	0x24004b44
 8008de4:	24004b10 	.word	0x24004b10
 8008de8:	24004b14 	.word	0x24004b14

08008dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008df2:	e019      	b.n	8008e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008df4:	f7fe fc26 	bl	8007644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df8:	4b10      	ldr	r3, [pc, #64]	; (8008e3c <prvCheckTasksWaitingTermination+0x50>)
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe fac9 	bl	800739c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <prvCheckTasksWaitingTermination+0x54>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	4a0b      	ldr	r2, [pc, #44]	; (8008e40 <prvCheckTasksWaitingTermination+0x54>)
 8008e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e14:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <prvCheckTasksWaitingTermination+0x58>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	4a0a      	ldr	r2, [pc, #40]	; (8008e44 <prvCheckTasksWaitingTermination+0x58>)
 8008e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e1e:	f7fe fc41 	bl	80076a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f810 	bl	8008e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e28:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <prvCheckTasksWaitingTermination+0x58>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e1      	bne.n	8008df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e30:	bf00      	nop
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	24004b2c 	.word	0x24004b2c
 8008e40:	24004b58 	.word	0x24004b58
 8008e44:	24004b40 	.word	0x24004b40

08008e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3354      	adds	r3, #84	; 0x54
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fd5d 	bl	8009914 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d108      	bne.n	8008e76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe f8ef 	bl	800704c <vPortFree>
				vPortFree( pxTCB );
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7fe f8ec 	bl	800704c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e74:	e018      	b.n	8008ea8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d103      	bne.n	8008e88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7fe f8e3 	bl	800704c <vPortFree>
	}
 8008e86:	e00f      	b.n	8008ea8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d00a      	beq.n	8008ea8 <prvDeleteTCB+0x60>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60fb      	str	r3, [r7, #12]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <prvDeleteTCB+0x5e>
	}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <prvResetNextTaskUnblockTime+0x38>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <prvResetNextTaskUnblockTime+0x3c>)
 8008ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ec8:	e008      	b.n	8008edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eca:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <prvResetNextTaskUnblockTime+0x38>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4a04      	ldr	r2, [pc, #16]	; (8008eec <prvResetNextTaskUnblockTime+0x3c>)
 8008eda:	6013      	str	r3, [r2, #0]
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	24004b10 	.word	0x24004b10
 8008eec:	24004b78 	.word	0x24004b78

08008ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <xTaskGetSchedulerState+0x34>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d102      	bne.n	8008f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008efe:	2301      	movs	r3, #1
 8008f00:	607b      	str	r3, [r7, #4]
 8008f02:	e008      	b.n	8008f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f04:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <xTaskGetSchedulerState+0x38>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d102      	bne.n	8008f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	607b      	str	r3, [r7, #4]
 8008f10:	e001      	b.n	8008f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f12:	2300      	movs	r3, #0
 8008f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f16:	687b      	ldr	r3, [r7, #4]
	}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	24004b64 	.word	0x24004b64
 8008f28:	24004b80 	.word	0x24004b80

08008f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d056      	beq.n	8008ff0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f42:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <xTaskPriorityDisinherit+0xd0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d00a      	beq.n	8008f62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	60fb      	str	r3, [r7, #12]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10a      	bne.n	8008f80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	60bb      	str	r3, [r7, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f84:	1e5a      	subs	r2, r3, #1
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d02c      	beq.n	8008ff0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d128      	bne.n	8008ff0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe f9fa 	bl	800739c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc0:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <xTaskPriorityDisinherit+0xd4>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d903      	bls.n	8008fd0 <xTaskPriorityDisinherit+0xa4>
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <xTaskPriorityDisinherit+0xd4>)
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4a09      	ldr	r2, [pc, #36]	; (8009004 <xTaskPriorityDisinherit+0xd8>)
 8008fde:	441a      	add	r2, r3
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f7fe f97b 	bl	80072e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ff0:	697b      	ldr	r3, [r7, #20]
	}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	24004684 	.word	0x24004684
 8009000:	24004b60 	.word	0x24004b60
 8009004:	24004688 	.word	0x24004688

08009008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009012:	4b21      	ldr	r3, [pc, #132]	; (8009098 <prvAddCurrentTaskToDelayedList+0x90>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009018:	4b20      	ldr	r3, [pc, #128]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3304      	adds	r3, #4
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe f9bc 	bl	800739c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902a:	d10a      	bne.n	8009042 <prvAddCurrentTaskToDelayedList+0x3a>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4819      	ldr	r0, [pc, #100]	; (80090a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800903c:	f7fe f951 	bl	80072e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009040:	e026      	b.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4413      	add	r3, r2
 8009048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800904a:	4b14      	ldr	r3, [pc, #80]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	429a      	cmp	r2, r3
 8009058:	d209      	bcs.n	800906e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3304      	adds	r3, #4
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f7fe f95f 	bl	800732a <vListInsert>
}
 800906c:	e010      	b.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800906e:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	4b0a      	ldr	r3, [pc, #40]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3304      	adds	r3, #4
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7fe f955 	bl	800732a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	429a      	cmp	r2, r3
 8009088:	d202      	bcs.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800908a:	4a08      	ldr	r2, [pc, #32]	; (80090ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	24004b5c 	.word	0x24004b5c
 800909c:	24004684 	.word	0x24004684
 80090a0:	24004b44 	.word	0x24004b44
 80090a4:	24004b14 	.word	0x24004b14
 80090a8:	24004b10 	.word	0x24004b10
 80090ac:	24004b78 	.word	0x24004b78

080090b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	; 0x28
 80090b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090ba:	f000 fb07 	bl	80096cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090be:	4b1c      	ldr	r3, [pc, #112]	; (8009130 <xTimerCreateTimerTask+0x80>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d021      	beq.n	800910a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090ce:	1d3a      	adds	r2, r7, #4
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	f107 030c 	add.w	r3, r7, #12
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd fed1 	bl	8006e80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	9202      	str	r2, [sp, #8]
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	2302      	movs	r3, #2
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	460a      	mov	r2, r1
 80090f0:	4910      	ldr	r1, [pc, #64]	; (8009134 <xTimerCreateTimerTask+0x84>)
 80090f2:	4811      	ldr	r0, [pc, #68]	; (8009138 <xTimerCreateTimerTask+0x88>)
 80090f4:	f7ff f8b4 	bl	8008260 <xTaskCreateStatic>
 80090f8:	4603      	mov	r3, r0
 80090fa:	4a10      	ldr	r2, [pc, #64]	; (800913c <xTimerCreateTimerTask+0x8c>)
 80090fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <xTimerCreateTimerTask+0x8c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009106:	2301      	movs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	613b      	str	r3, [r7, #16]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009126:	697b      	ldr	r3, [r7, #20]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	24004bb4 	.word	0x24004bb4
 8009134:	0800a1c8 	.word	0x0800a1c8
 8009138:	08009275 	.word	0x08009275
 800913c:	24004bb8 	.word	0x24004bb8

08009140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	; 0x28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800914e:	2300      	movs	r3, #0
 8009150:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10a      	bne.n	800916e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	623b      	str	r3, [r7, #32]
}
 800916a:	bf00      	nop
 800916c:	e7fe      	b.n	800916c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800916e:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <xTimerGenericCommand+0x98>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d02a      	beq.n	80091cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b05      	cmp	r3, #5
 8009186:	dc18      	bgt.n	80091ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009188:	f7ff feb2 	bl	8008ef0 <xTaskGetSchedulerState>
 800918c:	4603      	mov	r3, r0
 800918e:	2b02      	cmp	r3, #2
 8009190:	d109      	bne.n	80091a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009192:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <xTimerGenericCommand+0x98>)
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	f107 0110 	add.w	r1, r7, #16
 800919a:	2300      	movs	r3, #0
 800919c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919e:	f7fe fc77 	bl	8007a90 <xQueueGenericSend>
 80091a2:	6278      	str	r0, [r7, #36]	; 0x24
 80091a4:	e012      	b.n	80091cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <xTimerGenericCommand+0x98>)
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f107 0110 	add.w	r1, r7, #16
 80091ae:	2300      	movs	r3, #0
 80091b0:	2200      	movs	r2, #0
 80091b2:	f7fe fc6d 	bl	8007a90 <xQueueGenericSend>
 80091b6:	6278      	str	r0, [r7, #36]	; 0x24
 80091b8:	e008      	b.n	80091cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091ba:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <xTimerGenericCommand+0x98>)
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f107 0110 	add.w	r1, r7, #16
 80091c2:	2300      	movs	r3, #0
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	f7fe fd61 	bl	8007c8c <xQueueGenericSendFromISR>
 80091ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3728      	adds	r7, #40	; 0x28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	24004bb4 	.word	0x24004bb4

080091dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e6:	4b22      	ldr	r3, [pc, #136]	; (8009270 <prvProcessExpiredTimer+0x94>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe f8d1 	bl	800739c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d022      	beq.n	800924e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	699a      	ldr	r2, [r3, #24]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	18d1      	adds	r1, r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	6978      	ldr	r0, [r7, #20]
 8009216:	f000 f8d1 	bl	80093bc <prvInsertTimerInActiveList>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01f      	beq.n	8009260 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009220:	2300      	movs	r3, #0
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	2100      	movs	r1, #0
 800922a:	6978      	ldr	r0, [r7, #20]
 800922c:	f7ff ff88 	bl	8009140 <xTimerGenericCommand>
 8009230:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d113      	bne.n	8009260 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	60fb      	str	r3, [r7, #12]
}
 800924a:	bf00      	nop
 800924c:	e7fe      	b.n	800924c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	b2da      	uxtb	r2, r3
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	6978      	ldr	r0, [r7, #20]
 8009266:	4798      	blx	r3
}
 8009268:	bf00      	nop
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	24004bac 	.word	0x24004bac

08009274 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4618      	mov	r0, r3
 8009282:	f000 f857 	bl	8009334 <prvGetNextExpireTime>
 8009286:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4619      	mov	r1, r3
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f803 	bl	8009298 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009292:	f000 f8d5 	bl	8009440 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009296:	e7f1      	b.n	800927c <prvTimerTask+0x8>

08009298 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092a2:	f7ff fa39 	bl	8008718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092a6:	f107 0308 	add.w	r3, r7, #8
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f866 	bl	800937c <prvSampleTimeNow>
 80092b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d130      	bne.n	800931a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <prvProcessTimerOrBlockTask+0x3c>
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d806      	bhi.n	80092d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092c6:	f7ff fa35 	bl	8008734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff ff85 	bl	80091dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092d2:	e024      	b.n	800931e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d008      	beq.n	80092ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092da:	4b13      	ldr	r3, [pc, #76]	; (8009328 <prvProcessTimerOrBlockTask+0x90>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <prvProcessTimerOrBlockTask+0x50>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e000      	b.n	80092ea <prvProcessTimerOrBlockTask+0x52>
 80092e8:	2300      	movs	r3, #0
 80092ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092ec:	4b0f      	ldr	r3, [pc, #60]	; (800932c <prvProcessTimerOrBlockTask+0x94>)
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	4619      	mov	r1, r3
 80092fa:	f7fe ff7d 	bl	80081f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092fe:	f7ff fa19 	bl	8008734 <xTaskResumeAll>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009308:	4b09      	ldr	r3, [pc, #36]	; (8009330 <prvProcessTimerOrBlockTask+0x98>)
 800930a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
}
 8009318:	e001      	b.n	800931e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800931a:	f7ff fa0b 	bl	8008734 <xTaskResumeAll>
}
 800931e:	bf00      	nop
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	24004bb0 	.word	0x24004bb0
 800932c:	24004bb4 	.word	0x24004bb4
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800933c:	4b0e      	ldr	r3, [pc, #56]	; (8009378 <prvGetNextExpireTime+0x44>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <prvGetNextExpireTime+0x16>
 8009346:	2201      	movs	r2, #1
 8009348:	e000      	b.n	800934c <prvGetNextExpireTime+0x18>
 800934a:	2200      	movs	r2, #0
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d105      	bne.n	8009364 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009358:	4b07      	ldr	r3, [pc, #28]	; (8009378 <prvGetNextExpireTime+0x44>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	e001      	b.n	8009368 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009368:	68fb      	ldr	r3, [r7, #12]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	24004bac 	.word	0x24004bac

0800937c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009384:	f7ff fa74 	bl	8008870 <xTaskGetTickCount>
 8009388:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800938a:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <prvSampleTimeNow+0x3c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	429a      	cmp	r2, r3
 8009392:	d205      	bcs.n	80093a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009394:	f000 f936 	bl	8009604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	e002      	b.n	80093a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093a6:	4a04      	ldr	r2, [pc, #16]	; (80093b8 <prvSampleTimeNow+0x3c>)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093ac:	68fb      	ldr	r3, [r7, #12]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	24004bbc 	.word	0x24004bbc

080093bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d812      	bhi.n	8009408 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	1ad2      	subs	r2, r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d302      	bcc.n	80093f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093f0:	2301      	movs	r3, #1
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	e01b      	b.n	800942e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093f6:	4b10      	ldr	r3, [pc, #64]	; (8009438 <prvInsertTimerInActiveList+0x7c>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4619      	mov	r1, r3
 8009400:	4610      	mov	r0, r2
 8009402:	f7fd ff92 	bl	800732a <vListInsert>
 8009406:	e012      	b.n	800942e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d206      	bcs.n	800941e <prvInsertTimerInActiveList+0x62>
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	429a      	cmp	r2, r3
 8009416:	d302      	bcc.n	800941e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009418:	2301      	movs	r3, #1
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	e007      	b.n	800942e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800941e:	4b07      	ldr	r3, [pc, #28]	; (800943c <prvInsertTimerInActiveList+0x80>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fd ff7e 	bl	800732a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800942e:	697b      	ldr	r3, [r7, #20]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	24004bb0 	.word	0x24004bb0
 800943c:	24004bac 	.word	0x24004bac

08009440 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08e      	sub	sp, #56	; 0x38
 8009444:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009446:	e0ca      	b.n	80095de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	da18      	bge.n	8009480 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800944e:	1d3b      	adds	r3, r7, #4
 8009450:	3304      	adds	r3, #4
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	61fb      	str	r3, [r7, #28]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009476:	6850      	ldr	r0, [r2, #4]
 8009478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800947a:	6892      	ldr	r2, [r2, #8]
 800947c:	4611      	mov	r1, r2
 800947e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f2c0 80aa 	blt.w	80095dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	3304      	adds	r3, #4
 8009498:	4618      	mov	r0, r3
 800949a:	f7fd ff7f 	bl	800739c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800949e:	463b      	mov	r3, r7
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff ff6b 	bl	800937c <prvSampleTimeNow>
 80094a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b09      	cmp	r3, #9
 80094ac:	f200 8097 	bhi.w	80095de <prvProcessReceivedCommands+0x19e>
 80094b0:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <prvProcessReceivedCommands+0x78>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	080094e1 	.word	0x080094e1
 80094bc:	080094e1 	.word	0x080094e1
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	08009555 	.word	0x08009555
 80094c8:	08009569 	.word	0x08009569
 80094cc:	080095b3 	.word	0x080095b3
 80094d0:	080094e1 	.word	0x080094e1
 80094d4:	080094e1 	.word	0x080094e1
 80094d8:	08009555 	.word	0x08009555
 80094dc:	08009569 	.word	0x08009569
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e6:	f043 0301 	orr.w	r3, r3, #1
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	18d1      	adds	r1, r2, r3
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009500:	f7ff ff5c 	bl	80093bc <prvInsertTimerInActiveList>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d069      	beq.n	80095de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009510:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d05e      	beq.n	80095de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	441a      	add	r2, r3
 8009528:	2300      	movs	r3, #0
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	2300      	movs	r3, #0
 800952e:	2100      	movs	r1, #0
 8009530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009532:	f7ff fe05 	bl	8009140 <xTimerGenericCommand>
 8009536:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d14f      	bne.n	80095de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	61bb      	str	r3, [r7, #24]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800955a:	f023 0301 	bic.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009566:	e03a      	b.n	80095de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800956e:	f043 0301 	orr.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	617b      	str	r3, [r7, #20]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	18d1      	adds	r1, r2, r3
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ac:	f7ff ff06 	bl	80093bc <prvInsertTimerInActiveList>
					break;
 80095b0:	e015      	b.n	80095de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c2:	f7fd fd43 	bl	800704c <vPortFree>
 80095c6:	e00a      	b.n	80095de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095da:	e000      	b.n	80095de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80095dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095de:	4b08      	ldr	r3, [pc, #32]	; (8009600 <prvProcessReceivedCommands+0x1c0>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	1d39      	adds	r1, r7, #4
 80095e4:	2200      	movs	r2, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fbec 	bl	8007dc4 <xQueueReceive>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f47f af2a 	bne.w	8009448 <prvProcessReceivedCommands+0x8>
	}
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	3730      	adds	r7, #48	; 0x30
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	24004bb4 	.word	0x24004bb4

08009604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800960a:	e048      	b.n	800969e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800960c:	4b2d      	ldr	r3, [pc, #180]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009616:	4b2b      	ldr	r3, [pc, #172]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3304      	adds	r3, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f7fd feb9 	bl	800739c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d02e      	beq.n	800969e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4413      	add	r3, r2
 8009648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	429a      	cmp	r2, r3
 8009650:	d90e      	bls.n	8009670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800965e:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3304      	adds	r3, #4
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7fd fe5e 	bl	800732a <vListInsert>
 800966e:	e016      	b.n	800969e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009670:	2300      	movs	r3, #0
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	2100      	movs	r1, #0
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff fd60 	bl	8009140 <xTimerGenericCommand>
 8009680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	603b      	str	r3, [r7, #0]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1b1      	bne.n	800960c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096a8:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096ae:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <prvSwitchTimerLists+0xc4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a04      	ldr	r2, [pc, #16]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 80096b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096b6:	4a04      	ldr	r2, [pc, #16]	; (80096c8 <prvSwitchTimerLists+0xc4>)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	6013      	str	r3, [r2, #0]
}
 80096bc:	bf00      	nop
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	24004bac 	.word	0x24004bac
 80096c8:	24004bb0 	.word	0x24004bb0

080096cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096d2:	f7fd ffb7 	bl	8007644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096d6:	4b15      	ldr	r3, [pc, #84]	; (800972c <prvCheckForValidListAndQueue+0x60>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d120      	bne.n	8009720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096de:	4814      	ldr	r0, [pc, #80]	; (8009730 <prvCheckForValidListAndQueue+0x64>)
 80096e0:	f7fd fdd2 	bl	8007288 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096e4:	4813      	ldr	r0, [pc, #76]	; (8009734 <prvCheckForValidListAndQueue+0x68>)
 80096e6:	f7fd fdcf 	bl	8007288 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096ea:	4b13      	ldr	r3, [pc, #76]	; (8009738 <prvCheckForValidListAndQueue+0x6c>)
 80096ec:	4a10      	ldr	r2, [pc, #64]	; (8009730 <prvCheckForValidListAndQueue+0x64>)
 80096ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096f0:	4b12      	ldr	r3, [pc, #72]	; (800973c <prvCheckForValidListAndQueue+0x70>)
 80096f2:	4a10      	ldr	r2, [pc, #64]	; (8009734 <prvCheckForValidListAndQueue+0x68>)
 80096f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096f6:	2300      	movs	r3, #0
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	4b11      	ldr	r3, [pc, #68]	; (8009740 <prvCheckForValidListAndQueue+0x74>)
 80096fc:	4a11      	ldr	r2, [pc, #68]	; (8009744 <prvCheckForValidListAndQueue+0x78>)
 80096fe:	2110      	movs	r1, #16
 8009700:	200a      	movs	r0, #10
 8009702:	f7fe f929 	bl	8007958 <xQueueGenericCreateStatic>
 8009706:	4603      	mov	r3, r0
 8009708:	4a08      	ldr	r2, [pc, #32]	; (800972c <prvCheckForValidListAndQueue+0x60>)
 800970a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800970c:	4b07      	ldr	r3, [pc, #28]	; (800972c <prvCheckForValidListAndQueue+0x60>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d005      	beq.n	8009720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <prvCheckForValidListAndQueue+0x60>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	490b      	ldr	r1, [pc, #44]	; (8009748 <prvCheckForValidListAndQueue+0x7c>)
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fd42 	bl	80081a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009720:	f7fd ffc0 	bl	80076a4 <vPortExitCritical>
}
 8009724:	bf00      	nop
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	24004bb4 	.word	0x24004bb4
 8009730:	24004b84 	.word	0x24004b84
 8009734:	24004b98 	.word	0x24004b98
 8009738:	24004bac 	.word	0x24004bac
 800973c:	24004bb0 	.word	0x24004bb0
 8009740:	24004c60 	.word	0x24004c60
 8009744:	24004bc0 	.word	0x24004bc0
 8009748:	0800a1d0 	.word	0x0800a1d0

0800974c <__errno>:
 800974c:	4b01      	ldr	r3, [pc, #4]	; (8009754 <__errno+0x8>)
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	24000014 	.word	0x24000014

08009758 <__libc_init_array>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	4d0d      	ldr	r5, [pc, #52]	; (8009790 <__libc_init_array+0x38>)
 800975c:	4c0d      	ldr	r4, [pc, #52]	; (8009794 <__libc_init_array+0x3c>)
 800975e:	1b64      	subs	r4, r4, r5
 8009760:	10a4      	asrs	r4, r4, #2
 8009762:	2600      	movs	r6, #0
 8009764:	42a6      	cmp	r6, r4
 8009766:	d109      	bne.n	800977c <__libc_init_array+0x24>
 8009768:	4d0b      	ldr	r5, [pc, #44]	; (8009798 <__libc_init_array+0x40>)
 800976a:	4c0c      	ldr	r4, [pc, #48]	; (800979c <__libc_init_array+0x44>)
 800976c:	f000 fcf8 	bl	800a160 <_init>
 8009770:	1b64      	subs	r4, r4, r5
 8009772:	10a4      	asrs	r4, r4, #2
 8009774:	2600      	movs	r6, #0
 8009776:	42a6      	cmp	r6, r4
 8009778:	d105      	bne.n	8009786 <__libc_init_array+0x2e>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009780:	4798      	blx	r3
 8009782:	3601      	adds	r6, #1
 8009784:	e7ee      	b.n	8009764 <__libc_init_array+0xc>
 8009786:	f855 3b04 	ldr.w	r3, [r5], #4
 800978a:	4798      	blx	r3
 800978c:	3601      	adds	r6, #1
 800978e:	e7f2      	b.n	8009776 <__libc_init_array+0x1e>
 8009790:	0800a2f4 	.word	0x0800a2f4
 8009794:	0800a2f4 	.word	0x0800a2f4
 8009798:	0800a2f4 	.word	0x0800a2f4
 800979c:	0800a2f8 	.word	0x0800a2f8

080097a0 <__retarget_lock_acquire_recursive>:
 80097a0:	4770      	bx	lr

080097a2 <__retarget_lock_release_recursive>:
 80097a2:	4770      	bx	lr

080097a4 <memcpy>:
 80097a4:	440a      	add	r2, r1
 80097a6:	4291      	cmp	r1, r2
 80097a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097ac:	d100      	bne.n	80097b0 <memcpy+0xc>
 80097ae:	4770      	bx	lr
 80097b0:	b510      	push	{r4, lr}
 80097b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ba:	4291      	cmp	r1, r2
 80097bc:	d1f9      	bne.n	80097b2 <memcpy+0xe>
 80097be:	bd10      	pop	{r4, pc}

080097c0 <memset>:
 80097c0:	4402      	add	r2, r0
 80097c2:	4603      	mov	r3, r0
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d100      	bne.n	80097ca <memset+0xa>
 80097c8:	4770      	bx	lr
 80097ca:	f803 1b01 	strb.w	r1, [r3], #1
 80097ce:	e7f9      	b.n	80097c4 <memset+0x4>

080097d0 <sbrk_aligned>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	4e0e      	ldr	r6, [pc, #56]	; (800980c <sbrk_aligned+0x3c>)
 80097d4:	460c      	mov	r4, r1
 80097d6:	6831      	ldr	r1, [r6, #0]
 80097d8:	4605      	mov	r5, r0
 80097da:	b911      	cbnz	r1, 80097e2 <sbrk_aligned+0x12>
 80097dc:	f000 f8f6 	bl	80099cc <_sbrk_r>
 80097e0:	6030      	str	r0, [r6, #0]
 80097e2:	4621      	mov	r1, r4
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 f8f1 	bl	80099cc <_sbrk_r>
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d00a      	beq.n	8009804 <sbrk_aligned+0x34>
 80097ee:	1cc4      	adds	r4, r0, #3
 80097f0:	f024 0403 	bic.w	r4, r4, #3
 80097f4:	42a0      	cmp	r0, r4
 80097f6:	d007      	beq.n	8009808 <sbrk_aligned+0x38>
 80097f8:	1a21      	subs	r1, r4, r0
 80097fa:	4628      	mov	r0, r5
 80097fc:	f000 f8e6 	bl	80099cc <_sbrk_r>
 8009800:	3001      	adds	r0, #1
 8009802:	d101      	bne.n	8009808 <sbrk_aligned+0x38>
 8009804:	f04f 34ff 	mov.w	r4, #4294967295
 8009808:	4620      	mov	r0, r4
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	24004cb8 	.word	0x24004cb8

08009810 <_malloc_r>:
 8009810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009814:	1ccd      	adds	r5, r1, #3
 8009816:	f025 0503 	bic.w	r5, r5, #3
 800981a:	3508      	adds	r5, #8
 800981c:	2d0c      	cmp	r5, #12
 800981e:	bf38      	it	cc
 8009820:	250c      	movcc	r5, #12
 8009822:	2d00      	cmp	r5, #0
 8009824:	4607      	mov	r7, r0
 8009826:	db01      	blt.n	800982c <_malloc_r+0x1c>
 8009828:	42a9      	cmp	r1, r5
 800982a:	d905      	bls.n	8009838 <_malloc_r+0x28>
 800982c:	230c      	movs	r3, #12
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	2600      	movs	r6, #0
 8009832:	4630      	mov	r0, r6
 8009834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009838:	4e2e      	ldr	r6, [pc, #184]	; (80098f4 <_malloc_r+0xe4>)
 800983a:	f000 f8f7 	bl	8009a2c <__malloc_lock>
 800983e:	6833      	ldr	r3, [r6, #0]
 8009840:	461c      	mov	r4, r3
 8009842:	bb34      	cbnz	r4, 8009892 <_malloc_r+0x82>
 8009844:	4629      	mov	r1, r5
 8009846:	4638      	mov	r0, r7
 8009848:	f7ff ffc2 	bl	80097d0 <sbrk_aligned>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	4604      	mov	r4, r0
 8009850:	d14d      	bne.n	80098ee <_malloc_r+0xde>
 8009852:	6834      	ldr	r4, [r6, #0]
 8009854:	4626      	mov	r6, r4
 8009856:	2e00      	cmp	r6, #0
 8009858:	d140      	bne.n	80098dc <_malloc_r+0xcc>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	4631      	mov	r1, r6
 800985e:	4638      	mov	r0, r7
 8009860:	eb04 0803 	add.w	r8, r4, r3
 8009864:	f000 f8b2 	bl	80099cc <_sbrk_r>
 8009868:	4580      	cmp	r8, r0
 800986a:	d13a      	bne.n	80098e2 <_malloc_r+0xd2>
 800986c:	6821      	ldr	r1, [r4, #0]
 800986e:	3503      	adds	r5, #3
 8009870:	1a6d      	subs	r5, r5, r1
 8009872:	f025 0503 	bic.w	r5, r5, #3
 8009876:	3508      	adds	r5, #8
 8009878:	2d0c      	cmp	r5, #12
 800987a:	bf38      	it	cc
 800987c:	250c      	movcc	r5, #12
 800987e:	4629      	mov	r1, r5
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff ffa5 	bl	80097d0 <sbrk_aligned>
 8009886:	3001      	adds	r0, #1
 8009888:	d02b      	beq.n	80098e2 <_malloc_r+0xd2>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	442b      	add	r3, r5
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	e00e      	b.n	80098b0 <_malloc_r+0xa0>
 8009892:	6822      	ldr	r2, [r4, #0]
 8009894:	1b52      	subs	r2, r2, r5
 8009896:	d41e      	bmi.n	80098d6 <_malloc_r+0xc6>
 8009898:	2a0b      	cmp	r2, #11
 800989a:	d916      	bls.n	80098ca <_malloc_r+0xba>
 800989c:	1961      	adds	r1, r4, r5
 800989e:	42a3      	cmp	r3, r4
 80098a0:	6025      	str	r5, [r4, #0]
 80098a2:	bf18      	it	ne
 80098a4:	6059      	strne	r1, [r3, #4]
 80098a6:	6863      	ldr	r3, [r4, #4]
 80098a8:	bf08      	it	eq
 80098aa:	6031      	streq	r1, [r6, #0]
 80098ac:	5162      	str	r2, [r4, r5]
 80098ae:	604b      	str	r3, [r1, #4]
 80098b0:	4638      	mov	r0, r7
 80098b2:	f104 060b 	add.w	r6, r4, #11
 80098b6:	f000 f8bf 	bl	8009a38 <__malloc_unlock>
 80098ba:	f026 0607 	bic.w	r6, r6, #7
 80098be:	1d23      	adds	r3, r4, #4
 80098c0:	1af2      	subs	r2, r6, r3
 80098c2:	d0b6      	beq.n	8009832 <_malloc_r+0x22>
 80098c4:	1b9b      	subs	r3, r3, r6
 80098c6:	50a3      	str	r3, [r4, r2]
 80098c8:	e7b3      	b.n	8009832 <_malloc_r+0x22>
 80098ca:	6862      	ldr	r2, [r4, #4]
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	bf0c      	ite	eq
 80098d0:	6032      	streq	r2, [r6, #0]
 80098d2:	605a      	strne	r2, [r3, #4]
 80098d4:	e7ec      	b.n	80098b0 <_malloc_r+0xa0>
 80098d6:	4623      	mov	r3, r4
 80098d8:	6864      	ldr	r4, [r4, #4]
 80098da:	e7b2      	b.n	8009842 <_malloc_r+0x32>
 80098dc:	4634      	mov	r4, r6
 80098de:	6876      	ldr	r6, [r6, #4]
 80098e0:	e7b9      	b.n	8009856 <_malloc_r+0x46>
 80098e2:	230c      	movs	r3, #12
 80098e4:	603b      	str	r3, [r7, #0]
 80098e6:	4638      	mov	r0, r7
 80098e8:	f000 f8a6 	bl	8009a38 <__malloc_unlock>
 80098ec:	e7a1      	b.n	8009832 <_malloc_r+0x22>
 80098ee:	6025      	str	r5, [r4, #0]
 80098f0:	e7de      	b.n	80098b0 <_malloc_r+0xa0>
 80098f2:	bf00      	nop
 80098f4:	24004cb4 	.word	0x24004cb4

080098f8 <cleanup_glue>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	460c      	mov	r4, r1
 80098fc:	6809      	ldr	r1, [r1, #0]
 80098fe:	4605      	mov	r5, r0
 8009900:	b109      	cbz	r1, 8009906 <cleanup_glue+0xe>
 8009902:	f7ff fff9 	bl	80098f8 <cleanup_glue>
 8009906:	4621      	mov	r1, r4
 8009908:	4628      	mov	r0, r5
 800990a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800990e:	f000 b899 	b.w	8009a44 <_free_r>
	...

08009914 <_reclaim_reent>:
 8009914:	4b2c      	ldr	r3, [pc, #176]	; (80099c8 <_reclaim_reent+0xb4>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4283      	cmp	r3, r0
 800991a:	b570      	push	{r4, r5, r6, lr}
 800991c:	4604      	mov	r4, r0
 800991e:	d051      	beq.n	80099c4 <_reclaim_reent+0xb0>
 8009920:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009922:	b143      	cbz	r3, 8009936 <_reclaim_reent+0x22>
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d14a      	bne.n	80099c0 <_reclaim_reent+0xac>
 800992a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800992c:	6819      	ldr	r1, [r3, #0]
 800992e:	b111      	cbz	r1, 8009936 <_reclaim_reent+0x22>
 8009930:	4620      	mov	r0, r4
 8009932:	f000 f887 	bl	8009a44 <_free_r>
 8009936:	6961      	ldr	r1, [r4, #20]
 8009938:	b111      	cbz	r1, 8009940 <_reclaim_reent+0x2c>
 800993a:	4620      	mov	r0, r4
 800993c:	f000 f882 	bl	8009a44 <_free_r>
 8009940:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009942:	b111      	cbz	r1, 800994a <_reclaim_reent+0x36>
 8009944:	4620      	mov	r0, r4
 8009946:	f000 f87d 	bl	8009a44 <_free_r>
 800994a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800994c:	b111      	cbz	r1, 8009954 <_reclaim_reent+0x40>
 800994e:	4620      	mov	r0, r4
 8009950:	f000 f878 	bl	8009a44 <_free_r>
 8009954:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009956:	b111      	cbz	r1, 800995e <_reclaim_reent+0x4a>
 8009958:	4620      	mov	r0, r4
 800995a:	f000 f873 	bl	8009a44 <_free_r>
 800995e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009960:	b111      	cbz	r1, 8009968 <_reclaim_reent+0x54>
 8009962:	4620      	mov	r0, r4
 8009964:	f000 f86e 	bl	8009a44 <_free_r>
 8009968:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800996a:	b111      	cbz	r1, 8009972 <_reclaim_reent+0x5e>
 800996c:	4620      	mov	r0, r4
 800996e:	f000 f869 	bl	8009a44 <_free_r>
 8009972:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009974:	b111      	cbz	r1, 800997c <_reclaim_reent+0x68>
 8009976:	4620      	mov	r0, r4
 8009978:	f000 f864 	bl	8009a44 <_free_r>
 800997c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800997e:	b111      	cbz	r1, 8009986 <_reclaim_reent+0x72>
 8009980:	4620      	mov	r0, r4
 8009982:	f000 f85f 	bl	8009a44 <_free_r>
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	b1e3      	cbz	r3, 80099c4 <_reclaim_reent+0xb0>
 800998a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800998c:	4620      	mov	r0, r4
 800998e:	4798      	blx	r3
 8009990:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009992:	b1b9      	cbz	r1, 80099c4 <_reclaim_reent+0xb0>
 8009994:	4620      	mov	r0, r4
 8009996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800999a:	f7ff bfad 	b.w	80098f8 <cleanup_glue>
 800999e:	5949      	ldr	r1, [r1, r5]
 80099a0:	b941      	cbnz	r1, 80099b4 <_reclaim_reent+0xa0>
 80099a2:	3504      	adds	r5, #4
 80099a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a6:	2d80      	cmp	r5, #128	; 0x80
 80099a8:	68d9      	ldr	r1, [r3, #12]
 80099aa:	d1f8      	bne.n	800999e <_reclaim_reent+0x8a>
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 f849 	bl	8009a44 <_free_r>
 80099b2:	e7ba      	b.n	800992a <_reclaim_reent+0x16>
 80099b4:	680e      	ldr	r6, [r1, #0]
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 f844 	bl	8009a44 <_free_r>
 80099bc:	4631      	mov	r1, r6
 80099be:	e7ef      	b.n	80099a0 <_reclaim_reent+0x8c>
 80099c0:	2500      	movs	r5, #0
 80099c2:	e7ef      	b.n	80099a4 <_reclaim_reent+0x90>
 80099c4:	bd70      	pop	{r4, r5, r6, pc}
 80099c6:	bf00      	nop
 80099c8:	24000014 	.word	0x24000014

080099cc <_sbrk_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d06      	ldr	r5, [pc, #24]	; (80099e8 <_sbrk_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	f7f7 fdfc 	bl	80015d4 <_sbrk>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_sbrk_r+0x1a>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_sbrk_r+0x1a>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	24004cbc 	.word	0x24004cbc

080099ec <_vsiprintf_r>:
 80099ec:	b500      	push	{lr}
 80099ee:	b09b      	sub	sp, #108	; 0x6c
 80099f0:	9100      	str	r1, [sp, #0]
 80099f2:	9104      	str	r1, [sp, #16]
 80099f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099f8:	9105      	str	r1, [sp, #20]
 80099fa:	9102      	str	r1, [sp, #8]
 80099fc:	4905      	ldr	r1, [pc, #20]	; (8009a14 <_vsiprintf_r+0x28>)
 80099fe:	9103      	str	r1, [sp, #12]
 8009a00:	4669      	mov	r1, sp
 8009a02:	f000 f8c7 	bl	8009b94 <_svfiprintf_r>
 8009a06:	9b00      	ldr	r3, [sp, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	701a      	strb	r2, [r3, #0]
 8009a0c:	b01b      	add	sp, #108	; 0x6c
 8009a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a12:	bf00      	nop
 8009a14:	ffff0208 	.word	0xffff0208

08009a18 <vsiprintf>:
 8009a18:	4613      	mov	r3, r2
 8009a1a:	460a      	mov	r2, r1
 8009a1c:	4601      	mov	r1, r0
 8009a1e:	4802      	ldr	r0, [pc, #8]	; (8009a28 <vsiprintf+0x10>)
 8009a20:	6800      	ldr	r0, [r0, #0]
 8009a22:	f7ff bfe3 	b.w	80099ec <_vsiprintf_r>
 8009a26:	bf00      	nop
 8009a28:	24000014 	.word	0x24000014

08009a2c <__malloc_lock>:
 8009a2c:	4801      	ldr	r0, [pc, #4]	; (8009a34 <__malloc_lock+0x8>)
 8009a2e:	f7ff beb7 	b.w	80097a0 <__retarget_lock_acquire_recursive>
 8009a32:	bf00      	nop
 8009a34:	24004cb0 	.word	0x24004cb0

08009a38 <__malloc_unlock>:
 8009a38:	4801      	ldr	r0, [pc, #4]	; (8009a40 <__malloc_unlock+0x8>)
 8009a3a:	f7ff beb2 	b.w	80097a2 <__retarget_lock_release_recursive>
 8009a3e:	bf00      	nop
 8009a40:	24004cb0 	.word	0x24004cb0

08009a44 <_free_r>:
 8009a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a46:	2900      	cmp	r1, #0
 8009a48:	d044      	beq.n	8009ad4 <_free_r+0x90>
 8009a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a4e:	9001      	str	r0, [sp, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f1a1 0404 	sub.w	r4, r1, #4
 8009a56:	bfb8      	it	lt
 8009a58:	18e4      	addlt	r4, r4, r3
 8009a5a:	f7ff ffe7 	bl	8009a2c <__malloc_lock>
 8009a5e:	4a1e      	ldr	r2, [pc, #120]	; (8009ad8 <_free_r+0x94>)
 8009a60:	9801      	ldr	r0, [sp, #4]
 8009a62:	6813      	ldr	r3, [r2, #0]
 8009a64:	b933      	cbnz	r3, 8009a74 <_free_r+0x30>
 8009a66:	6063      	str	r3, [r4, #4]
 8009a68:	6014      	str	r4, [r2, #0]
 8009a6a:	b003      	add	sp, #12
 8009a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a70:	f7ff bfe2 	b.w	8009a38 <__malloc_unlock>
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	d908      	bls.n	8009a8a <_free_r+0x46>
 8009a78:	6825      	ldr	r5, [r4, #0]
 8009a7a:	1961      	adds	r1, r4, r5
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	bf01      	itttt	eq
 8009a80:	6819      	ldreq	r1, [r3, #0]
 8009a82:	685b      	ldreq	r3, [r3, #4]
 8009a84:	1949      	addeq	r1, r1, r5
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	e7ed      	b.n	8009a66 <_free_r+0x22>
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	b10b      	cbz	r3, 8009a94 <_free_r+0x50>
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	d9fa      	bls.n	8009a8a <_free_r+0x46>
 8009a94:	6811      	ldr	r1, [r2, #0]
 8009a96:	1855      	adds	r5, r2, r1
 8009a98:	42a5      	cmp	r5, r4
 8009a9a:	d10b      	bne.n	8009ab4 <_free_r+0x70>
 8009a9c:	6824      	ldr	r4, [r4, #0]
 8009a9e:	4421      	add	r1, r4
 8009aa0:	1854      	adds	r4, r2, r1
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	6011      	str	r1, [r2, #0]
 8009aa6:	d1e0      	bne.n	8009a6a <_free_r+0x26>
 8009aa8:	681c      	ldr	r4, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	6053      	str	r3, [r2, #4]
 8009aae:	4421      	add	r1, r4
 8009ab0:	6011      	str	r1, [r2, #0]
 8009ab2:	e7da      	b.n	8009a6a <_free_r+0x26>
 8009ab4:	d902      	bls.n	8009abc <_free_r+0x78>
 8009ab6:	230c      	movs	r3, #12
 8009ab8:	6003      	str	r3, [r0, #0]
 8009aba:	e7d6      	b.n	8009a6a <_free_r+0x26>
 8009abc:	6825      	ldr	r5, [r4, #0]
 8009abe:	1961      	adds	r1, r4, r5
 8009ac0:	428b      	cmp	r3, r1
 8009ac2:	bf04      	itt	eq
 8009ac4:	6819      	ldreq	r1, [r3, #0]
 8009ac6:	685b      	ldreq	r3, [r3, #4]
 8009ac8:	6063      	str	r3, [r4, #4]
 8009aca:	bf04      	itt	eq
 8009acc:	1949      	addeq	r1, r1, r5
 8009ace:	6021      	streq	r1, [r4, #0]
 8009ad0:	6054      	str	r4, [r2, #4]
 8009ad2:	e7ca      	b.n	8009a6a <_free_r+0x26>
 8009ad4:	b003      	add	sp, #12
 8009ad6:	bd30      	pop	{r4, r5, pc}
 8009ad8:	24004cb4 	.word	0x24004cb4

08009adc <__ssputs_r>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	688e      	ldr	r6, [r1, #8]
 8009ae2:	429e      	cmp	r6, r3
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	4690      	mov	r8, r2
 8009aea:	461f      	mov	r7, r3
 8009aec:	d838      	bhi.n	8009b60 <__ssputs_r+0x84>
 8009aee:	898a      	ldrh	r2, [r1, #12]
 8009af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009af4:	d032      	beq.n	8009b5c <__ssputs_r+0x80>
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	6909      	ldr	r1, [r1, #16]
 8009afa:	eba5 0901 	sub.w	r9, r5, r1
 8009afe:	6965      	ldr	r5, [r4, #20]
 8009b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b08:	3301      	adds	r3, #1
 8009b0a:	444b      	add	r3, r9
 8009b0c:	106d      	asrs	r5, r5, #1
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	bf38      	it	cc
 8009b12:	461d      	movcc	r5, r3
 8009b14:	0553      	lsls	r3, r2, #21
 8009b16:	d531      	bpl.n	8009b7c <__ssputs_r+0xa0>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7ff fe79 	bl	8009810 <_malloc_r>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	b950      	cbnz	r0, 8009b38 <__ssputs_r+0x5c>
 8009b22:	230c      	movs	r3, #12
 8009b24:	f8ca 3000 	str.w	r3, [sl]
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	f04f 30ff 	mov.w	r0, #4294967295
 8009b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b38:	6921      	ldr	r1, [r4, #16]
 8009b3a:	464a      	mov	r2, r9
 8009b3c:	f7ff fe32 	bl	80097a4 <memcpy>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	6126      	str	r6, [r4, #16]
 8009b4e:	6165      	str	r5, [r4, #20]
 8009b50:	444e      	add	r6, r9
 8009b52:	eba5 0509 	sub.w	r5, r5, r9
 8009b56:	6026      	str	r6, [r4, #0]
 8009b58:	60a5      	str	r5, [r4, #8]
 8009b5a:	463e      	mov	r6, r7
 8009b5c:	42be      	cmp	r6, r7
 8009b5e:	d900      	bls.n	8009b62 <__ssputs_r+0x86>
 8009b60:	463e      	mov	r6, r7
 8009b62:	6820      	ldr	r0, [r4, #0]
 8009b64:	4632      	mov	r2, r6
 8009b66:	4641      	mov	r1, r8
 8009b68:	f000 faa8 	bl	800a0bc <memmove>
 8009b6c:	68a3      	ldr	r3, [r4, #8]
 8009b6e:	1b9b      	subs	r3, r3, r6
 8009b70:	60a3      	str	r3, [r4, #8]
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	4433      	add	r3, r6
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	2000      	movs	r0, #0
 8009b7a:	e7db      	b.n	8009b34 <__ssputs_r+0x58>
 8009b7c:	462a      	mov	r2, r5
 8009b7e:	f000 fab7 	bl	800a0f0 <_realloc_r>
 8009b82:	4606      	mov	r6, r0
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d1e1      	bne.n	8009b4c <__ssputs_r+0x70>
 8009b88:	6921      	ldr	r1, [r4, #16]
 8009b8a:	4650      	mov	r0, sl
 8009b8c:	f7ff ff5a 	bl	8009a44 <_free_r>
 8009b90:	e7c7      	b.n	8009b22 <__ssputs_r+0x46>
	...

08009b94 <_svfiprintf_r>:
 8009b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b98:	4698      	mov	r8, r3
 8009b9a:	898b      	ldrh	r3, [r1, #12]
 8009b9c:	061b      	lsls	r3, r3, #24
 8009b9e:	b09d      	sub	sp, #116	; 0x74
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	4614      	mov	r4, r2
 8009ba6:	d50e      	bpl.n	8009bc6 <_svfiprintf_r+0x32>
 8009ba8:	690b      	ldr	r3, [r1, #16]
 8009baa:	b963      	cbnz	r3, 8009bc6 <_svfiprintf_r+0x32>
 8009bac:	2140      	movs	r1, #64	; 0x40
 8009bae:	f7ff fe2f 	bl	8009810 <_malloc_r>
 8009bb2:	6028      	str	r0, [r5, #0]
 8009bb4:	6128      	str	r0, [r5, #16]
 8009bb6:	b920      	cbnz	r0, 8009bc2 <_svfiprintf_r+0x2e>
 8009bb8:	230c      	movs	r3, #12
 8009bba:	603b      	str	r3, [r7, #0]
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc0:	e0d1      	b.n	8009d66 <_svfiprintf_r+0x1d2>
 8009bc2:	2340      	movs	r3, #64	; 0x40
 8009bc4:	616b      	str	r3, [r5, #20]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bca:	2320      	movs	r3, #32
 8009bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bd4:	2330      	movs	r3, #48	; 0x30
 8009bd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d80 <_svfiprintf_r+0x1ec>
 8009bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bde:	f04f 0901 	mov.w	r9, #1
 8009be2:	4623      	mov	r3, r4
 8009be4:	469a      	mov	sl, r3
 8009be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bea:	b10a      	cbz	r2, 8009bf0 <_svfiprintf_r+0x5c>
 8009bec:	2a25      	cmp	r2, #37	; 0x25
 8009bee:	d1f9      	bne.n	8009be4 <_svfiprintf_r+0x50>
 8009bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf4:	d00b      	beq.n	8009c0e <_svfiprintf_r+0x7a>
 8009bf6:	465b      	mov	r3, fp
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff ff6d 	bl	8009adc <__ssputs_r>
 8009c02:	3001      	adds	r0, #1
 8009c04:	f000 80aa 	beq.w	8009d5c <_svfiprintf_r+0x1c8>
 8009c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c0a:	445a      	add	r2, fp
 8009c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80a2 	beq.w	8009d5c <_svfiprintf_r+0x1c8>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c22:	f10a 0a01 	add.w	sl, sl, #1
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	9307      	str	r3, [sp, #28]
 8009c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009c30:	4654      	mov	r4, sl
 8009c32:	2205      	movs	r2, #5
 8009c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c38:	4851      	ldr	r0, [pc, #324]	; (8009d80 <_svfiprintf_r+0x1ec>)
 8009c3a:	f7f6 fb59 	bl	80002f0 <memchr>
 8009c3e:	9a04      	ldr	r2, [sp, #16]
 8009c40:	b9d8      	cbnz	r0, 8009c7a <_svfiprintf_r+0xe6>
 8009c42:	06d0      	lsls	r0, r2, #27
 8009c44:	bf44      	itt	mi
 8009c46:	2320      	movmi	r3, #32
 8009c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c4c:	0711      	lsls	r1, r2, #28
 8009c4e:	bf44      	itt	mi
 8009c50:	232b      	movmi	r3, #43	; 0x2b
 8009c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c56:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c5c:	d015      	beq.n	8009c8a <_svfiprintf_r+0xf6>
 8009c5e:	9a07      	ldr	r2, [sp, #28]
 8009c60:	4654      	mov	r4, sl
 8009c62:	2000      	movs	r0, #0
 8009c64:	f04f 0c0a 	mov.w	ip, #10
 8009c68:	4621      	mov	r1, r4
 8009c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c6e:	3b30      	subs	r3, #48	; 0x30
 8009c70:	2b09      	cmp	r3, #9
 8009c72:	d94e      	bls.n	8009d12 <_svfiprintf_r+0x17e>
 8009c74:	b1b0      	cbz	r0, 8009ca4 <_svfiprintf_r+0x110>
 8009c76:	9207      	str	r2, [sp, #28]
 8009c78:	e014      	b.n	8009ca4 <_svfiprintf_r+0x110>
 8009c7a:	eba0 0308 	sub.w	r3, r0, r8
 8009c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	46a2      	mov	sl, r4
 8009c88:	e7d2      	b.n	8009c30 <_svfiprintf_r+0x9c>
 8009c8a:	9b03      	ldr	r3, [sp, #12]
 8009c8c:	1d19      	adds	r1, r3, #4
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	9103      	str	r1, [sp, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bfbb      	ittet	lt
 8009c96:	425b      	neglt	r3, r3
 8009c98:	f042 0202 	orrlt.w	r2, r2, #2
 8009c9c:	9307      	strge	r3, [sp, #28]
 8009c9e:	9307      	strlt	r3, [sp, #28]
 8009ca0:	bfb8      	it	lt
 8009ca2:	9204      	strlt	r2, [sp, #16]
 8009ca4:	7823      	ldrb	r3, [r4, #0]
 8009ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ca8:	d10c      	bne.n	8009cc4 <_svfiprintf_r+0x130>
 8009caa:	7863      	ldrb	r3, [r4, #1]
 8009cac:	2b2a      	cmp	r3, #42	; 0x2a
 8009cae:	d135      	bne.n	8009d1c <_svfiprintf_r+0x188>
 8009cb0:	9b03      	ldr	r3, [sp, #12]
 8009cb2:	1d1a      	adds	r2, r3, #4
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	9203      	str	r2, [sp, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	bfb8      	it	lt
 8009cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cc0:	3402      	adds	r4, #2
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d90 <_svfiprintf_r+0x1fc>
 8009cc8:	7821      	ldrb	r1, [r4, #0]
 8009cca:	2203      	movs	r2, #3
 8009ccc:	4650      	mov	r0, sl
 8009cce:	f7f6 fb0f 	bl	80002f0 <memchr>
 8009cd2:	b140      	cbz	r0, 8009ce6 <_svfiprintf_r+0x152>
 8009cd4:	2340      	movs	r3, #64	; 0x40
 8009cd6:	eba0 000a 	sub.w	r0, r0, sl
 8009cda:	fa03 f000 	lsl.w	r0, r3, r0
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	4303      	orrs	r3, r0
 8009ce2:	3401      	adds	r4, #1
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cea:	4826      	ldr	r0, [pc, #152]	; (8009d84 <_svfiprintf_r+0x1f0>)
 8009cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cf0:	2206      	movs	r2, #6
 8009cf2:	f7f6 fafd 	bl	80002f0 <memchr>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d038      	beq.n	8009d6c <_svfiprintf_r+0x1d8>
 8009cfa:	4b23      	ldr	r3, [pc, #140]	; (8009d88 <_svfiprintf_r+0x1f4>)
 8009cfc:	bb1b      	cbnz	r3, 8009d46 <_svfiprintf_r+0x1b2>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	3307      	adds	r3, #7
 8009d02:	f023 0307 	bic.w	r3, r3, #7
 8009d06:	3308      	adds	r3, #8
 8009d08:	9303      	str	r3, [sp, #12]
 8009d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0c:	4433      	add	r3, r6
 8009d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d10:	e767      	b.n	8009be2 <_svfiprintf_r+0x4e>
 8009d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d16:	460c      	mov	r4, r1
 8009d18:	2001      	movs	r0, #1
 8009d1a:	e7a5      	b.n	8009c68 <_svfiprintf_r+0xd4>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	3401      	adds	r4, #1
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	4619      	mov	r1, r3
 8009d24:	f04f 0c0a 	mov.w	ip, #10
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d2e:	3a30      	subs	r2, #48	; 0x30
 8009d30:	2a09      	cmp	r2, #9
 8009d32:	d903      	bls.n	8009d3c <_svfiprintf_r+0x1a8>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0c5      	beq.n	8009cc4 <_svfiprintf_r+0x130>
 8009d38:	9105      	str	r1, [sp, #20]
 8009d3a:	e7c3      	b.n	8009cc4 <_svfiprintf_r+0x130>
 8009d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d40:	4604      	mov	r4, r0
 8009d42:	2301      	movs	r3, #1
 8009d44:	e7f0      	b.n	8009d28 <_svfiprintf_r+0x194>
 8009d46:	ab03      	add	r3, sp, #12
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	4b0f      	ldr	r3, [pc, #60]	; (8009d8c <_svfiprintf_r+0x1f8>)
 8009d4e:	a904      	add	r1, sp, #16
 8009d50:	4638      	mov	r0, r7
 8009d52:	f3af 8000 	nop.w
 8009d56:	1c42      	adds	r2, r0, #1
 8009d58:	4606      	mov	r6, r0
 8009d5a:	d1d6      	bne.n	8009d0a <_svfiprintf_r+0x176>
 8009d5c:	89ab      	ldrh	r3, [r5, #12]
 8009d5e:	065b      	lsls	r3, r3, #25
 8009d60:	f53f af2c 	bmi.w	8009bbc <_svfiprintf_r+0x28>
 8009d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d66:	b01d      	add	sp, #116	; 0x74
 8009d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6c:	ab03      	add	r3, sp, #12
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	462a      	mov	r2, r5
 8009d72:	4b06      	ldr	r3, [pc, #24]	; (8009d8c <_svfiprintf_r+0x1f8>)
 8009d74:	a904      	add	r1, sp, #16
 8009d76:	4638      	mov	r0, r7
 8009d78:	f000 f87a 	bl	8009e70 <_printf_i>
 8009d7c:	e7eb      	b.n	8009d56 <_svfiprintf_r+0x1c2>
 8009d7e:	bf00      	nop
 8009d80:	0800a2b8 	.word	0x0800a2b8
 8009d84:	0800a2c2 	.word	0x0800a2c2
 8009d88:	00000000 	.word	0x00000000
 8009d8c:	08009add 	.word	0x08009add
 8009d90:	0800a2be 	.word	0x0800a2be

08009d94 <_printf_common>:
 8009d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d98:	4616      	mov	r6, r2
 8009d9a:	4699      	mov	r9, r3
 8009d9c:	688a      	ldr	r2, [r1, #8]
 8009d9e:	690b      	ldr	r3, [r1, #16]
 8009da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	bfb8      	it	lt
 8009da8:	4613      	movlt	r3, r2
 8009daa:	6033      	str	r3, [r6, #0]
 8009dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009db0:	4607      	mov	r7, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	b10a      	cbz	r2, 8009dba <_printf_common+0x26>
 8009db6:	3301      	adds	r3, #1
 8009db8:	6033      	str	r3, [r6, #0]
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	0699      	lsls	r1, r3, #26
 8009dbe:	bf42      	ittt	mi
 8009dc0:	6833      	ldrmi	r3, [r6, #0]
 8009dc2:	3302      	addmi	r3, #2
 8009dc4:	6033      	strmi	r3, [r6, #0]
 8009dc6:	6825      	ldr	r5, [r4, #0]
 8009dc8:	f015 0506 	ands.w	r5, r5, #6
 8009dcc:	d106      	bne.n	8009ddc <_printf_common+0x48>
 8009dce:	f104 0a19 	add.w	sl, r4, #25
 8009dd2:	68e3      	ldr	r3, [r4, #12]
 8009dd4:	6832      	ldr	r2, [r6, #0]
 8009dd6:	1a9b      	subs	r3, r3, r2
 8009dd8:	42ab      	cmp	r3, r5
 8009dda:	dc26      	bgt.n	8009e2a <_printf_common+0x96>
 8009ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009de0:	1e13      	subs	r3, r2, #0
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	bf18      	it	ne
 8009de6:	2301      	movne	r3, #1
 8009de8:	0692      	lsls	r2, r2, #26
 8009dea:	d42b      	bmi.n	8009e44 <_printf_common+0xb0>
 8009dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009df0:	4649      	mov	r1, r9
 8009df2:	4638      	mov	r0, r7
 8009df4:	47c0      	blx	r8
 8009df6:	3001      	adds	r0, #1
 8009df8:	d01e      	beq.n	8009e38 <_printf_common+0xa4>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	68e5      	ldr	r5, [r4, #12]
 8009dfe:	6832      	ldr	r2, [r6, #0]
 8009e00:	f003 0306 	and.w	r3, r3, #6
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	bf08      	it	eq
 8009e08:	1aad      	subeq	r5, r5, r2
 8009e0a:	68a3      	ldr	r3, [r4, #8]
 8009e0c:	6922      	ldr	r2, [r4, #16]
 8009e0e:	bf0c      	ite	eq
 8009e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e14:	2500      	movne	r5, #0
 8009e16:	4293      	cmp	r3, r2
 8009e18:	bfc4      	itt	gt
 8009e1a:	1a9b      	subgt	r3, r3, r2
 8009e1c:	18ed      	addgt	r5, r5, r3
 8009e1e:	2600      	movs	r6, #0
 8009e20:	341a      	adds	r4, #26
 8009e22:	42b5      	cmp	r5, r6
 8009e24:	d11a      	bne.n	8009e5c <_printf_common+0xc8>
 8009e26:	2000      	movs	r0, #0
 8009e28:	e008      	b.n	8009e3c <_printf_common+0xa8>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	4649      	mov	r1, r9
 8009e30:	4638      	mov	r0, r7
 8009e32:	47c0      	blx	r8
 8009e34:	3001      	adds	r0, #1
 8009e36:	d103      	bne.n	8009e40 <_printf_common+0xac>
 8009e38:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e40:	3501      	adds	r5, #1
 8009e42:	e7c6      	b.n	8009dd2 <_printf_common+0x3e>
 8009e44:	18e1      	adds	r1, r4, r3
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	2030      	movs	r0, #48	; 0x30
 8009e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e4e:	4422      	add	r2, r4
 8009e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e58:	3302      	adds	r3, #2
 8009e5a:	e7c7      	b.n	8009dec <_printf_common+0x58>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4649      	mov	r1, r9
 8009e62:	4638      	mov	r0, r7
 8009e64:	47c0      	blx	r8
 8009e66:	3001      	adds	r0, #1
 8009e68:	d0e6      	beq.n	8009e38 <_printf_common+0xa4>
 8009e6a:	3601      	adds	r6, #1
 8009e6c:	e7d9      	b.n	8009e22 <_printf_common+0x8e>
	...

08009e70 <_printf_i>:
 8009e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	7e0f      	ldrb	r7, [r1, #24]
 8009e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e78:	2f78      	cmp	r7, #120	; 0x78
 8009e7a:	4691      	mov	r9, r2
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	469a      	mov	sl, r3
 8009e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e86:	d807      	bhi.n	8009e98 <_printf_i+0x28>
 8009e88:	2f62      	cmp	r7, #98	; 0x62
 8009e8a:	d80a      	bhi.n	8009ea2 <_printf_i+0x32>
 8009e8c:	2f00      	cmp	r7, #0
 8009e8e:	f000 80d8 	beq.w	800a042 <_printf_i+0x1d2>
 8009e92:	2f58      	cmp	r7, #88	; 0x58
 8009e94:	f000 80a3 	beq.w	8009fde <_printf_i+0x16e>
 8009e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ea0:	e03a      	b.n	8009f18 <_printf_i+0xa8>
 8009ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ea6:	2b15      	cmp	r3, #21
 8009ea8:	d8f6      	bhi.n	8009e98 <_printf_i+0x28>
 8009eaa:	a101      	add	r1, pc, #4	; (adr r1, 8009eb0 <_printf_i+0x40>)
 8009eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eb0:	08009f09 	.word	0x08009f09
 8009eb4:	08009f1d 	.word	0x08009f1d
 8009eb8:	08009e99 	.word	0x08009e99
 8009ebc:	08009e99 	.word	0x08009e99
 8009ec0:	08009e99 	.word	0x08009e99
 8009ec4:	08009e99 	.word	0x08009e99
 8009ec8:	08009f1d 	.word	0x08009f1d
 8009ecc:	08009e99 	.word	0x08009e99
 8009ed0:	08009e99 	.word	0x08009e99
 8009ed4:	08009e99 	.word	0x08009e99
 8009ed8:	08009e99 	.word	0x08009e99
 8009edc:	0800a029 	.word	0x0800a029
 8009ee0:	08009f4d 	.word	0x08009f4d
 8009ee4:	0800a00b 	.word	0x0800a00b
 8009ee8:	08009e99 	.word	0x08009e99
 8009eec:	08009e99 	.word	0x08009e99
 8009ef0:	0800a04b 	.word	0x0800a04b
 8009ef4:	08009e99 	.word	0x08009e99
 8009ef8:	08009f4d 	.word	0x08009f4d
 8009efc:	08009e99 	.word	0x08009e99
 8009f00:	08009e99 	.word	0x08009e99
 8009f04:	0800a013 	.word	0x0800a013
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	1d1a      	adds	r2, r3, #4
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	602a      	str	r2, [r5, #0]
 8009f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e0a3      	b.n	800a064 <_printf_i+0x1f4>
 8009f1c:	6820      	ldr	r0, [r4, #0]
 8009f1e:	6829      	ldr	r1, [r5, #0]
 8009f20:	0606      	lsls	r6, r0, #24
 8009f22:	f101 0304 	add.w	r3, r1, #4
 8009f26:	d50a      	bpl.n	8009f3e <_printf_i+0xce>
 8009f28:	680e      	ldr	r6, [r1, #0]
 8009f2a:	602b      	str	r3, [r5, #0]
 8009f2c:	2e00      	cmp	r6, #0
 8009f2e:	da03      	bge.n	8009f38 <_printf_i+0xc8>
 8009f30:	232d      	movs	r3, #45	; 0x2d
 8009f32:	4276      	negs	r6, r6
 8009f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f38:	485e      	ldr	r0, [pc, #376]	; (800a0b4 <_printf_i+0x244>)
 8009f3a:	230a      	movs	r3, #10
 8009f3c:	e019      	b.n	8009f72 <_printf_i+0x102>
 8009f3e:	680e      	ldr	r6, [r1, #0]
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f46:	bf18      	it	ne
 8009f48:	b236      	sxthne	r6, r6
 8009f4a:	e7ef      	b.n	8009f2c <_printf_i+0xbc>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	6820      	ldr	r0, [r4, #0]
 8009f50:	1d19      	adds	r1, r3, #4
 8009f52:	6029      	str	r1, [r5, #0]
 8009f54:	0601      	lsls	r1, r0, #24
 8009f56:	d501      	bpl.n	8009f5c <_printf_i+0xec>
 8009f58:	681e      	ldr	r6, [r3, #0]
 8009f5a:	e002      	b.n	8009f62 <_printf_i+0xf2>
 8009f5c:	0646      	lsls	r6, r0, #25
 8009f5e:	d5fb      	bpl.n	8009f58 <_printf_i+0xe8>
 8009f60:	881e      	ldrh	r6, [r3, #0]
 8009f62:	4854      	ldr	r0, [pc, #336]	; (800a0b4 <_printf_i+0x244>)
 8009f64:	2f6f      	cmp	r7, #111	; 0x6f
 8009f66:	bf0c      	ite	eq
 8009f68:	2308      	moveq	r3, #8
 8009f6a:	230a      	movne	r3, #10
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f72:	6865      	ldr	r5, [r4, #4]
 8009f74:	60a5      	str	r5, [r4, #8]
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	bfa2      	ittt	ge
 8009f7a:	6821      	ldrge	r1, [r4, #0]
 8009f7c:	f021 0104 	bicge.w	r1, r1, #4
 8009f80:	6021      	strge	r1, [r4, #0]
 8009f82:	b90e      	cbnz	r6, 8009f88 <_printf_i+0x118>
 8009f84:	2d00      	cmp	r5, #0
 8009f86:	d04d      	beq.n	800a024 <_printf_i+0x1b4>
 8009f88:	4615      	mov	r5, r2
 8009f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f92:	5dc7      	ldrb	r7, [r0, r7]
 8009f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f98:	4637      	mov	r7, r6
 8009f9a:	42bb      	cmp	r3, r7
 8009f9c:	460e      	mov	r6, r1
 8009f9e:	d9f4      	bls.n	8009f8a <_printf_i+0x11a>
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	d10b      	bne.n	8009fbc <_printf_i+0x14c>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	07de      	lsls	r6, r3, #31
 8009fa8:	d508      	bpl.n	8009fbc <_printf_i+0x14c>
 8009faa:	6923      	ldr	r3, [r4, #16]
 8009fac:	6861      	ldr	r1, [r4, #4]
 8009fae:	4299      	cmp	r1, r3
 8009fb0:	bfde      	ittt	le
 8009fb2:	2330      	movle	r3, #48	; 0x30
 8009fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fbc:	1b52      	subs	r2, r2, r5
 8009fbe:	6122      	str	r2, [r4, #16]
 8009fc0:	f8cd a000 	str.w	sl, [sp]
 8009fc4:	464b      	mov	r3, r9
 8009fc6:	aa03      	add	r2, sp, #12
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f7ff fee2 	bl	8009d94 <_printf_common>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d14c      	bne.n	800a06e <_printf_i+0x1fe>
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	b004      	add	sp, #16
 8009fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fde:	4835      	ldr	r0, [pc, #212]	; (800a0b4 <_printf_i+0x244>)
 8009fe0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fe4:	6829      	ldr	r1, [r5, #0]
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fec:	6029      	str	r1, [r5, #0]
 8009fee:	061d      	lsls	r5, r3, #24
 8009ff0:	d514      	bpl.n	800a01c <_printf_i+0x1ac>
 8009ff2:	07df      	lsls	r7, r3, #31
 8009ff4:	bf44      	itt	mi
 8009ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8009ffa:	6023      	strmi	r3, [r4, #0]
 8009ffc:	b91e      	cbnz	r6, 800a006 <_printf_i+0x196>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	f023 0320 	bic.w	r3, r3, #32
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	2310      	movs	r3, #16
 800a008:	e7b0      	b.n	8009f6c <_printf_i+0xfc>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	f043 0320 	orr.w	r3, r3, #32
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	2378      	movs	r3, #120	; 0x78
 800a014:	4828      	ldr	r0, [pc, #160]	; (800a0b8 <_printf_i+0x248>)
 800a016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a01a:	e7e3      	b.n	8009fe4 <_printf_i+0x174>
 800a01c:	0659      	lsls	r1, r3, #25
 800a01e:	bf48      	it	mi
 800a020:	b2b6      	uxthmi	r6, r6
 800a022:	e7e6      	b.n	8009ff2 <_printf_i+0x182>
 800a024:	4615      	mov	r5, r2
 800a026:	e7bb      	b.n	8009fa0 <_printf_i+0x130>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	6826      	ldr	r6, [r4, #0]
 800a02c:	6961      	ldr	r1, [r4, #20]
 800a02e:	1d18      	adds	r0, r3, #4
 800a030:	6028      	str	r0, [r5, #0]
 800a032:	0635      	lsls	r5, r6, #24
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	d501      	bpl.n	800a03c <_printf_i+0x1cc>
 800a038:	6019      	str	r1, [r3, #0]
 800a03a:	e002      	b.n	800a042 <_printf_i+0x1d2>
 800a03c:	0670      	lsls	r0, r6, #25
 800a03e:	d5fb      	bpl.n	800a038 <_printf_i+0x1c8>
 800a040:	8019      	strh	r1, [r3, #0]
 800a042:	2300      	movs	r3, #0
 800a044:	6123      	str	r3, [r4, #16]
 800a046:	4615      	mov	r5, r2
 800a048:	e7ba      	b.n	8009fc0 <_printf_i+0x150>
 800a04a:	682b      	ldr	r3, [r5, #0]
 800a04c:	1d1a      	adds	r2, r3, #4
 800a04e:	602a      	str	r2, [r5, #0]
 800a050:	681d      	ldr	r5, [r3, #0]
 800a052:	6862      	ldr	r2, [r4, #4]
 800a054:	2100      	movs	r1, #0
 800a056:	4628      	mov	r0, r5
 800a058:	f7f6 f94a 	bl	80002f0 <memchr>
 800a05c:	b108      	cbz	r0, 800a062 <_printf_i+0x1f2>
 800a05e:	1b40      	subs	r0, r0, r5
 800a060:	6060      	str	r0, [r4, #4]
 800a062:	6863      	ldr	r3, [r4, #4]
 800a064:	6123      	str	r3, [r4, #16]
 800a066:	2300      	movs	r3, #0
 800a068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a06c:	e7a8      	b.n	8009fc0 <_printf_i+0x150>
 800a06e:	6923      	ldr	r3, [r4, #16]
 800a070:	462a      	mov	r2, r5
 800a072:	4649      	mov	r1, r9
 800a074:	4640      	mov	r0, r8
 800a076:	47d0      	blx	sl
 800a078:	3001      	adds	r0, #1
 800a07a:	d0ab      	beq.n	8009fd4 <_printf_i+0x164>
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	079b      	lsls	r3, r3, #30
 800a080:	d413      	bmi.n	800a0aa <_printf_i+0x23a>
 800a082:	68e0      	ldr	r0, [r4, #12]
 800a084:	9b03      	ldr	r3, [sp, #12]
 800a086:	4298      	cmp	r0, r3
 800a088:	bfb8      	it	lt
 800a08a:	4618      	movlt	r0, r3
 800a08c:	e7a4      	b.n	8009fd8 <_printf_i+0x168>
 800a08e:	2301      	movs	r3, #1
 800a090:	4632      	mov	r2, r6
 800a092:	4649      	mov	r1, r9
 800a094:	4640      	mov	r0, r8
 800a096:	47d0      	blx	sl
 800a098:	3001      	adds	r0, #1
 800a09a:	d09b      	beq.n	8009fd4 <_printf_i+0x164>
 800a09c:	3501      	adds	r5, #1
 800a09e:	68e3      	ldr	r3, [r4, #12]
 800a0a0:	9903      	ldr	r1, [sp, #12]
 800a0a2:	1a5b      	subs	r3, r3, r1
 800a0a4:	42ab      	cmp	r3, r5
 800a0a6:	dcf2      	bgt.n	800a08e <_printf_i+0x21e>
 800a0a8:	e7eb      	b.n	800a082 <_printf_i+0x212>
 800a0aa:	2500      	movs	r5, #0
 800a0ac:	f104 0619 	add.w	r6, r4, #25
 800a0b0:	e7f5      	b.n	800a09e <_printf_i+0x22e>
 800a0b2:	bf00      	nop
 800a0b4:	0800a2c9 	.word	0x0800a2c9
 800a0b8:	0800a2da 	.word	0x0800a2da

0800a0bc <memmove>:
 800a0bc:	4288      	cmp	r0, r1
 800a0be:	b510      	push	{r4, lr}
 800a0c0:	eb01 0402 	add.w	r4, r1, r2
 800a0c4:	d902      	bls.n	800a0cc <memmove+0x10>
 800a0c6:	4284      	cmp	r4, r0
 800a0c8:	4623      	mov	r3, r4
 800a0ca:	d807      	bhi.n	800a0dc <memmove+0x20>
 800a0cc:	1e43      	subs	r3, r0, #1
 800a0ce:	42a1      	cmp	r1, r4
 800a0d0:	d008      	beq.n	800a0e4 <memmove+0x28>
 800a0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0da:	e7f8      	b.n	800a0ce <memmove+0x12>
 800a0dc:	4402      	add	r2, r0
 800a0de:	4601      	mov	r1, r0
 800a0e0:	428a      	cmp	r2, r1
 800a0e2:	d100      	bne.n	800a0e6 <memmove+0x2a>
 800a0e4:	bd10      	pop	{r4, pc}
 800a0e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0ee:	e7f7      	b.n	800a0e0 <memmove+0x24>

0800a0f0 <_realloc_r>:
 800a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	4614      	mov	r4, r2
 800a0f8:	460e      	mov	r6, r1
 800a0fa:	b921      	cbnz	r1, 800a106 <_realloc_r+0x16>
 800a0fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a100:	4611      	mov	r1, r2
 800a102:	f7ff bb85 	b.w	8009810 <_malloc_r>
 800a106:	b92a      	cbnz	r2, 800a114 <_realloc_r+0x24>
 800a108:	f7ff fc9c 	bl	8009a44 <_free_r>
 800a10c:	4625      	mov	r5, r4
 800a10e:	4628      	mov	r0, r5
 800a110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a114:	f000 f81b 	bl	800a14e <_malloc_usable_size_r>
 800a118:	4284      	cmp	r4, r0
 800a11a:	4607      	mov	r7, r0
 800a11c:	d802      	bhi.n	800a124 <_realloc_r+0x34>
 800a11e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a122:	d812      	bhi.n	800a14a <_realloc_r+0x5a>
 800a124:	4621      	mov	r1, r4
 800a126:	4640      	mov	r0, r8
 800a128:	f7ff fb72 	bl	8009810 <_malloc_r>
 800a12c:	4605      	mov	r5, r0
 800a12e:	2800      	cmp	r0, #0
 800a130:	d0ed      	beq.n	800a10e <_realloc_r+0x1e>
 800a132:	42bc      	cmp	r4, r7
 800a134:	4622      	mov	r2, r4
 800a136:	4631      	mov	r1, r6
 800a138:	bf28      	it	cs
 800a13a:	463a      	movcs	r2, r7
 800a13c:	f7ff fb32 	bl	80097a4 <memcpy>
 800a140:	4631      	mov	r1, r6
 800a142:	4640      	mov	r0, r8
 800a144:	f7ff fc7e 	bl	8009a44 <_free_r>
 800a148:	e7e1      	b.n	800a10e <_realloc_r+0x1e>
 800a14a:	4635      	mov	r5, r6
 800a14c:	e7df      	b.n	800a10e <_realloc_r+0x1e>

0800a14e <_malloc_usable_size_r>:
 800a14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a152:	1f18      	subs	r0, r3, #4
 800a154:	2b00      	cmp	r3, #0
 800a156:	bfbc      	itt	lt
 800a158:	580b      	ldrlt	r3, [r1, r0]
 800a15a:	18c0      	addlt	r0, r0, r3
 800a15c:	4770      	bx	lr
	...

0800a160 <_init>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr

0800a16c <_fini>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr
