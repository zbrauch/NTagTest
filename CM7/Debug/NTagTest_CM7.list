
NTagTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009198  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009594  08009594  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009594  08009594  00019594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800959c  0800959c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800959c  0800959c  0001959c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095a0  080095a0  000195a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080095a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bc0  24000078  0800961c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004c38  0800961c  00024c38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029d78  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000453a  00000000  00000000  00049e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  0004e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  0004ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045108  00000000  00000000  000519f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251d6  00000000  00000000  00096af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b008f  00000000  00000000  000bbcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0026bd5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c8c  00000000  00000000  0026bdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009420 	.word	0x08009420

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08009420 	.word	0x08009420

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <_ZN9NTagRC52212SetI2CHandleEP19__I2C_HandleTypeDef>:
	return read_result;
}

//end of private functions

void NTagRC522::SetI2CHandle(I2C_HandleTypeDef *i2c) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	I2CHandle = i2c;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_Z6vprintPKcSt9__va_list>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0b4      	sub	sp, #208	; 0xd0
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 fa72 	bl	8008cd8 <vsiprintf>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bfcc      	ite	gt
 80007fa:	2301      	movgt	r3, #1
 80007fc:	2300      	movle	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00c      	beq.n	800081e <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd69 	bl	80002e0 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	f107 0108 	add.w	r1, r7, #8
 8000816:	230a      	movs	r3, #10
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <_Z6vprintPKcSt9__va_list+0x4c>)
 800081a:	f004 fa81 	bl	8004d20 <HAL_UART_Transmit>
    }
}
 800081e:	bf00      	nop
 8000820:	37d0      	adds	r7, #208	; 0xd0
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2400012c 	.word	0x2400012c

0800082c <_Z7vprintfPKcz>:

void vprintf(const char *fmt, ...) // custom printf() function
{
 800082c:	b40f      	push	{r0, r1, r2, r3}
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	6938      	ldr	r0, [r7, #16]
 800083e:	f7ff ffcd 	bl	80007dc <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800084c:	b004      	add	sp, #16
 800084e:	4770      	bx	lr

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800085c:	4b33      	ldr	r3, [pc, #204]	; (800092c <main+0xdc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <main+0x26>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	dd01      	ble.n	8000876 <main+0x26>
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <main+0x28>
 8000876:	2300      	movs	r3, #0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d000      	beq.n	800087e <main+0x2e>
 800087c:	e7ee      	b.n	800085c <main+0xc>
  if ( timeout < 0 )
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	da01      	bge.n	8000888 <main+0x38>
  {
  Error_Handler();
 8000884:	f000 fb04 	bl	8000e90 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fd20 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f85c 	bl	8000948 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000890:	f000 f8fa 	bl	8000a88 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <main+0xdc>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	4a24      	ldr	r2, [pc, #144]	; (800092c <main+0xdc>)
 800089c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <main+0xdc>)
 80008a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f001 f81c 	bl	80018f0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f001 f832 	bl	8001924 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c4:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <main+0xdc>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d106      	bne.n	80008e0 <main+0x90>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dd01      	ble.n	80008e0 <main+0x90>
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <main+0x92>
 80008e0:	2300      	movs	r3, #0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d000      	beq.n	80008e8 <main+0x98>
 80008e6:	e7ee      	b.n	80008c6 <main+0x76>
if ( timeout < 0 )
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	da01      	bge.n	80008f2 <main+0xa2>
{
Error_Handler();
 80008ee:	f000 facf 	bl	8000e90 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f000 f9f7 	bl	8000ce4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80008f6:	f000 f995 	bl	8000c24 <_ZL19MX_USART1_UART_Initv>
  MX_I2C1_Init();
 80008fa:	f000 f8f7 	bl	8000aec <_ZL12MX_I2C1_Initv>
  MX_I2C4_Init();
 80008fe:	f000 f943 	bl	8000b88 <_ZL12MX_I2C4_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000902:	f005 fb07 	bl	8005f14 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <main+0xe0>)
 8000908:	2100      	movs	r1, #0
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <main+0xe4>)
 800090c:	f005 fb4c 	bl	8005fa8 <osThreadNew>
 8000910:	4603      	mov	r3, r0
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <main+0xe8>)
 8000914:	6013      	str	r3, [r2, #0]

  /* creation of NTagTask */
  NTagTaskHandle = osThreadNew(StartNTagTask, NULL, &NTagTask_attributes);
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <main+0xec>)
 8000918:	2100      	movs	r1, #0
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <main+0xf0>)
 800091c:	f005 fb44 	bl	8005fa8 <osThreadNew>
 8000920:	4603      	mov	r3, r0
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <main+0xf4>)
 8000924:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000926:	f005 fb19 	bl	8005f5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092a:	e7fe      	b.n	800092a <main+0xda>
 800092c:	58024400 	.word	0x58024400
 8000930:	08009490 	.word	0x08009490
 8000934:	08000ded 	.word	0x08000ded
 8000938:	240001bc 	.word	0x240001bc
 800093c:	080094b4 	.word	0x080094b4
 8000940:	08000dfd 	.word	0x08000dfd
 8000944:	240001c0 	.word	0x240001c0

08000948 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	; 0x70
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	224c      	movs	r2, #76	; 0x4c
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f008 f892 	bl	8008a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2220      	movs	r2, #32
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f008 f88c 	bl	8008a80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000968:	2004      	movs	r0, #4
 800096a:	f001 fa5f 	bl	8001e2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <_Z18SystemClock_Configv+0x134>)
 8000974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000976:	4a41      	ldr	r2, [pc, #260]	; (8000a7c <_Z18SystemClock_Configv+0x134>)
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800097e:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <_Z18SystemClock_Configv+0x134>)
 8000980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <_Z18SystemClock_Configv+0x138>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <_Z18SystemClock_Configv+0x138>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <_Z18SystemClock_Configv+0x138>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a0:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <_Z18SystemClock_Configv+0x138>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ac:	bf14      	ite	ne
 80009ae:	2301      	movne	r3, #1
 80009b0:	2300      	moveq	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d000      	beq.n	80009ba <_Z18SystemClock_Configv+0x72>
 80009b8:	e7f2      	b.n	80009a0 <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <_Z18SystemClock_Configv+0x13c>)
 80009bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009be:	f023 0303 	bic.w	r3, r3, #3
 80009c2:	4a30      	ldr	r2, [pc, #192]	; (8000a84 <_Z18SystemClock_Configv+0x13c>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80009ca:	230b      	movs	r3, #11
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 80009f4:	230d      	movs	r3, #13
 80009f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009fc:	230c      	movs	r3, #12
 80009fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fa67 	bl	8001ee0 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf14      	ite	ne
 8000a18:	2301      	movne	r3, #1
 8000a1a:	2300      	moveq	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8000a22:	f000 fa35 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	233f      	movs	r3, #63	; 0x3f
 8000a28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a32:	2308      	movs	r3, #8
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fe75 	bl	800273c <HAL_RCC_ClockConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <_Z18SystemClock_Configv+0x11e>
  {
    Error_Handler();
 8000a62:	f000 fa15 	bl	8000e90 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000a66:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f002 f81b 	bl	8002aa8 <HAL_RCC_MCOConfig>
}
 8000a72:	bf00      	nop
 8000a74:	3770      	adds	r7, #112	; 0x70
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	58000400 	.word	0x58000400
 8000a80:	58024800 	.word	0x58024800
 8000a84:	58024400 	.word	0x58024400

08000a88 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0b0      	sub	sp, #192	; 0xc0
 8000a8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	22c0      	movs	r2, #192	; 0xc0
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f007 fff3 	bl	8008a80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a9e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ab4:	23c0      	movs	r3, #192	; 0xc0
 8000ab6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 fa6f 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf14      	ite	ne
 8000ad4:	2301      	movne	r3, #1
 8000ad6:	2300      	moveq	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 8000ade:	f000 f9d7 	bl	8000e90 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	37c0      	adds	r7, #192	; 0xc0
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000af2:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <_ZL12MX_I2C1_Initv+0x94>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000af8:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <_ZL12MX_I2C1_Initv+0x98>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b26:	4815      	ldr	r0, [pc, #84]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b28:	f000 ff10 	bl	800194c <HAL_I2C_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bf14      	ite	ne
 8000b32:	2301      	movne	r3, #1
 8000b34:	2300      	moveq	r3, #0
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000b3c:	f000 f9a8 	bl	8000e90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b44:	f001 f8da 	bl	8001cfc <HAL_I2CEx_ConfigAnalogFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf14      	ite	ne
 8000b4e:	2301      	movne	r3, #1
 8000b50:	2300      	moveq	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000b58:	f000 f99a 	bl	8000e90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <_ZL12MX_I2C1_Initv+0x90>)
 8000b60:	f001 f917 	bl	8001d92 <HAL_I2CEx_ConfigDigitalFilter>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bf14      	ite	ne
 8000b6a:	2301      	movne	r3, #1
 8000b6c:	2300      	moveq	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000b74:	f000 f98c 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000094 	.word	0x24000094
 8000b80:	40005400 	.word	0x40005400
 8000b84:	10c0ecff 	.word	0x10c0ecff

08000b88 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <_ZL12MX_I2C4_Initv+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <_ZL12MX_I2C4_Initv+0x98>)
 8000b96:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000bc2:	4815      	ldr	r0, [pc, #84]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000bc4:	f000 fec2 	bl	800194c <HAL_I2C_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8000bd8:	f000 f95a 	bl	8000e90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	480e      	ldr	r0, [pc, #56]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000be0:	f001 f88c 	bl	8001cfc <HAL_I2CEx_ConfigAnalogFilter>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bf14      	ite	ne
 8000bea:	2301      	movne	r3, #1
 8000bec:	2300      	moveq	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8000bf4:	f000 f94c 	bl	8000e90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <_ZL12MX_I2C4_Initv+0x90>)
 8000bfc:	f001 f8c9 	bl	8001d92 <HAL_I2CEx_ConfigDigitalFilter>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f93e 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	240000e0 	.word	0x240000e0
 8000c1c:	58001c00 	.word	0x58001c00
 8000c20:	10c0ecff 	.word	0x10c0ecff

08000c24 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6c:	481b      	ldr	r0, [pc, #108]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c6e:	f004 f807 	bl	8004c80 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bf14      	ite	ne
 8000c78:	2301      	movne	r3, #1
 8000c7a:	2300      	moveq	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8000c82:	f000 f905 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4814      	ldr	r0, [pc, #80]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c8a:	f005 f835 	bl	8005cf8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf14      	ite	ne
 8000c94:	2301      	movne	r3, #1
 8000c96:	2300      	moveq	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8000c9e:	f000 f8f7 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ca6:	f005 f865 	bl	8005d74 <HAL_UARTEx_SetRxFifoThreshold>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bf14      	ite	ne
 8000cb0:	2301      	movne	r3, #1
 8000cb2:	2300      	moveq	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8000cba:	f000 f8e9 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000cc0:	f004 ffe1 	bl	8005c86 <HAL_UARTEx_DisableFifoMode>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8000cd4:	f000 f8dc 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2400012c 	.word	0x2400012c
 8000ce0:	40011000 	.word	0x40011000

08000ce4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2108      	movs	r1, #8
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <_ZL12MX_GPIO_Initv+0x100>)
 8000d96:	f000 fd91 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <_ZL12MX_GPIO_Initv+0x100>)
 8000db2:	f000 fbd3 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <_ZL12MX_GPIO_Initv+0x104>)
 8000dd4:	f000 fbc2 	bl	800155c <HAL_GPIO_Init>

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020c00 	.word	0x58020c00
 8000de8:	58020000 	.word	0x58020000

08000dec <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f005 f969 	bl	80060cc <osDelay>
 8000dfa:	e7fb      	b.n	8000df4 <_Z16StartDefaultTaskPv+0x8>

08000dfc <_Z13StartNTagTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNTagTask */
void StartNTagTask(void *argument)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNTagTask */
	NTagRC522 ntag;
		ntag.SetI2CHandle(&hi2c4);
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4915      	ldr	r1, [pc, #84]	; (8000e60 <_Z13StartNTagTaskPv+0x64>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fcd8 	bl	80007c0 <_ZN9NTagRC52212SetI2CHandleEP19__I2C_HandleTypeDef>
		vprintf("C\r\n");
 8000e10:	4814      	ldr	r0, [pc, #80]	; (8000e64 <_Z13StartNTagTaskPv+0x68>)
 8000e12:	f7ff fd0b 	bl	800082c <_Z7vprintfPKcz>
		osDelay(10000);
 8000e16:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e1a:	f005 f957 	bl	80060cc <osDelay>
	  for(;;)
	  {
		  //uint8_t test = ntag.SanityCheck(0x28);
		  //vprintf("Version: %d\r\n", test);
		  uint8_t read_result, ret;
		  uint8_t versreg = 0x37;
 8000e1e:	2337      	movs	r3, #55	; 0x37
 8000e20:	73bb      	strb	r3, [r7, #14]
		  for(uint8_t i2c_addr = 0; i2c_addr < 0xEF; i2c_addr++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2bee      	cmp	r3, #238	; 0xee
 8000e2a:	d8f8      	bhi.n	8000e1e <_Z13StartNTagTaskPv+0x22>
			  //ret = HAL_I2C_Master_Transmit(&hi2c4, i2c_addr, &versreg, 1, HAL_MAX_DELAY);
		  	  //if(ret == HAL_OK)
		  	  //	  vprintf("ACK received at %d\n\r", i2c_addr);

		  	  ret = HAL_I2C_IsDeviceReady (&hi2c4, i2c_addr, 5, HAL_MAX_DELAY);
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	b299      	uxth	r1, r3
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	2205      	movs	r2, #5
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <_Z13StartNTagTaskPv+0x64>)
 8000e38:	f000 fe18 	bl	8001a6c <HAL_I2C_IsDeviceReady>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	737b      	strb	r3, [r7, #13]
		  	  if(ret == HAL_OK)
 8000e40:	7b7b      	ldrb	r3, [r7, #13]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d104      	bne.n	8000e50 <_Z13StartNTagTaskPv+0x54>
		  			  	  	  vprintf("Dev ready at %d\n\r", i2c_addr);
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <_Z13StartNTagTaskPv+0x6c>)
 8000e4c:	f7ff fcee 	bl	800082c <_Z7vprintfPKcz>
		  	  osDelay(10);
 8000e50:	200a      	movs	r0, #10
 8000e52:	f005 f93b 	bl	80060cc <osDelay>
		  for(uint8_t i2c_addr = 0; i2c_addr < 0xEF; i2c_addr++) {
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e7e3      	b.n	8000e26 <_Z13StartNTagTaskPv+0x2a>
 8000e5e:	bf00      	nop
 8000e60:	240000e0 	.word	0x240000e0
 8000e64:	08009450 	.word	0x08009450
 8000e68:	08009454 	.word	0x08009454

08000e6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7e:	f000 fa61 	bl	8001344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010000 	.word	0x40010000

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_MspInit+0x38>)
 8000ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_MspInit+0x38>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_MspInit+0x38>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f06f 0001 	mvn.w	r0, #1
 8000ec8:	f000 fb20 	bl	800150c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0bc      	sub	sp, #240	; 0xf0
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	22c0      	movs	r2, #192	; 0xc0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f007 fdc1 	bl	8008a80 <memset>
  if(hi2c->Instance==I2C1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a49      	ldr	r2, [pc, #292]	; (8001028 <HAL_I2C_MspInit+0x150>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d143      	bne.n	8000f90 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 f848 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f22:	f7ff ffb5 	bl	8000e90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b41      	ldr	r3, [pc, #260]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	4a3f      	ldr	r2, [pc, #252]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f36:	4b3d      	ldr	r3, [pc, #244]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f44:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4831      	ldr	r0, [pc, #196]	; (8001030 <HAL_I2C_MspInit+0x158>)
 8000f6c:	f000 faf6 	bl	800155c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000f72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f76:	4a2d      	ldr	r2, [pc, #180]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000f8e:	e047      	b.n	8001020 <HAL_I2C_MspInit+0x148>
  else if(hi2c->Instance==I2C4)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <HAL_I2C_MspInit+0x15c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d142      	bne.n	8001020 <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 ffff 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8000fb4:	f7ff ff6c 	bl	8000e90 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_I2C_MspInit+0x154>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	2312      	movs	r3, #18
 8000fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fea:	2301      	movs	r3, #1
 8000fec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480e      	ldr	r0, [pc, #56]	; (8001038 <HAL_I2C_MspInit+0x160>)
 8000ffe:	f000 faad 	bl	800155c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_I2C_MspInit+0x154>)
 8001004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001008:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_I2C_MspInit+0x154>)
 800100a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_I2C_MspInit+0x154>)
 8001014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	37f0      	adds	r7, #240	; 0xf0
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40005400 	.word	0x40005400
 800102c:	58024400 	.word	0x58024400
 8001030:	58020400 	.word	0x58020400
 8001034:	58001c00 	.word	0x58001c00
 8001038:	58020c00 	.word	0x58020c00

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ba      	sub	sp, #232	; 0xe8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	22c0      	movs	r2, #192	; 0xc0
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f007 fd0f 	bl	8008a80 <memset>
  if(huart->Instance==USART1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a25      	ldr	r2, [pc, #148]	; (80010fc <HAL_UART_MspInit+0xc0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d142      	bne.n	80010f2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f001 ff96 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001086:	f7ff ff03 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_UART_MspInit+0xc4>)
 800108c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_UART_MspInit+0xc4>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_MspInit+0xc4>)
 800109c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspInit+0xc4>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspInit+0xc4>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_UART_MspInit+0xc4>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80010c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010e0:	2307      	movs	r3, #7
 80010e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_UART_MspInit+0xc8>)
 80010ee:	f000 fa35 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	37e8      	adds	r7, #232	; 0xe8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40011000 	.word	0x40011000
 8001100:	58024400 	.word	0x58024400
 8001104:	58020000 	.word	0x58020000

08001108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d844      	bhi.n	80011a0 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001116:	2200      	movs	r2, #0
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	2019      	movs	r0, #25
 800111c:	f000 f9f6 	bl	800150c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001120:	2019      	movs	r0, #25
 8001122:	f000 fa0d 	bl	8001540 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001126:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_InitTick+0xb0>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_InitTick+0xb4>)
 800112e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <HAL_InitTick+0xb4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_InitTick+0xb4>)
 800113e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114a:	f107 020c 	add.w	r2, r7, #12
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fee7 	bl	8002f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800115a:	f001 fecf 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 800115e:	4603      	mov	r3, r0
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <HAL_InitTick+0xb8>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9b      	lsrs	r3, r3, #18
 800116e:	3b01      	subs	r3, #1
 8001170:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_InitTick+0xbc>)
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_InitTick+0xc0>)
 8001176:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0xbc>)
 800117a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800117e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001180:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_InitTick+0xbc>)
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_InitTick+0xbc>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_InitTick+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <HAL_InitTick+0xbc>)
 8001194:	f003 fa9a 	bl	80046cc <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d107      	bne.n	80011ae <HAL_InitTick+0xa6>
 800119e:	e001      	b.n	80011a4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e005      	b.n	80011b0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <HAL_InitTick+0xbc>)
 80011a6:	f003 faf3 	bl	8004790 <HAL_TIM_Base_Start_IT>
 80011aa:	4603      	mov	r3, r0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3738      	adds	r7, #56	; 0x38
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	24000008 	.word	0x24000008
 80011bc:	58024400 	.word	0x58024400
 80011c0:	431bde83 	.word	0x431bde83
 80011c4:	240001c4 	.word	0x240001c4
 80011c8:	40010000 	.word	0x40010000

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM1_UP_IRQHandler+0x10>)
 80011fe:	f003 fb3f 	bl	8004880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	240001c4 	.word	0x240001c4

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f007 fbe6 	bl	8008a0c <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	24080000 	.word	0x24080000
 800126c:	00000400 	.word	0x00000400
 8001270:	24000210 	.word	0x24000210
 8001274:	24004c38 	.word	0x24004c38

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800127c:	f7ff fa0a 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f007 fbb7 	bl	8008a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fad1 	bl	8000850 <main>
  bx  lr
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012b8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80012bc:	080095a4 	.word	0x080095a4
  ldr r2, =_sbss
 80012c0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80012c4:	24004c38 	.word	0x24004c38

080012c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC3_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d2:	2003      	movs	r0, #3
 80012d4:	f000 f90f 	bl	80014f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012d8:	f001 fc50 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_Init+0x68>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	4913      	ldr	r1, [pc, #76]	; (8001338 <HAL_Init+0x6c>)
 80012ea:	5ccb      	ldrb	r3, [r1, r3]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_Init+0x68>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_Init+0x6c>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_Init+0x70>)
 800130e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <HAL_Init+0x74>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001316:	200f      	movs	r0, #15
 8001318:	f7ff fef6 	bl	8001108 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e002      	b.n	800132c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001326:	f7ff fdb9 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	58024400 	.word	0x58024400
 8001338:	08009480 	.word	0x08009480
 800133c:	24000004 	.word	0x24000004
 8001340:	24000000 	.word	0x24000000

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2400000c 	.word	0x2400000c
 8001368:	24000214 	.word	0x24000214

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	24000214 	.word	0x24000214

08001384 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetREVID+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0c1b      	lsrs	r3, r3, #16
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	5c001000 	.word	0x5c001000

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0000 	.word	0x05fa0000

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff4c 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800151a:	f7ff ff63 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 800151e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	6978      	ldr	r0, [r7, #20]
 8001526:	f7ff ffb3 	bl	8001490 <NVIC_EncodePriority>
 800152a:	4602      	mov	r2, r0
 800152c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff82 	bl	800143c <__NVIC_SetPriority>
}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff56 	bl	8001400 <__NVIC_EnableIRQ>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800156a:	4b89      	ldr	r3, [pc, #548]	; (8001790 <HAL_GPIO_Init+0x234>)
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800156e:	e194      	b.n	800189a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8186 	beq.w	8001894 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x44>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 0201 	and.w	r2, r3, #1
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d017      	beq.n	800163e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d123      	bne.n	8001692 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	69b9      	ldr	r1, [r7, #24]
 800168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0203 	and.w	r2, r3, #3
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80e0 	beq.w	8001894 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_GPIO_Init+0x238>)
 80016d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016da:	4a2e      	ldr	r2, [pc, #184]	; (8001794 <HAL_GPIO_Init+0x238>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_GPIO_Init+0x238>)
 80016e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f2:	4a29      	ldr	r2, [pc, #164]	; (8001798 <HAL_GPIO_Init+0x23c>)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a20      	ldr	r2, [pc, #128]	; (800179c <HAL_GPIO_Init+0x240>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d052      	beq.n	80017c4 <HAL_GPIO_Init+0x268>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <HAL_GPIO_Init+0x244>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d031      	beq.n	800178a <HAL_GPIO_Init+0x22e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_GPIO_Init+0x248>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02b      	beq.n	8001786 <HAL_GPIO_Init+0x22a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_GPIO_Init+0x24c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d025      	beq.n	8001782 <HAL_GPIO_Init+0x226>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <HAL_GPIO_Init+0x250>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01f      	beq.n	800177e <HAL_GPIO_Init+0x222>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_GPIO_Init+0x254>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d019      	beq.n	800177a <HAL_GPIO_Init+0x21e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <HAL_GPIO_Init+0x258>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0x21a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <HAL_GPIO_Init+0x25c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00d      	beq.n	8001772 <HAL_GPIO_Init+0x216>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <HAL_GPIO_Init+0x260>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d007      	beq.n	800176e <HAL_GPIO_Init+0x212>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_GPIO_Init+0x264>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_GPIO_Init+0x20e>
 8001766:	2309      	movs	r3, #9
 8001768:	e02d      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 800176a:	230a      	movs	r3, #10
 800176c:	e02b      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 800176e:	2308      	movs	r3, #8
 8001770:	e029      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 8001772:	2307      	movs	r3, #7
 8001774:	e027      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 8001776:	2306      	movs	r3, #6
 8001778:	e025      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 800177a:	2305      	movs	r3, #5
 800177c:	e023      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 800177e:	2304      	movs	r3, #4
 8001780:	e021      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 8001782:	2303      	movs	r3, #3
 8001784:	e01f      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 8001786:	2302      	movs	r3, #2
 8001788:	e01d      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 800178a:	2301      	movs	r3, #1
 800178c:	e01b      	b.n	80017c6 <HAL_GPIO_Init+0x26a>
 800178e:	bf00      	nop
 8001790:	58000080 	.word	0x58000080
 8001794:	58024400 	.word	0x58024400
 8001798:	58000400 	.word	0x58000400
 800179c:	58020000 	.word	0x58020000
 80017a0:	58020400 	.word	0x58020400
 80017a4:	58020800 	.word	0x58020800
 80017a8:	58020c00 	.word	0x58020c00
 80017ac:	58021000 	.word	0x58021000
 80017b0:	58021400 	.word	0x58021400
 80017b4:	58021800 	.word	0x58021800
 80017b8:	58021c00 	.word	0x58021c00
 80017bc:	58022000 	.word	0x58022000
 80017c0:	58022400 	.word	0x58022400
 80017c4:	2300      	movs	r3, #0
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	f002 0203 	and.w	r2, r2, #3
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d6:	4938      	ldr	r1, [pc, #224]	; (80018b8 <HAL_GPIO_Init+0x35c>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800180a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	3301      	adds	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f ae63 	bne.w	8001570 <HAL_GPIO_Init+0x14>
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3724      	adds	r7, #36	; 0x24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	58000400 	.word	0x58000400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80018d8:	e003      	b.n	80018e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	619a      	str	r2, [r3, #24]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_HSEM_FastTake+0x2c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3320      	adds	r3, #32
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_HSEM_FastTake+0x30>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	58026400 	.word	0x58026400
 8001920:	80000300 	.word	0x80000300

08001924 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800192e:	4906      	ldr	r1, [pc, #24]	; (8001948 <HAL_HSEM_Release+0x24>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	58026400 	.word	0x58026400

0800194c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07f      	b.n	8001a5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fab0 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2224      	movs	r2, #36	; 0x24
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800199c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d104      	bne.n	80019e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_I2C_Init+0x11c>)
 80019f2:	430b      	orrs	r3, r1
 80019f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69d9      	ldr	r1, [r3, #28]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1a      	ldr	r2, [r3, #32]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	02008000 	.word	0x02008000

08001a6c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	f040 80ef 	bne.w	8001c6c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9c:	d101      	bne.n	8001aa2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e0e5      	b.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_I2C_IsDeviceReady+0x44>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0de      	b.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <HAL_I2C_IsDeviceReady+0x6e>
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_I2C_IsDeviceReady+0x20c>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	e004      	b.n	8001ae4 <HAL_I2C_IsDeviceReady+0x78>
 8001ada:	897b      	ldrh	r3, [r7, #10]
 8001adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001aea:	f7ff fc3f 	bl	800136c <HAL_GetTick>
 8001aee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b1c:	e034      	b.n	8001b88 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d01a      	beq.n	8001b5c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b26:	f7ff fc21 	bl	800136c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d302      	bcc.n	8001b3c <HAL_I2C_IsDeviceReady+0xd0>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10f      	bne.n	8001b5c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	f043 0220 	orr.w	r2, r3, #32
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e088      	b.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b88:	7ffb      	ldrb	r3, [r7, #31]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d102      	bne.n	8001b94 <HAL_I2C_IsDeviceReady+0x128>
 8001b8e:	7fbb      	ldrb	r3, [r7, #30]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0c4      	beq.n	8001b1e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d01a      	beq.n	8001bd8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2120      	movs	r1, #32
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f865 	bl	8001c7c <I2C_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e058      	b.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e04a      	b.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	2120      	movs	r1, #32
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f84a 	bl	8001c7c <I2C_WaitOnFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e03d      	b.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d118      	bne.n	8001c3c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c18:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2120      	movs	r1, #32
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f829 	bl	8001c7c <I2C_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e01c      	b.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	f63f af3d 	bhi.w	8001ac6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001c6c:	2302      	movs	r3, #2
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	02002000 	.word	0x02002000

08001c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c8c:	e022      	b.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d01e      	beq.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c96:	f7ff fb69 	bl	800136c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d302      	bcc.n	8001cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d113      	bne.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e00f      	b.n	8001cf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d0cd      	beq.n	8001c8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d138      	bne.n	8001d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e032      	b.n	8001d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2224      	movs	r2, #36	; 0x24
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d139      	bne.n	8001e1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e033      	b.n	8001e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2224      	movs	r2, #36	; 0x24
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001de4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_PWREx_ConfigSupply+0xb0>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	2b06      	cmp	r3, #6
 8001e3e:	d00a      	beq.n	8001e56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e40:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_PWREx_ConfigSupply+0xb0>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d001      	beq.n	8001e52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e040      	b.n	8001ed4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e03e      	b.n	8001ed4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_PWREx_ConfigSupply+0xb0>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e5e:	491f      	ldr	r1, [pc, #124]	; (8001edc <HAL_PWREx_ConfigSupply+0xb0>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e66:	f7ff fa81 	bl	800136c <HAL_GetTick>
 8001e6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e6c:	e009      	b.n	8001e82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e6e:	f7ff fa7d 	bl	800136c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e7c:	d901      	bls.n	8001e82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e028      	b.n	8001ed4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_PWREx_ConfigSupply+0xb0>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b1e      	cmp	r3, #30
 8001e94:	d008      	beq.n	8001ea8 <HAL_PWREx_ConfigSupply+0x7c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b2e      	cmp	r3, #46	; 0x2e
 8001e9a:	d005      	beq.n	8001ea8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b1d      	cmp	r3, #29
 8001ea0:	d002      	beq.n	8001ea8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b2d      	cmp	r3, #45	; 0x2d
 8001ea6:	d114      	bne.n	8001ed2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ea8:	f7ff fa60 	bl	800136c <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001eae:	e009      	b.n	8001ec4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001eb0:	f7ff fa5c 	bl	800136c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ebe:	d901      	bls.n	8001ec4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e007      	b.n	8001ed4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_PWREx_ConfigSupply+0xb0>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed0:	d1ee      	bne.n	8001eb0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	58024800 	.word	0x58024800

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f000 bc1d 	b.w	800272e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8087 	beq.w	8002010 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f02:	4b99      	ldr	r3, [pc, #612]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f0c:	4b96      	ldr	r3, [pc, #600]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d007      	beq.n	8001f28 <HAL_RCC_OscConfig+0x48>
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	2b18      	cmp	r3, #24
 8001f1c:	d110      	bne.n	8001f40 <HAL_RCC_OscConfig+0x60>
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d10b      	bne.n	8001f40 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	4b8f      	ldr	r3, [pc, #572]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d06c      	beq.n	800200e <HAL_RCC_OscConfig+0x12e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d168      	bne.n	800200e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e3f6      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d106      	bne.n	8001f58 <HAL_RCC_OscConfig+0x78>
 8001f4a:	4b87      	ldr	r3, [pc, #540]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a86      	ldr	r2, [pc, #536]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e02e      	b.n	8001fb6 <HAL_RCC_OscConfig+0xd6>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10c      	bne.n	8001f7a <HAL_RCC_OscConfig+0x9a>
 8001f60:	4b81      	ldr	r3, [pc, #516]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a80      	ldr	r2, [pc, #512]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b7e      	ldr	r3, [pc, #504]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a7d      	ldr	r2, [pc, #500]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e01d      	b.n	8001fb6 <HAL_RCC_OscConfig+0xd6>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0xbe>
 8001f84:	4b78      	ldr	r3, [pc, #480]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a77      	ldr	r2, [pc, #476]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b75      	ldr	r3, [pc, #468]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a74      	ldr	r2, [pc, #464]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0xd6>
 8001f9e:	4b72      	ldr	r3, [pc, #456]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a71      	ldr	r2, [pc, #452]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b6f      	ldr	r3, [pc, #444]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6e      	ldr	r2, [pc, #440]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d013      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f9d5 	bl	800136c <HAL_GetTick>
 8001fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc6:	f7ff f9d1 	bl	800136c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e3aa      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fd8:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0xe6>
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f9c1 	bl	800136c <HAL_GetTick>
 8001fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fee:	f7ff f9bd 	bl	800136c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e396      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002000:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x10e>
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80cb 	beq.w	80021b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201e:	4b52      	ldr	r3, [pc, #328]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002026:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002028:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_RCC_OscConfig+0x164>
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	2b18      	cmp	r3, #24
 8002038:	d156      	bne.n	80020e8 <HAL_RCC_OscConfig+0x208>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d151      	bne.n	80020e8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002044:	4b48      	ldr	r3, [pc, #288]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_OscConfig+0x17c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e368      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 0219 	bic.w	r2, r3, #25
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	493f      	ldr	r1, [pc, #252]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800206e:	f7ff f97d 	bl	800136c <HAL_GetTick>
 8002072:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff f979 	bl	800136c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e352      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002094:	f7ff f976 	bl	8001384 <HAL_GetREVID>
 8002098:	4603      	mov	r3, r0
 800209a:	f241 0203 	movw	r2, #4099	; 0x1003
 800209e:	4293      	cmp	r3, r2
 80020a0:	d817      	bhi.n	80020d2 <HAL_RCC_OscConfig+0x1f2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b40      	cmp	r3, #64	; 0x40
 80020a8:	d108      	bne.n	80020bc <HAL_RCC_OscConfig+0x1dc>
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80020b2:	4a2d      	ldr	r2, [pc, #180]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ba:	e07b      	b.n	80021b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	031b      	lsls	r3, r3, #12
 80020ca:	4927      	ldr	r1, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d0:	e070      	b.n	80021b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d2:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	061b      	lsls	r3, r3, #24
 80020e0:	4921      	ldr	r1, [pc, #132]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e6:	e065      	b.n	80021b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d048      	beq.n	8002182 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020f0:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 0219 	bic.w	r2, r3, #25
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	491a      	ldr	r1, [pc, #104]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7ff f933 	bl	800136c <HAL_GetTick>
 8002106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff f92f 	bl	800136c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e308      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	f7ff f92c 	bl	8001384 <HAL_GetREVID>
 800212c:	4603      	mov	r3, r0
 800212e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002132:	4293      	cmp	r3, r2
 8002134:	d81a      	bhi.n	800216c <HAL_RCC_OscConfig+0x28c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b40      	cmp	r3, #64	; 0x40
 800213c:	d108      	bne.n	8002150 <HAL_RCC_OscConfig+0x270>
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	6053      	str	r3, [r2, #4]
 800214e:	e031      	b.n	80021b4 <HAL_RCC_OscConfig+0x2d4>
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	031b      	lsls	r3, r3, #12
 800215e:	4902      	ldr	r1, [pc, #8]	; (8002168 <HAL_RCC_OscConfig+0x288>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
 8002164:	e026      	b.n	80021b4 <HAL_RCC_OscConfig+0x2d4>
 8002166:	bf00      	nop
 8002168:	58024400 	.word	0x58024400
 800216c:	4b9a      	ldr	r3, [pc, #616]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	4997      	ldr	r1, [pc, #604]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e018      	b.n	80021b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002182:	4b95      	ldr	r3, [pc, #596]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a94      	ldr	r2, [pc, #592]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff f8ed 	bl	800136c <HAL_GetTick>
 8002192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff f8e9 	bl	800136c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e2c2      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021a8:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a9 	beq.w	8002314 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c2:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021cc:	4b82      	ldr	r3, [pc, #520]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d007      	beq.n	80021e8 <HAL_RCC_OscConfig+0x308>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b18      	cmp	r3, #24
 80021dc:	d13a      	bne.n	8002254 <HAL_RCC_OscConfig+0x374>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d135      	bne.n	8002254 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021e8:	4b7b      	ldr	r3, [pc, #492]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_OscConfig+0x320>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e296      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002200:	f7ff f8c0 	bl	8001384 <HAL_GetREVID>
 8002204:	4603      	mov	r3, r0
 8002206:	f241 0203 	movw	r2, #4099	; 0x1003
 800220a:	4293      	cmp	r3, r2
 800220c:	d817      	bhi.n	800223e <HAL_RCC_OscConfig+0x35e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	2b20      	cmp	r3, #32
 8002214:	d108      	bne.n	8002228 <HAL_RCC_OscConfig+0x348>
 8002216:	4b70      	ldr	r3, [pc, #448]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800221e:	4a6e      	ldr	r2, [pc, #440]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002220:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002224:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002226:	e075      	b.n	8002314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002228:	4b6b      	ldr	r3, [pc, #428]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	069b      	lsls	r3, r3, #26
 8002236:	4968      	ldr	r1, [pc, #416]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800223c:	e06a      	b.n	8002314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800223e:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	061b      	lsls	r3, r3, #24
 800224c:	4962      	ldr	r1, [pc, #392]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002252:	e05f      	b.n	8002314 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d042      	beq.n	80022e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800225c:	4b5e      	ldr	r3, [pc, #376]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a5d      	ldr	r2, [pc, #372]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff f880 	bl	800136c <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002270:	f7ff f87c 	bl	800136c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e255      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002282:	4b55      	ldr	r3, [pc, #340]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800228e:	f7ff f879 	bl	8001384 <HAL_GetREVID>
 8002292:	4603      	mov	r3, r0
 8002294:	f241 0203 	movw	r2, #4099	; 0x1003
 8002298:	4293      	cmp	r3, r2
 800229a:	d817      	bhi.n	80022cc <HAL_RCC_OscConfig+0x3ec>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d108      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3d6>
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022ac:	4a4a      	ldr	r2, [pc, #296]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80022ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022b2:	6053      	str	r3, [r2, #4]
 80022b4:	e02e      	b.n	8002314 <HAL_RCC_OscConfig+0x434>
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	069b      	lsls	r3, r3, #26
 80022c4:	4944      	ldr	r1, [pc, #272]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e023      	b.n	8002314 <HAL_RCC_OscConfig+0x434>
 80022cc:	4b42      	ldr	r3, [pc, #264]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	493f      	ldr	r1, [pc, #252]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
 80022e0:	e018      	b.n	8002314 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80022e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff f83d 	bl	800136c <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022f6:	f7ff f839 	bl	800136c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e212      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002308:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d036      	beq.n	800238e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d019      	beq.n	800235c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7ff f81a 	bl	800136c <HAL_GetTick>
 8002338:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233c:	f7ff f816 	bl	800136c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1ef      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x45c>
 800235a:	e018      	b.n	800238e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7ff f800 	bl	800136c <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002370:	f7fe fffc 	bl	800136c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1d5      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d039      	beq.n	800240e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01c      	beq.n	80023dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80023a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023ae:	f7fe ffdd 	bl	800136c <HAL_GetTick>
 80023b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023b6:	f7fe ffd9 	bl	800136c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1b2      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_RCC_OscConfig+0x4f8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x4d6>
 80023d4:	e01b      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
 80023d6:	bf00      	nop
 80023d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023dc:	4b9b      	ldr	r3, [pc, #620]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a9a      	ldr	r2, [pc, #616]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80023e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023e8:	f7fe ffc0 	bl	800136c <HAL_GetTick>
 80023ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023f0:	f7fe ffbc 	bl	800136c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e195      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002402:	4b92      	ldr	r3, [pc, #584]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8081 	beq.w	800251e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800241c:	4b8c      	ldr	r3, [pc, #560]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a8b      	ldr	r2, [pc, #556]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002428:	f7fe ffa0 	bl	800136c <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002430:	f7fe ff9c 	bl	800136c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e175      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002442:	4b83      	ldr	r3, [pc, #524]	; (8002650 <HAL_RCC_OscConfig+0x770>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d106      	bne.n	8002464 <HAL_RCC_OscConfig+0x584>
 8002456:	4b7d      	ldr	r3, [pc, #500]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a7c      	ldr	r2, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6713      	str	r3, [r2, #112]	; 0x70
 8002462:	e02d      	b.n	80024c0 <HAL_RCC_OscConfig+0x5e0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x5a6>
 800246c:	4b77      	ldr	r3, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a76      	ldr	r2, [pc, #472]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	4b74      	ldr	r3, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a73      	ldr	r2, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800247e:	f023 0304 	bic.w	r3, r3, #4
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
 8002484:	e01c      	b.n	80024c0 <HAL_RCC_OscConfig+0x5e0>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b05      	cmp	r3, #5
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5c8>
 800248e:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a6e      	ldr	r2, [pc, #440]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
 800249a:	4b6c      	ldr	r3, [pc, #432]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a6b      	ldr	r2, [pc, #428]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0x5e0>
 80024a8:	4b68      	ldr	r3, [pc, #416]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	4a67      	ldr	r2, [pc, #412]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	6713      	str	r3, [r2, #112]	; 0x70
 80024b4:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a64      	ldr	r2, [pc, #400]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe ff50 	bl	800136c <HAL_GetTick>
 80024cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe ff4c 	bl	800136c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e123      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e6:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ee      	beq.n	80024d0 <HAL_RCC_OscConfig+0x5f0>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe ff3a 	bl	800136c <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe ff36 	bl	800136c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e10d      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002512:	4b4e      	ldr	r3, [pc, #312]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ee      	bne.n	80024fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8102 	beq.w	800272c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002528:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002530:	2b18      	cmp	r3, #24
 8002532:	f000 80bd 	beq.w	80026b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	2b02      	cmp	r3, #2
 800253c:	f040 809e 	bne.w	800267c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002540:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a41      	ldr	r2, [pc, #260]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe ff0e 	bl	800136c <HAL_GetTick>
 8002550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe ff0a 	bl	800136c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0e3      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002572:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002576:	4b37      	ldr	r3, [pc, #220]	; (8002654 <HAL_RCC_OscConfig+0x774>)
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	430a      	orrs	r2, r1
 8002586:	4931      	ldr	r1, [pc, #196]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	628b      	str	r3, [r1, #40]	; 0x28
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	3b01      	subs	r3, #1
 8002592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	3b01      	subs	r3, #1
 800259c:	025b      	lsls	r3, r3, #9
 800259e:	b29b      	uxth	r3, r3
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	3b01      	subs	r3, #1
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	3b01      	subs	r3, #1
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025bc:	4923      	ldr	r1, [pc, #140]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80025d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCC_OscConfig+0x778>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025da:	00d2      	lsls	r2, r2, #3
 80025dc:	491b      	ldr	r1, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	f023 020c 	bic.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4917      	ldr	r1, [pc, #92]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	f023 0202 	bic.w	r2, r3, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	4912      	ldr	r1, [pc, #72]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <HAL_RCC_OscConfig+0x76c>)
 800263c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe fe93 	bl	800136c <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002648:	e011      	b.n	800266e <HAL_RCC_OscConfig+0x78e>
 800264a:	bf00      	nop
 800264c:	58024400 	.word	0x58024400
 8002650:	58024800 	.word	0x58024800
 8002654:	fffffc0c 	.word	0xfffffc0c
 8002658:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fe86 	bl	800136c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e05f      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCC_OscConfig+0x858>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x77c>
 800267a:	e057      	b.n	800272c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <HAL_RCC_OscConfig+0x858>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <HAL_RCC_OscConfig+0x858>)
 8002682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fe70 	bl	800136c <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fe6c 	bl	800136c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e045      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026a2:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCC_OscConfig+0x858>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x7b0>
 80026ae:	e03d      	b.n	800272c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCC_OscConfig+0x858>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCC_OscConfig+0x858>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d031      	beq.n	8002728 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d12a      	bne.n	8002728 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d122      	bne.n	8002728 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d11a      	bne.n	8002728 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0a5b      	lsrs	r3, r3, #9
 80026f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d111      	bne.n	8002728 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0e1b      	lsrs	r3, r3, #24
 800271a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3730      	adds	r7, #48	; 0x30
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	58024400 	.word	0x58024400

0800273c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e19c      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b8a      	ldr	r3, [pc, #552]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b87      	ldr	r3, [pc, #540]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	4985      	ldr	r1, [pc, #532]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b83      	ldr	r3, [pc, #524]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e184      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002798:	429a      	cmp	r2, r3
 800279a:	d908      	bls.n	80027ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800279c:	4b78      	ldr	r3, [pc, #480]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4975      	ldr	r1, [pc, #468]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	4b70      	ldr	r3, [pc, #448]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d908      	bls.n	80027dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	496a      	ldr	r1, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d908      	bls.n	800280a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	495e      	ldr	r1, [pc, #376]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002806:	4313      	orrs	r3, r2
 8002808:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002822:	429a      	cmp	r2, r3
 8002824:	d908      	bls.n	8002838 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4953      	ldr	r1, [pc, #332]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002834:	4313      	orrs	r3, r2
 8002836:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	429a      	cmp	r2, r3
 8002852:	d908      	bls.n	8002866 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f023 020f 	bic.w	r2, r3, #15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4947      	ldr	r1, [pc, #284]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002862:	4313      	orrs	r3, r2
 8002864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d055      	beq.n	800291e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4940      	ldr	r1, [pc, #256]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002880:	4313      	orrs	r3, r2
 8002882:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d107      	bne.n	800289c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d121      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0f6      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d115      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0ea      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0de      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0d6      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f023 0207 	bic.w	r2, r3, #7
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4925      	ldr	r1, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7fe fd3d 	bl	800136c <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f4:	e00a      	b.n	800290c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f7fe fd39 	bl	800136c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0be      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	429a      	cmp	r2, r3
 800291c:	d1eb      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	429a      	cmp	r2, r3
 8002938:	d208      	bcs.n	800294c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f023 020f 	bic.w	r2, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002948:	4313      	orrs	r3, r2
 800294a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d214      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 020f 	bic.w	r2, r3, #15
 8002962:	4906      	ldr	r1, [pc, #24]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e086      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
 800297c:	52002000 	.word	0x52002000
 8002980:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800299c:	429a      	cmp	r2, r3
 800299e:	d208      	bcs.n	80029b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029a0:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4939      	ldr	r1, [pc, #228]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d010      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d208      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	492e      	ldr	r1, [pc, #184]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d208      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d208      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4917      	ldr	r1, [pc, #92]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a3c:	f000 f89e 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	4912      	ldr	r1, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x35c>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_RCC_ClockConfig+0x35c>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x360>)
 8002a72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x364>)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x368>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fb42 	bl	8001108 <HAL_InitTick>
 8002a84:	4603      	mov	r3, r0
 8002a86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400
 8002a98:	08009480 	.word	0x08009480
 8002a9c:	24000004 	.word	0x24000004
 8002aa0:	24000000 	.word	0x24000000
 8002aa4:	24000008 	.word	0x24000008

08002aa8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d12a      	bne.n	8002b10 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac0:	4a2b      	ldr	r2, [pc, #172]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aca:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4619      	mov	r1, r3
 8002af4:	481f      	ldr	r0, [pc, #124]	; (8002b74 <HAL_RCC_MCOConfig+0xcc>)
 8002af6:	f7fe fd31 	bl	800155c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	430b      	orrs	r3, r1
 8002b08:	4919      	ldr	r1, [pc, #100]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002b0e:	e02a      	b.n	8002b66 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b16:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	4619      	mov	r1, r3
 8002b4a:	480b      	ldr	r0, [pc, #44]	; (8002b78 <HAL_RCC_MCOConfig+0xd0>)
 8002b4c:	f7fe fd06 	bl	800155c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	01d9      	lsls	r1, r3, #7
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCC_MCOConfig+0xc8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	610b      	str	r3, [r1, #16]
}
 8002b66:	bf00      	nop
 8002b68:	3730      	adds	r7, #48	; 0x30
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	58024400 	.word	0x58024400
 8002b74:	58020000 	.word	0x58020000
 8002b78:	58020800 	.word	0x58020800

08002b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b82:	4bb3      	ldr	r3, [pc, #716]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b8a:	2b18      	cmp	r3, #24
 8002b8c:	f200 8155 	bhi.w	8002e3a <HAL_RCC_GetSysClockFreq+0x2be>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bfd 	.word	0x08002bfd
 8002b9c:	08002e3b 	.word	0x08002e3b
 8002ba0:	08002e3b 	.word	0x08002e3b
 8002ba4:	08002e3b 	.word	0x08002e3b
 8002ba8:	08002e3b 	.word	0x08002e3b
 8002bac:	08002e3b 	.word	0x08002e3b
 8002bb0:	08002e3b 	.word	0x08002e3b
 8002bb4:	08002e3b 	.word	0x08002e3b
 8002bb8:	08002c23 	.word	0x08002c23
 8002bbc:	08002e3b 	.word	0x08002e3b
 8002bc0:	08002e3b 	.word	0x08002e3b
 8002bc4:	08002e3b 	.word	0x08002e3b
 8002bc8:	08002e3b 	.word	0x08002e3b
 8002bcc:	08002e3b 	.word	0x08002e3b
 8002bd0:	08002e3b 	.word	0x08002e3b
 8002bd4:	08002e3b 	.word	0x08002e3b
 8002bd8:	08002c29 	.word	0x08002c29
 8002bdc:	08002e3b 	.word	0x08002e3b
 8002be0:	08002e3b 	.word	0x08002e3b
 8002be4:	08002e3b 	.word	0x08002e3b
 8002be8:	08002e3b 	.word	0x08002e3b
 8002bec:	08002e3b 	.word	0x08002e3b
 8002bf0:	08002e3b 	.word	0x08002e3b
 8002bf4:	08002e3b 	.word	0x08002e3b
 8002bf8:	08002c2f 	.word	0x08002c2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bfc:	4b94      	ldr	r3, [pc, #592]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c08:	4b91      	ldr	r3, [pc, #580]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	4a90      	ldr	r2, [pc, #576]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
 8002c18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002c1a:	e111      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c1c:	4b8d      	ldr	r3, [pc, #564]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c1e:	61bb      	str	r3, [r7, #24]
    break;
 8002c20:	e10e      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c22:	4b8d      	ldr	r3, [pc, #564]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c24:	61bb      	str	r3, [r7, #24]
    break;
 8002c26:	e10b      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002c28:	4b8c      	ldr	r3, [pc, #560]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c2a:	61bb      	str	r3, [r7, #24]
    break;
 8002c2c:	e108      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c2e:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c38:	4b85      	ldr	r3, [pc, #532]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c44:	4b82      	ldr	r3, [pc, #520]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c4e:	4b80      	ldr	r3, [pc, #512]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	08db      	lsrs	r3, r3, #3
 8002c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80e1 	beq.w	8002e34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	f000 8083 	beq.w	8002d80 <HAL_RCC_GetSysClockFreq+0x204>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	f200 80a1 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x114>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d056      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c8e:	e099      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02d      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	4a6b      	ldr	r2, [pc, #428]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc6:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002cf6:	e087      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d3a:	e065      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d4e:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d7e:	e043      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002da6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dc2:	e021      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e06:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	0a5b      	lsrs	r3, r3, #9
 8002e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e12:	3301      	adds	r3, #1
 8002e14:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e2c:	ee17 3a90 	vmov	r3, s15
 8002e30:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e3c:	61bb      	str	r3, [r7, #24]
    break;
 8002e3e:	bf00      	nop
  }

  return sysclockfreq;
 8002e40:	69bb      	ldr	r3, [r7, #24]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	58024400 	.word	0x58024400
 8002e54:	03d09000 	.word	0x03d09000
 8002e58:	003d0900 	.word	0x003d0900
 8002e5c:	017d7840 	.word	0x017d7840
 8002e60:	46000000 	.word	0x46000000
 8002e64:	4c742400 	.word	0x4c742400
 8002e68:	4a742400 	.word	0x4a742400
 8002e6c:	4bbebc20 	.word	0x4bbebc20

08002e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e76:	f7ff fe81 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490f      	ldr	r1, [pc, #60]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002eac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002eae:	4a07      	ldr	r2, [pc, #28]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	08009480 	.word	0x08009480
 8002ec8:	24000004 	.word	0x24000004
 8002ecc:	24000000 	.word	0x24000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ed4:	f7ff ffcc 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	08009480 	.word	0x08009480

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f00:	f7ff ffb6 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4904      	ldr	r1, [pc, #16]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	58024400 	.word	0x58024400
 8002f24:	08009480 	.word	0x08009480

08002f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	223f      	movs	r2, #63	; 0x3f
 8002f36:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0207 	and.w	r2, r3, #7
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 020f 	and.w	r2, r3, #15
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_GetClockConfig+0x80>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 020f 	and.w	r2, r3, #15
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	52002000 	.word	0x52002000

08002fac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d03f      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fd0:	d02a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fd6:	d824      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fdc:	d018      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe2:	d81e      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fec:	d007      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fee:	e018      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff0:	4ba3      	ldr	r3, [pc, #652]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	4aa2      	ldr	r2, [pc, #648]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ffc:	e015      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	2102      	movs	r1, #2
 8003004:	4618      	mov	r0, r3
 8003006:	f001 f9fd 	bl	8004404 <RCCEx_PLL2_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800300e:	e00c      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	2102      	movs	r1, #2
 8003016:	4618      	mov	r0, r3
 8003018:	f001 faa6 	bl	8004568 <RCCEx_PLL3_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003020:	e003      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
      break;
 8003026:	e000      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003030:	4b93      	ldr	r3, [pc, #588]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800303c:	4990      	ldr	r1, [pc, #576]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	650b      	str	r3, [r1, #80]	; 0x50
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d03d      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	2b04      	cmp	r3, #4
 800305a:	d826      	bhi.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003079 	.word	0x08003079
 8003068:	08003087 	.word	0x08003087
 800306c:	08003099 	.word	0x08003099
 8003070:	080030b1 	.word	0x080030b1
 8003074:	080030b1 	.word	0x080030b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003078:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	4a80      	ldr	r2, [pc, #512]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800307e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003084:	e015      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3304      	adds	r3, #4
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f9b9 	bl	8004404 <RCCEx_PLL2_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003096:	e00c      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3324      	adds	r3, #36	; 0x24
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 fa62 	bl	8004568 <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030a8:	e003      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
      break;
 80030ae:	e000      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030b8:	4b71      	ldr	r3, [pc, #452]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030bc:	f023 0207 	bic.w	r2, r3, #7
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	496e      	ldr	r1, [pc, #440]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	650b      	str	r3, [r1, #80]	; 0x50
 80030ca:	e001      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d042      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e4:	d02b      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ea:	d825      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80030ec:	2bc0      	cmp	r3, #192	; 0xc0
 80030ee:	d028      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80030f0:	2bc0      	cmp	r3, #192	; 0xc0
 80030f2:	d821      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d016      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80030f8:	2b80      	cmp	r3, #128	; 0x80
 80030fa:	d81d      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d007      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003104:	e018      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003106:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	4a5d      	ldr	r2, [pc, #372]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800310c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003110:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003112:	e017      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f001 f972 	bl	8004404 <RCCEx_PLL2_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003124:	e00e      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3324      	adds	r3, #36	; 0x24
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f001 fa1b 	bl	8004568 <RCCEx_PLL3_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003136:	e005      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
      break;
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800314a:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800314c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	494a      	ldr	r1, [pc, #296]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	650b      	str	r3, [r1, #80]	; 0x50
 800315c:	e001      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316a:	2b00      	cmp	r3, #0
 800316c:	d049      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003178:	d030      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800317a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800317e:	d82a      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003180:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003184:	d02c      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003186:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800318a:	d824      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800318c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003190:	d018      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003196:	d81e      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800319c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031a0:	d007      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80031a2:	e018      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	4a35      	ldr	r2, [pc, #212]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031b0:	e017      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f001 f923 	bl	8004404 <RCCEx_PLL2_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80031c2:	e00e      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 f9cc 	bl	8004568 <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031d4:	e005      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80031dc:	bf00      	nop
 80031de:	e000      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80031e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031f6:	4922      	ldr	r1, [pc, #136]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	658b      	str	r3, [r1, #88]	; 0x58
 80031fc:	e001      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04b      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003218:	d030      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800321a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800321e:	d82a      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003224:	d02e      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003226:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800322a:	d824      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800322c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003230:	d018      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003236:	d81e      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800323c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003240:	d007      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003242:	e018      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800324a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003250:	e019      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3304      	adds	r3, #4
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f001 f8d3 	bl	8004404 <RCCEx_PLL2_Config>
 800325e:	4603      	mov	r3, r0
 8003260:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003262:	e010      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3324      	adds	r3, #36	; 0x24
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f001 f97c 	bl	8004568 <RCCEx_PLL3_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003274:	e007      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	75fb      	strb	r3, [r7, #23]
      break;
 800327a:	e004      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800327c:	bf00      	nop
 800327e:	e002      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003280:	58024400 	.word	0x58024400
      break;
 8003284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800328c:	4b99      	ldr	r3, [pc, #612]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003290:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800329a:	4996      	ldr	r1, [pc, #600]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800329c:	4313      	orrs	r3, r2
 800329e:	658b      	str	r3, [r1, #88]	; 0x58
 80032a0:	e001      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d032      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	2b30      	cmp	r3, #48	; 0x30
 80032b8:	d01c      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80032ba:	2b30      	cmp	r3, #48	; 0x30
 80032bc:	d817      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d00c      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d813      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d10f      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ce:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	4a88      	ldr	r2, [pc, #544]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80032da:	e00e      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 f88e 	bl	8004404 <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80032ec:	e005      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80032f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003300:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330c:	4979      	ldr	r1, [pc, #484]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800330e:	4313      	orrs	r3, r2
 8003310:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003312:	e001      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d047      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332c:	d030      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800332e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003332:	d82a      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003334:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003338:	d02c      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800333a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800333e:	d824      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003344:	d018      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d81e      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003354:	d007      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003356:	e018      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003358:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	4a65      	ldr	r2, [pc, #404]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800335e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003364:	e017      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 f849 	bl	8004404 <RCCEx_PLL2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003376:	e00e      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3324      	adds	r3, #36	; 0x24
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f001 f8f2 	bl	8004568 <RCCEx_PLL3_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003388:	e005      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
      break;
 800338e:	e002      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003390:	bf00      	nop
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800339c:	4b55      	ldr	r3, [pc, #340]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a8:	4952      	ldr	r1, [pc, #328]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	650b      	str	r3, [r1, #80]	; 0x50
 80033ae:	e001      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d049      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d02e      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80033ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ce:	d828      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033d4:	d02a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80033d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033da:	d822      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033e0:	d026      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80033e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033e6:	d81c      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ec:	d010      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80033ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033f2:	d816      	bhi.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01d      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d111      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2101      	movs	r1, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fffd 	bl	8004404 <RCCEx_PLL2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800340e:	e012      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3324      	adds	r3, #36	; 0x24
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f001 f8a6 	bl	8004568 <RCCEx_PLL3_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003420:	e009      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
      break;
 8003426:	e006      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003428:	bf00      	nop
 800342a:	e004      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800342c:	bf00      	nop
 800342e:	e002      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800343c:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003448:	492a      	ldr	r1, [pc, #168]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800344a:	4313      	orrs	r3, r2
 800344c:	650b      	str	r3, [r1, #80]	; 0x50
 800344e:	e001      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d04d      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346a:	d02e      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800346c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003470:	d828      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d02a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347c:	d822      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800347e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003482:	d026      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003484:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003488:	d81c      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800348a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348e:	d010      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003494:	d816      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01d      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800349a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800349e:	d111      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	2101      	movs	r1, #1
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 ffac 	bl	8004404 <RCCEx_PLL2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034b0:	e012      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3324      	adds	r3, #36	; 0x24
 80034b6:	2101      	movs	r1, #1
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 f855 	bl	8004568 <RCCEx_PLL3_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034c2:	e009      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
      break;
 80034c8:	e006      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034ca:	bf00      	nop
 80034cc:	e004      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ec:	4901      	ldr	r1, [pc, #4]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	658b      	str	r3, [r1, #88]	; 0x58
 80034f2:	e003      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80034f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d022      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003514:	d108      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	2101      	movs	r1, #1
 800351c:	4618      	mov	r0, r3
 800351e:	f000 ff71 	bl	8004404 <RCCEx_PLL2_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8003526:	e003      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
      break;
 800352c:	e000      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 800352e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003536:	4b82      	ldr	r3, [pc, #520]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	497f      	ldr	r1, [pc, #508]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003544:	4313      	orrs	r3, r2
 8003546:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003548:	e001      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02f      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003562:	d00e      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8003564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003568:	d814      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d015      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800356e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003572:	d10f      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003574:	4b72      	ldr	r3, [pc, #456]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	4a71      	ldr	r2, [pc, #452]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003580:	e00c      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 ff3b 	bl	8004404 <RCCEx_PLL2_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003592:	e003      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
      break;
 8003598:	e000      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 800359a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035a2:	4b67      	ldr	r3, [pc, #412]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4964      	ldr	r1, [pc, #400]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	650b      	str	r3, [r1, #80]	; 0x50
 80035b4:	e001      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d031      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d81a      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	0800360b 	.word	0x0800360b
 80035d8:	080035e5 	.word	0x080035e5
 80035dc:	080035f3 	.word	0x080035f3
 80035e0:	0800360b 	.word	0x0800360b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	4a55      	ldr	r2, [pc, #340]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80035ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035f0:	e00c      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 ff03 	bl	8004404 <RCCEx_PLL2_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003602:	e003      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	75fb      	strb	r3, [r7, #23]
      break;
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 800360a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003612:	4b4b      	ldr	r3, [pc, #300]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	4948      	ldr	r1, [pc, #288]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003620:	4313      	orrs	r3, r2
 8003622:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003624:	e001      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 808c 	beq.w	8003750 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003638:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a41      	ldr	r2, [pc, #260]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800363e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003644:	f7fd fe92 	bl	800136c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800364a:	e009      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364c:	f7fd fe8e 	bl	800136c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d902      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	75fb      	strb	r3, [r7, #23]
        break;
 800365e:	e005      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003660:	4b38      	ldr	r3, [pc, #224]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ef      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d16c      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003674:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800367c:	4053      	eors	r3, r2
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d013      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800369c:	4b28      	ldr	r3, [pc, #160]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4a27      	ldr	r2, [pc, #156]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b8:	d115      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fe57 	bl	800136c <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036c0:	e00b      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd fe53 	bl	800136c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d902      	bls.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	75fb      	strb	r3, [r7, #23]
            break;
 80036d8:	e005      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ed      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d126      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fa:	d10d      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800370a:	0919      	lsrs	r1, r3, #4
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800370e:	400b      	ands	r3, r1
 8003710:	490b      	ldr	r1, [pc, #44]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003712:	4313      	orrs	r3, r2
 8003714:	610b      	str	r3, [r1, #16]
 8003716:	e005      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	4a08      	ldr	r2, [pc, #32]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800371e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003722:	6113      	str	r3, [r2, #16]
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003726:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800372e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003732:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003734:	4313      	orrs	r3, r2
 8003736:	670b      	str	r3, [r1, #112]	; 0x70
 8003738:	e00a      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	75bb      	strb	r3, [r7, #22]
 800373e:	e007      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8003740:	58024400 	.word	0x58024400
 8003744:	58024800 	.word	0x58024800
 8003748:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d07e      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003760:	2b28      	cmp	r3, #40	; 0x28
 8003762:	d867      	bhi.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800383b 	.word	0x0800383b
 8003770:	08003835 	.word	0x08003835
 8003774:	08003835 	.word	0x08003835
 8003778:	08003835 	.word	0x08003835
 800377c:	08003835 	.word	0x08003835
 8003780:	08003835 	.word	0x08003835
 8003784:	08003835 	.word	0x08003835
 8003788:	08003835 	.word	0x08003835
 800378c:	08003811 	.word	0x08003811
 8003790:	08003835 	.word	0x08003835
 8003794:	08003835 	.word	0x08003835
 8003798:	08003835 	.word	0x08003835
 800379c:	08003835 	.word	0x08003835
 80037a0:	08003835 	.word	0x08003835
 80037a4:	08003835 	.word	0x08003835
 80037a8:	08003835 	.word	0x08003835
 80037ac:	08003823 	.word	0x08003823
 80037b0:	08003835 	.word	0x08003835
 80037b4:	08003835 	.word	0x08003835
 80037b8:	08003835 	.word	0x08003835
 80037bc:	08003835 	.word	0x08003835
 80037c0:	08003835 	.word	0x08003835
 80037c4:	08003835 	.word	0x08003835
 80037c8:	08003835 	.word	0x08003835
 80037cc:	0800383b 	.word	0x0800383b
 80037d0:	08003835 	.word	0x08003835
 80037d4:	08003835 	.word	0x08003835
 80037d8:	08003835 	.word	0x08003835
 80037dc:	08003835 	.word	0x08003835
 80037e0:	08003835 	.word	0x08003835
 80037e4:	08003835 	.word	0x08003835
 80037e8:	08003835 	.word	0x08003835
 80037ec:	0800383b 	.word	0x0800383b
 80037f0:	08003835 	.word	0x08003835
 80037f4:	08003835 	.word	0x08003835
 80037f8:	08003835 	.word	0x08003835
 80037fc:	08003835 	.word	0x08003835
 8003800:	08003835 	.word	0x08003835
 8003804:	08003835 	.word	0x08003835
 8003808:	08003835 	.word	0x08003835
 800380c:	0800383b 	.word	0x0800383b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fdf4 	bl	8004404 <RCCEx_PLL2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003820:	e00c      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3324      	adds	r3, #36	; 0x24
 8003826:	2101      	movs	r1, #1
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fe9d 	bl	8004568 <RCCEx_PLL3_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003832:	e003      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	75fb      	strb	r3, [r7, #23]
      break;
 8003838:	e000      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 800383a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003842:	4b96      	ldr	r3, [pc, #600]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384e:	4993      	ldr	r1, [pc, #588]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	654b      	str	r3, [r1, #84]	; 0x54
 8003854:	e001      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d037      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800386a:	2b05      	cmp	r3, #5
 800386c:	d820      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038b7 	.word	0x080038b7
 8003878:	0800388d 	.word	0x0800388d
 800387c:	0800389f 	.word	0x0800389f
 8003880:	080038b7 	.word	0x080038b7
 8003884:	080038b7 	.word	0x080038b7
 8003888:	080038b7 	.word	0x080038b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	2101      	movs	r1, #1
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fdb6 	bl	8004404 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800389c:	e00c      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3324      	adds	r3, #36	; 0x24
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fe5f 	bl	8004568 <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80038ae:	e003      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
      break;
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 80038b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038be:	4b77      	ldr	r3, [pc, #476]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ca:	4974      	ldr	r1, [pc, #464]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	654b      	str	r3, [r1, #84]	; 0x54
 80038d0:	e001      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d03a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d821      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80038ec:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003937 	.word	0x08003937
 80038f8:	0800390d 	.word	0x0800390d
 80038fc:	0800391f 	.word	0x0800391f
 8003900:	08003937 	.word	0x08003937
 8003904:	08003937 	.word	0x08003937
 8003908:	08003937 	.word	0x08003937
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fd76 	bl	8004404 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800391c:	e00c      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3324      	adds	r3, #36	; 0x24
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fe1f 	bl	8004568 <RCCEx_PLL3_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800392e:	e003      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	75fb      	strb	r3, [r7, #23]
      break;
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 8003936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393e:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f023 0207 	bic.w	r2, r3, #7
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394c:	4953      	ldr	r1, [pc, #332]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800394e:	4313      	orrs	r3, r2
 8003950:	658b      	str	r3, [r1, #88]	; 0x58
 8003952:	e001      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d04b      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396e:	d02e      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003974:	d828      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d02a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d822      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003986:	d026      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800398c:	d81c      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800398e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003992:	d010      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003998:	d816      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01d      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 800399e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a2:	d111      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fd2a 	bl	8004404 <RCCEx_PLL2_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80039b4:	e012      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3324      	adds	r3, #36	; 0x24
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fdd3 	bl	8004568 <RCCEx_PLL3_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80039c6:	e009      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
      break;
 80039cc:	e006      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80039ce:	bf00      	nop
 80039d0:	e004      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80039da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e2:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	492a      	ldr	r1, [pc, #168]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	654b      	str	r3, [r1, #84]	; 0x54
 80039f6:	e001      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d04d      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a12:	d02e      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8003a14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a18:	d828      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1e:	d02a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a24:	d822      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a2a:	d026      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a30:	d81c      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a36:	d010      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3c:	d816      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01d      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a46:	d111      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fcd8 	bl	8004404 <RCCEx_PLL2_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a58:	e012      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3324      	adds	r3, #36	; 0x24
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fd81 	bl	8004568 <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a6a:	e009      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a70:	e006      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003a72:	bf00      	nop
 8003a74:	e004      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a94:	4901      	ldr	r1, [pc, #4]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	658b      	str	r3, [r1, #88]	; 0x58
 8003a9a:	e003      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8003a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d04b      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ab6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003aba:	d02e      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003abc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ac0:	d828      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac6:	d02a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003acc:	d822      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003ace:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ad2:	d026      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003ad4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ad8:	d81c      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ade:	d010      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae4:	d816      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01d      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aee:	d111      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fc84 	bl	8004404 <RCCEx_PLL2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b00:	e012      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3324      	adds	r3, #36	; 0x24
 8003b06:	2102      	movs	r1, #2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fd2d 	bl	8004568 <RCCEx_PLL3_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b12:	e009      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
      break;
 8003b18:	e006      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e004      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b2e:	4b9e      	ldr	r3, [pc, #632]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b3c:	499a      	ldr	r1, [pc, #616]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	658b      	str	r3, [r1, #88]	; 0x58
 8003b42:	e001      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d10a      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3324      	adds	r3, #36	; 0x24
 8003b64:	2102      	movs	r1, #2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fcfe 	bl	8004568 <RCCEx_PLL3_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b76:	4b8c      	ldr	r3, [pc, #560]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b84:	4988      	ldr	r1, [pc, #544]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3324      	adds	r3, #36	; 0x24
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fcdd 	bl	8004568 <RCCEx_PLL3_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bb8:	4b7b      	ldr	r3, [pc, #492]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc6:	4978      	ldr	r1, [pc, #480]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d034      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be2:	d01d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be8:	d817      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d009      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003bf4:	e011      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fc01 	bl	8004404 <RCCEx_PLL2_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c06:	e00c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3324      	adds	r3, #36	; 0x24
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fcaa 	bl	8004568 <RCCEx_PLL3_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c18:	e003      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c28:	4b5f      	ldr	r3, [pc, #380]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c36:	495c      	ldr	r1, [pc, #368]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003c3c:	e001      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d033      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c58:	d01c      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003c5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c5e:	d816      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8003c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c64:	d003      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c6a:	d007      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8003c6c:	e00f      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6e:	4b4e      	ldr	r3, [pc, #312]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c7a:	e00c      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fc70 	bl	8004568 <RCCEx_PLL3_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c8c:	e003      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
      break;
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 8003c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c9c:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	493f      	ldr	r1, [pc, #252]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	654b      	str	r3, [r1, #84]	; 0x54
 8003cb0:	e001      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
 8003cb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d029      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cce:	d007      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8003cd0:	e00f      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd2:	4b35      	ldr	r3, [pc, #212]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fb8c 	bl	8004404 <RCCEx_PLL2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	4927      	ldr	r1, [pc, #156]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d10:	e001      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3324      	adds	r3, #36	; 0x24
 8003d26:	2102      	movs	r1, #2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fc1d 	bl	8004568 <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d035      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4e:	d017      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 8003d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d54:	d811      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8003d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d60:	d80b      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4a0d      	ldr	r2, [pc, #52]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003d78:	e007      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10d      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9e:	4902      	ldr	r1, [pc, #8]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	654b      	str	r3, [r1, #84]	; 0x54
 8003da4:	e004      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	492e      	ldr	r1, [pc, #184]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003dda:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003de8:	4926      	ldr	r1, [pc, #152]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e06:	491f      	ldr	r1, [pc, #124]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e22:	6113      	str	r3, [r2, #16]
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e2e:	4915      	ldr	r1, [pc, #84]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	da08      	bge.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	490e      	ldr	r1, [pc, #56]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	4906      	ldr	r1, [pc, #24]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003e6e:	7dbb      	ldrb	r3, [r7, #22]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	58024400 	.word	0x58024400

08003e88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003e8c:	f7fe fff0 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4904      	ldr	r1, [pc, #16]	; (8003eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	58024400 	.word	0x58024400
 8003eb0:	08009480 	.word	0x08009480

08003eb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ebc:	4ba1      	ldr	r3, [pc, #644]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003ec6:	4b9f      	ldr	r3, [pc, #636]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	0b1b      	lsrs	r3, r3, #12
 8003ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ed2:	4b9c      	ldr	r3, [pc, #624]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003ede:	4b99      	ldr	r3, [pc, #612]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	08db      	lsrs	r3, r3, #3
 8003ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8111 	beq.w	8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	f000 8083 	beq.w	8004010 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	f200 80a1 	bhi.w	8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d056      	beq.n	8003fcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f1e:	e099      	b.n	8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f20:	4b88      	ldr	r3, [pc, #544]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02d      	beq.n	8003f88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f2c:	4b85      	ldr	r3, [pc, #532]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	08db      	lsrs	r3, r3, #3
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	4a84      	ldr	r2, [pc, #528]	; (8004148 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f56:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f86:	e087      	b.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004150 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fca:	e065      	b.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fde:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800400e:	e043      	b.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800401e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004022:	4b48      	ldr	r3, [pc, #288]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004032:	ed97 6a03 	vldr	s12, [r7, #12]
 8004036:	eddf 5a45 	vldr	s11, [pc, #276]	; 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800403a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004052:	e021      	b.n	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004076:	ed97 6a03 	vldr	s12, [r7, #12]
 800407a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800414c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800407e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800408a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004096:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	0a5b      	lsrs	r3, r3, #9
 800409e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040be:	ee17 2a90 	vmov	r2, s15
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ec:	ee17 2a90 	vmov	r2, s15
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	0e1b      	lsrs	r3, r3, #24
 80040fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800410a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800410e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411a:	ee17 2a90 	vmov	r2, s15
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004122:	e008      	b.n	8004136 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
}
 8004136:	bf00      	nop
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400
 8004148:	03d09000 	.word	0x03d09000
 800414c:	46000000 	.word	0x46000000
 8004150:	4c742400 	.word	0x4c742400
 8004154:	4a742400 	.word	0x4a742400
 8004158:	4bbebc20 	.word	0x4bbebc20

0800415c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004164:	4ba1      	ldr	r3, [pc, #644]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800416e:	4b9f      	ldr	r3, [pc, #636]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	0d1b      	lsrs	r3, r3, #20
 8004174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004178:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800417a:	4b9c      	ldr	r3, [pc, #624]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	0a1b      	lsrs	r3, r3, #8
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004186:	4b99      	ldr	r3, [pc, #612]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	08db      	lsrs	r3, r3, #3
 800418c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8111 	beq.w	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	f000 8083 	beq.w	80042b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	f200 80a1 	bhi.w	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d056      	beq.n	8004274 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80041c6:	e099      	b.n	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c8:	4b88      	ldr	r3, [pc, #544]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02d      	beq.n	8004230 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041d4:	4b85      	ldr	r3, [pc, #532]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	4a84      	ldr	r2, [pc, #528]	; (80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
 80041e4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fe:	4b7b      	ldr	r3, [pc, #492]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004212:	eddf 5a78 	vldr	s11, [pc, #480]	; 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800422e:	e087      	b.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800423e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004242:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	ed97 6a03 	vldr	s12, [r7, #12]
 8004256:	eddf 5a67 	vldr	s11, [pc, #412]	; 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800425a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004272:	e065      	b.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004286:	4b59      	ldr	r3, [pc, #356]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004296:	ed97 6a03 	vldr	s12, [r7, #12]
 800429a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800429e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042b6:	e043      	b.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80042c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ca:	4b48      	ldr	r3, [pc, #288]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	ed97 6a03 	vldr	s12, [r7, #12]
 80042de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042fa:	e021      	b.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b37      	ldr	r3, [pc, #220]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004322:	eddf 5a34 	vldr	s11, [pc, #208]	; 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800433e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004340:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	0a5b      	lsrs	r3, r3, #9
 8004346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800435a:	edd7 6a07 	vldr	s13, [r7, #28]
 800435e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004366:	ee17 2a90 	vmov	r2, s15
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800436e:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004378:	ee07 3a90 	vmov	s15, r3
 800437c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004388:	edd7 6a07 	vldr	s13, [r7, #28]
 800438c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004394:	ee17 2a90 	vmov	r2, s15
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	0e1b      	lsrs	r3, r3, #24
 80043a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c2:	ee17 2a90 	vmov	r2, s15
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043ca:	e008      	b.n	80043de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
}
 80043de:	bf00      	nop
 80043e0:	3724      	adds	r7, #36	; 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	58024400 	.word	0x58024400
 80043f0:	03d09000 	.word	0x03d09000
 80043f4:	46000000 	.word	0x46000000
 80043f8:	4c742400 	.word	0x4c742400
 80043fc:	4a742400 	.word	0x4a742400
 8004400:	4bbebc20 	.word	0x4bbebc20

08004404 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004412:	4b53      	ldr	r3, [pc, #332]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b03      	cmp	r3, #3
 800441c:	d101      	bne.n	8004422 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e099      	b.n	8004556 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004422:	4b4f      	ldr	r3, [pc, #316]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4e      	ldr	r2, [pc, #312]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004428:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800442c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442e:	f7fc ff9d 	bl	800136c <HAL_GetTick>
 8004432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004434:	e008      	b.n	8004448 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004436:	f7fc ff99 	bl	800136c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e086      	b.n	8004556 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004448:	4b45      	ldr	r3, [pc, #276]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f0      	bne.n	8004436 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004454:	4b42      	ldr	r3, [pc, #264]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	493f      	ldr	r1, [pc, #252]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	628b      	str	r3, [r1, #40]	; 0x28
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	3b01      	subs	r3, #1
 800446e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	3b01      	subs	r3, #1
 8004478:	025b      	lsls	r3, r3, #9
 800447a:	b29b      	uxth	r3, r3
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	3b01      	subs	r3, #1
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	3b01      	subs	r3, #1
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004498:	4931      	ldr	r1, [pc, #196]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800449e:	4b30      	ldr	r3, [pc, #192]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	492d      	ldr	r1, [pc, #180]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044b0:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	f023 0220 	bic.w	r2, r3, #32
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4928      	ldr	r1, [pc, #160]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044c2:	4b27      	ldr	r3, [pc, #156]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	4a26      	ldr	r2, [pc, #152]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	f023 0310 	bic.w	r3, r3, #16
 80044cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044ce:	4b24      	ldr	r3, [pc, #144]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <RCCEx_PLL2_Config+0x160>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	69d2      	ldr	r2, [r2, #28]
 80044da:	00d2      	lsls	r2, r2, #3
 80044dc:	4920      	ldr	r1, [pc, #128]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044e2:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	f043 0310 	orr.w	r3, r3, #16
 80044ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4a19      	ldr	r2, [pc, #100]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 80044fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004500:	e00f      	b.n	8004522 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d106      	bne.n	8004516 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004508:	4b15      	ldr	r3, [pc, #84]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 800450e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004512:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004514:	e005      	b.n	8004522 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	4a11      	ldr	r2, [pc, #68]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 800451c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004520:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 8004528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800452c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452e:	f7fc ff1d 	bl	800136c <HAL_GetTick>
 8004532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004534:	e008      	b.n	8004548 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004536:	f7fc ff19 	bl	800136c <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e006      	b.n	8004556 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <RCCEx_PLL2_Config+0x15c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	58024400 	.word	0x58024400
 8004564:	ffff0007 	.word	0xffff0007

08004568 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004576:	4b53      	ldr	r3, [pc, #332]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d101      	bne.n	8004586 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e099      	b.n	80046ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004586:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a4e      	ldr	r2, [pc, #312]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800458c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fc feeb 	bl	800136c <HAL_GetTick>
 8004596:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004598:	e008      	b.n	80045ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800459a:	f7fc fee7 	bl	800136c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e086      	b.n	80046ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045ac:	4b45      	ldr	r3, [pc, #276]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045b8:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	051b      	lsls	r3, r3, #20
 80045c6:	493f      	ldr	r1, [pc, #252]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	628b      	str	r3, [r1, #40]	; 0x28
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	3b01      	subs	r3, #1
 80045dc:	025b      	lsls	r3, r3, #9
 80045de:	b29b      	uxth	r3, r3
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045fc:	4931      	ldr	r1, [pc, #196]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004602:	4b30      	ldr	r3, [pc, #192]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	492d      	ldr	r1, [pc, #180]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	4928      	ldr	r1, [pc, #160]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800462c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <RCCEx_PLL3_Config+0x160>)
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	69d2      	ldr	r2, [r2, #28]
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	4920      	ldr	r1, [pc, #128]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800465e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004662:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004664:	e00f      	b.n	8004686 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d106      	bne.n	800467a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800466c:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004672:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004676:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004678:	e005      	b.n	8004686 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	4a11      	ldr	r2, [pc, #68]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004686:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fc fe6b 	bl	800136c <HAL_GetTick>
 8004696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004698:	e008      	b.n	80046ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800469a:	f7fc fe67 	bl	800136c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <RCCEx_PLL3_Config+0x15c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	58024400 	.word	0x58024400
 80046c8:	ffff0007 	.word	0xffff0007

080046cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e049      	b.n	8004772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f841 	bl	800477a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 fa00 	bl	8004b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e054      	b.n	8004852 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a26      	ldr	r2, [pc, #152]	; (8004860 <HAL_TIM_Base_Start_IT+0xd0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d01d      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a22      	ldr	r2, [pc, #136]	; (8004864 <HAL_TIM_Base_Start_IT+0xd4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a21      	ldr	r2, [pc, #132]	; (8004868 <HAL_TIM_Base_Start_IT+0xd8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	; (800486c <HAL_TIM_Base_Start_IT+0xdc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <HAL_TIM_Base_Start_IT+0xe0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <HAL_TIM_Base_Start_IT+0xe4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <HAL_TIM_Base_Start_IT+0xe8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d115      	bne.n	800483c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_TIM_Base_Start_IT+0xec>)
 8004818:	4013      	ands	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d015      	beq.n	800484e <HAL_TIM_Base_Start_IT+0xbe>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004828:	d011      	beq.n	800484e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	e008      	b.n	800484e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e000      	b.n	8004850 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40010400 	.word	0x40010400
 8004874:	40001800 	.word	0x40001800
 8004878:	40014000 	.word	0x40014000
 800487c:	00010007 	.word	0x00010007

08004880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0202 	mvn.w	r2, #2
 80048ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f905 	bl	8004ad2 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8f7 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f908 	bl	8004ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d122      	bne.n	8004930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0204 	mvn.w	r2, #4
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8db 	bl	8004ad2 <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8cd 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8de 	bl	8004ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b08      	cmp	r3, #8
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0208 	mvn.w	r2, #8
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2204      	movs	r2, #4
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f8b1 	bl	8004ad2 <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8a3 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f8b4 	bl	8004ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b10      	cmp	r3, #16
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f887 	bl	8004ad2 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f879 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f88a 	bl	8004ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0201 	mvn.w	r2, #1
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fa34 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f914 	bl	8004c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	d10e      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d107      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f907 	bl	8004c6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d10e      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d107      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f838 	bl	8004afa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d10e      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d107      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f06f 0220 	mvn.w	r2, #32
 8004aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f8c7 	bl	8004c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a40      	ldr	r2, [pc, #256]	; (8004c24 <TIM_Base_SetConfig+0x114>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <TIM_Base_SetConfig+0x40>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2e:	d00f      	beq.n	8004b50 <TIM_Base_SetConfig+0x40>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a3d      	ldr	r2, [pc, #244]	; (8004c28 <TIM_Base_SetConfig+0x118>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <TIM_Base_SetConfig+0x40>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <TIM_Base_SetConfig+0x11c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <TIM_Base_SetConfig+0x40>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a3b      	ldr	r2, [pc, #236]	; (8004c30 <TIM_Base_SetConfig+0x120>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_Base_SetConfig+0x40>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a3a      	ldr	r2, [pc, #232]	; (8004c34 <TIM_Base_SetConfig+0x124>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d108      	bne.n	8004b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2f      	ldr	r2, [pc, #188]	; (8004c24 <TIM_Base_SetConfig+0x114>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d01f      	beq.n	8004baa <TIM_Base_SetConfig+0x9a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b70:	d01b      	beq.n	8004baa <TIM_Base_SetConfig+0x9a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a2c      	ldr	r2, [pc, #176]	; (8004c28 <TIM_Base_SetConfig+0x118>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d017      	beq.n	8004baa <TIM_Base_SetConfig+0x9a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <TIM_Base_SetConfig+0x11c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <TIM_Base_SetConfig+0x9a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <TIM_Base_SetConfig+0x120>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00f      	beq.n	8004baa <TIM_Base_SetConfig+0x9a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <TIM_Base_SetConfig+0x124>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00b      	beq.n	8004baa <TIM_Base_SetConfig+0x9a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a28      	ldr	r2, [pc, #160]	; (8004c38 <TIM_Base_SetConfig+0x128>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <TIM_Base_SetConfig+0x9a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a27      	ldr	r2, [pc, #156]	; (8004c3c <TIM_Base_SetConfig+0x12c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_Base_SetConfig+0x9a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <TIM_Base_SetConfig+0x130>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d108      	bne.n	8004bbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a10      	ldr	r2, [pc, #64]	; (8004c24 <TIM_Base_SetConfig+0x114>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0xf8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <TIM_Base_SetConfig+0x124>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0xf8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a11      	ldr	r2, [pc, #68]	; (8004c38 <TIM_Base_SetConfig+0x128>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0xf8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <TIM_Base_SetConfig+0x12c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0xf8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <TIM_Base_SetConfig+0x130>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d103      	bne.n	8004c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	615a      	str	r2, [r3, #20]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40010000 	.word	0x40010000
 8004c28:	40000400 	.word	0x40000400
 8004c2c:	40000800 	.word	0x40000800
 8004c30:	40000c00 	.word	0x40000c00
 8004c34:	40010400 	.word	0x40010400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e042      	b.n	8004d18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fc f9c9 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2224      	movs	r2, #36	; 0x24
 8004cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8c2 	bl	8004e4c <UART_SetConfig>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e022      	b.n	8004d18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fe1e 	bl	800591c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fea5 	bl	8005a60 <UART_CheckIdleState>
 8004d16:	4603      	mov	r3, r0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	f040 8083 	bne.w	8004e42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_UART_Transmit+0x28>
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e07b      	b.n	8004e44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Transmit+0x3a>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e074      	b.n	8004e44 <HAL_UART_Transmit+0x124>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2221      	movs	r2, #33	; 0x21
 8004d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d72:	f7fc fafb 	bl	800136c <HAL_GetTick>
 8004d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d90:	d108      	bne.n	8004da4 <HAL_UART_Transmit+0x84>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e003      	b.n	8004dac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004db4:	e02c      	b.n	8004e10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fe98 	bl	8005af6 <UART_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e039      	b.n	8004e44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3302      	adds	r3, #2
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	e007      	b.n	8004dfe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1cc      	bne.n	8004db6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2200      	movs	r2, #0
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fe65 	bl	8005af6 <UART_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e006      	b.n	8004e44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
  }
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e50:	b092      	sub	sp, #72	; 0x48
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4bbe      	ldr	r3, [pc, #760]	; (8005174 <UART_SetConfig+0x328>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4ab3      	ldr	r2, [pc, #716]	; (8005178 <UART_SetConfig+0x32c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	4baf      	ldr	r3, [pc, #700]	; (800517c <UART_SetConfig+0x330>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f023 010f 	bic.w	r1, r3, #15
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4aa6      	ldr	r2, [pc, #664]	; (8005180 <UART_SetConfig+0x334>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d177      	bne.n	8004fdc <UART_SetConfig+0x190>
 8004eec:	4ba5      	ldr	r3, [pc, #660]	; (8005184 <UART_SetConfig+0x338>)
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ef4:	2b28      	cmp	r3, #40	; 0x28
 8004ef6:	d86d      	bhi.n	8004fd4 <UART_SetConfig+0x188>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0xb4>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004fa5 	.word	0x08004fa5
 8004f04:	08004fd5 	.word	0x08004fd5
 8004f08:	08004fd5 	.word	0x08004fd5
 8004f0c:	08004fd5 	.word	0x08004fd5
 8004f10:	08004fd5 	.word	0x08004fd5
 8004f14:	08004fd5 	.word	0x08004fd5
 8004f18:	08004fd5 	.word	0x08004fd5
 8004f1c:	08004fd5 	.word	0x08004fd5
 8004f20:	08004fad 	.word	0x08004fad
 8004f24:	08004fd5 	.word	0x08004fd5
 8004f28:	08004fd5 	.word	0x08004fd5
 8004f2c:	08004fd5 	.word	0x08004fd5
 8004f30:	08004fd5 	.word	0x08004fd5
 8004f34:	08004fd5 	.word	0x08004fd5
 8004f38:	08004fd5 	.word	0x08004fd5
 8004f3c:	08004fd5 	.word	0x08004fd5
 8004f40:	08004fb5 	.word	0x08004fb5
 8004f44:	08004fd5 	.word	0x08004fd5
 8004f48:	08004fd5 	.word	0x08004fd5
 8004f4c:	08004fd5 	.word	0x08004fd5
 8004f50:	08004fd5 	.word	0x08004fd5
 8004f54:	08004fd5 	.word	0x08004fd5
 8004f58:	08004fd5 	.word	0x08004fd5
 8004f5c:	08004fd5 	.word	0x08004fd5
 8004f60:	08004fbd 	.word	0x08004fbd
 8004f64:	08004fd5 	.word	0x08004fd5
 8004f68:	08004fd5 	.word	0x08004fd5
 8004f6c:	08004fd5 	.word	0x08004fd5
 8004f70:	08004fd5 	.word	0x08004fd5
 8004f74:	08004fd5 	.word	0x08004fd5
 8004f78:	08004fd5 	.word	0x08004fd5
 8004f7c:	08004fd5 	.word	0x08004fd5
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fd5 	.word	0x08004fd5
 8004f88:	08004fd5 	.word	0x08004fd5
 8004f8c:	08004fd5 	.word	0x08004fd5
 8004f90:	08004fd5 	.word	0x08004fd5
 8004f94:	08004fd5 	.word	0x08004fd5
 8004f98:	08004fd5 	.word	0x08004fd5
 8004f9c:	08004fd5 	.word	0x08004fd5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e222      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8004fac:	2304      	movs	r3, #4
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e21e      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e21a      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e216      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e212      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e20e      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e20a      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a69      	ldr	r2, [pc, #420]	; (8005188 <UART_SetConfig+0x33c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d130      	bne.n	8005048 <UART_SetConfig+0x1fc>
 8004fe6:	4b67      	ldr	r3, [pc, #412]	; (8005184 <UART_SetConfig+0x338>)
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d826      	bhi.n	8005040 <UART_SetConfig+0x1f4>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <UART_SetConfig+0x1ac>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005011 	.word	0x08005011
 8004ffc:	08005019 	.word	0x08005019
 8005000:	08005021 	.word	0x08005021
 8005004:	08005029 	.word	0x08005029
 8005008:	08005031 	.word	0x08005031
 800500c:	08005039 	.word	0x08005039
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e1ec      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005018:	2304      	movs	r3, #4
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e1e8      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005020:	2308      	movs	r3, #8
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e1e4      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005028:	2310      	movs	r3, #16
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e1e0      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005030:	2320      	movs	r3, #32
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e1dc      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e1d8      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005046:	e1d4      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a4f      	ldr	r2, [pc, #316]	; (800518c <UART_SetConfig+0x340>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d130      	bne.n	80050b4 <UART_SetConfig+0x268>
 8005052:	4b4c      	ldr	r3, [pc, #304]	; (8005184 <UART_SetConfig+0x338>)
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	2b05      	cmp	r3, #5
 800505c:	d826      	bhi.n	80050ac <UART_SetConfig+0x260>
 800505e:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <UART_SetConfig+0x218>)
 8005060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005064:	0800507d 	.word	0x0800507d
 8005068:	08005085 	.word	0x08005085
 800506c:	0800508d 	.word	0x0800508d
 8005070:	08005095 	.word	0x08005095
 8005074:	0800509d 	.word	0x0800509d
 8005078:	080050a5 	.word	0x080050a5
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e1b6      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e1b2      	b.n	80053f2 <UART_SetConfig+0x5a6>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e1ae      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e1aa      	b.n	80053f2 <UART_SetConfig+0x5a6>
 800509c:	2320      	movs	r3, #32
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e1a6      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80050a4:	2340      	movs	r3, #64	; 0x40
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e1a2      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e19e      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a35      	ldr	r2, [pc, #212]	; (8005190 <UART_SetConfig+0x344>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d130      	bne.n	8005120 <UART_SetConfig+0x2d4>
 80050be:	4b31      	ldr	r3, [pc, #196]	; (8005184 <UART_SetConfig+0x338>)
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d826      	bhi.n	8005118 <UART_SetConfig+0x2cc>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0x284>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050e9 	.word	0x080050e9
 80050d4:	080050f1 	.word	0x080050f1
 80050d8:	080050f9 	.word	0x080050f9
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005111 	.word	0x08005111
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e180      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80050f0:	2304      	movs	r3, #4
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e17c      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e178      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005100:	2310      	movs	r3, #16
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e174      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005108:	2320      	movs	r3, #32
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510e:	e170      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005110:	2340      	movs	r3, #64	; 0x40
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005116:	e16c      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511e:	e168      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1b      	ldr	r2, [pc, #108]	; (8005194 <UART_SetConfig+0x348>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d142      	bne.n	80051b0 <UART_SetConfig+0x364>
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <UART_SetConfig+0x338>)
 800512c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	2b05      	cmp	r3, #5
 8005134:	d838      	bhi.n	80051a8 <UART_SetConfig+0x35c>
 8005136:	a201      	add	r2, pc, #4	; (adr r2, 800513c <UART_SetConfig+0x2f0>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	08005155 	.word	0x08005155
 8005140:	0800515d 	.word	0x0800515d
 8005144:	08005165 	.word	0x08005165
 8005148:	0800516d 	.word	0x0800516d
 800514c:	08005199 	.word	0x08005199
 8005150:	080051a1 	.word	0x080051a1
 8005154:	2300      	movs	r3, #0
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e14a      	b.n	80053f2 <UART_SetConfig+0x5a6>
 800515c:	2304      	movs	r3, #4
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e146      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005164:	2308      	movs	r3, #8
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e142      	b.n	80053f2 <UART_SetConfig+0x5a6>
 800516c:	2310      	movs	r3, #16
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e13e      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005174:	cfff69f3 	.word	0xcfff69f3
 8005178:	58000c00 	.word	0x58000c00
 800517c:	11fff4ff 	.word	0x11fff4ff
 8005180:	40011000 	.word	0x40011000
 8005184:	58024400 	.word	0x58024400
 8005188:	40004400 	.word	0x40004400
 800518c:	40004800 	.word	0x40004800
 8005190:	40004c00 	.word	0x40004c00
 8005194:	40005000 	.word	0x40005000
 8005198:	2320      	movs	r3, #32
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e128      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80051a0:	2340      	movs	r3, #64	; 0x40
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e124      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e120      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4acb      	ldr	r2, [pc, #812]	; (80054e4 <UART_SetConfig+0x698>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d176      	bne.n	80052a8 <UART_SetConfig+0x45c>
 80051ba:	4bcb      	ldr	r3, [pc, #812]	; (80054e8 <UART_SetConfig+0x69c>)
 80051bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051c2:	2b28      	cmp	r3, #40	; 0x28
 80051c4:	d86c      	bhi.n	80052a0 <UART_SetConfig+0x454>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <UART_SetConfig+0x380>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	08005271 	.word	0x08005271
 80051d0:	080052a1 	.word	0x080052a1
 80051d4:	080052a1 	.word	0x080052a1
 80051d8:	080052a1 	.word	0x080052a1
 80051dc:	080052a1 	.word	0x080052a1
 80051e0:	080052a1 	.word	0x080052a1
 80051e4:	080052a1 	.word	0x080052a1
 80051e8:	080052a1 	.word	0x080052a1
 80051ec:	08005279 	.word	0x08005279
 80051f0:	080052a1 	.word	0x080052a1
 80051f4:	080052a1 	.word	0x080052a1
 80051f8:	080052a1 	.word	0x080052a1
 80051fc:	080052a1 	.word	0x080052a1
 8005200:	080052a1 	.word	0x080052a1
 8005204:	080052a1 	.word	0x080052a1
 8005208:	080052a1 	.word	0x080052a1
 800520c:	08005281 	.word	0x08005281
 8005210:	080052a1 	.word	0x080052a1
 8005214:	080052a1 	.word	0x080052a1
 8005218:	080052a1 	.word	0x080052a1
 800521c:	080052a1 	.word	0x080052a1
 8005220:	080052a1 	.word	0x080052a1
 8005224:	080052a1 	.word	0x080052a1
 8005228:	080052a1 	.word	0x080052a1
 800522c:	08005289 	.word	0x08005289
 8005230:	080052a1 	.word	0x080052a1
 8005234:	080052a1 	.word	0x080052a1
 8005238:	080052a1 	.word	0x080052a1
 800523c:	080052a1 	.word	0x080052a1
 8005240:	080052a1 	.word	0x080052a1
 8005244:	080052a1 	.word	0x080052a1
 8005248:	080052a1 	.word	0x080052a1
 800524c:	08005291 	.word	0x08005291
 8005250:	080052a1 	.word	0x080052a1
 8005254:	080052a1 	.word	0x080052a1
 8005258:	080052a1 	.word	0x080052a1
 800525c:	080052a1 	.word	0x080052a1
 8005260:	080052a1 	.word	0x080052a1
 8005264:	080052a1 	.word	0x080052a1
 8005268:	080052a1 	.word	0x080052a1
 800526c:	08005299 	.word	0x08005299
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e0bc      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005278:	2304      	movs	r3, #4
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e0b8      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005280:	2308      	movs	r3, #8
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e0b4      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005288:	2310      	movs	r3, #16
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e0b0      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005290:	2320      	movs	r3, #32
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e0ac      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005298:	2340      	movs	r3, #64	; 0x40
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e0a8      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e0a4      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a8f      	ldr	r2, [pc, #572]	; (80054ec <UART_SetConfig+0x6a0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d130      	bne.n	8005314 <UART_SetConfig+0x4c8>
 80052b2:	4b8d      	ldr	r3, [pc, #564]	; (80054e8 <UART_SetConfig+0x69c>)
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d826      	bhi.n	800530c <UART_SetConfig+0x4c0>
 80052be:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0x478>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052dd 	.word	0x080052dd
 80052c8:	080052e5 	.word	0x080052e5
 80052cc:	080052ed 	.word	0x080052ed
 80052d0:	080052f5 	.word	0x080052f5
 80052d4:	080052fd 	.word	0x080052fd
 80052d8:	08005305 	.word	0x08005305
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e086      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80052e4:	2304      	movs	r3, #4
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e082      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80052ec:	2308      	movs	r3, #8
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e07e      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80052f4:	2310      	movs	r3, #16
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e07a      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80052fc:	2320      	movs	r3, #32
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e076      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005304:	2340      	movs	r3, #64	; 0x40
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e072      	b.n	80053f2 <UART_SetConfig+0x5a6>
 800530c:	2380      	movs	r3, #128	; 0x80
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e06e      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a75      	ldr	r2, [pc, #468]	; (80054f0 <UART_SetConfig+0x6a4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d130      	bne.n	8005380 <UART_SetConfig+0x534>
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <UART_SetConfig+0x69c>)
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	2b05      	cmp	r3, #5
 8005328:	d826      	bhi.n	8005378 <UART_SetConfig+0x52c>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x4e4>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005349 	.word	0x08005349
 8005334:	08005351 	.word	0x08005351
 8005338:	08005359 	.word	0x08005359
 800533c:	08005361 	.word	0x08005361
 8005340:	08005369 	.word	0x08005369
 8005344:	08005371 	.word	0x08005371
 8005348:	2300      	movs	r3, #0
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e050      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005350:	2304      	movs	r3, #4
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e04c      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005358:	2308      	movs	r3, #8
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e048      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005360:	2310      	movs	r3, #16
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e044      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005368:	2320      	movs	r3, #32
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e040      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005370:	2340      	movs	r3, #64	; 0x40
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e03c      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e038      	b.n	80053f2 <UART_SetConfig+0x5a6>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5b      	ldr	r2, [pc, #364]	; (80054f4 <UART_SetConfig+0x6a8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d130      	bne.n	80053ec <UART_SetConfig+0x5a0>
 800538a:	4b57      	ldr	r3, [pc, #348]	; (80054e8 <UART_SetConfig+0x69c>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	2b05      	cmp	r3, #5
 8005394:	d826      	bhi.n	80053e4 <UART_SetConfig+0x598>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <UART_SetConfig+0x550>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053b5 	.word	0x080053b5
 80053a0:	080053bd 	.word	0x080053bd
 80053a4:	080053c5 	.word	0x080053c5
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053d5 	.word	0x080053d5
 80053b0:	080053dd 	.word	0x080053dd
 80053b4:	2302      	movs	r3, #2
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e01a      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80053bc:	2304      	movs	r3, #4
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e016      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80053c4:	2308      	movs	r3, #8
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e012      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80053cc:	2310      	movs	r3, #16
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e00e      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80053d4:	2320      	movs	r3, #32
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e00a      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80053dc:	2340      	movs	r3, #64	; 0x40
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e006      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e002      	b.n	80053f2 <UART_SetConfig+0x5a6>
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a3f      	ldr	r2, [pc, #252]	; (80054f4 <UART_SetConfig+0x6a8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	f040 80f8 	bne.w	80055ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005402:	2b20      	cmp	r3, #32
 8005404:	dc46      	bgt.n	8005494 <UART_SetConfig+0x648>
 8005406:	2b02      	cmp	r3, #2
 8005408:	f2c0 8082 	blt.w	8005510 <UART_SetConfig+0x6c4>
 800540c:	3b02      	subs	r3, #2
 800540e:	2b1e      	cmp	r3, #30
 8005410:	d87e      	bhi.n	8005510 <UART_SetConfig+0x6c4>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <UART_SetConfig+0x5cc>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	0800549b 	.word	0x0800549b
 800541c:	08005511 	.word	0x08005511
 8005420:	080054a3 	.word	0x080054a3
 8005424:	08005511 	.word	0x08005511
 8005428:	08005511 	.word	0x08005511
 800542c:	08005511 	.word	0x08005511
 8005430:	080054b3 	.word	0x080054b3
 8005434:	08005511 	.word	0x08005511
 8005438:	08005511 	.word	0x08005511
 800543c:	08005511 	.word	0x08005511
 8005440:	08005511 	.word	0x08005511
 8005444:	08005511 	.word	0x08005511
 8005448:	08005511 	.word	0x08005511
 800544c:	08005511 	.word	0x08005511
 8005450:	080054c3 	.word	0x080054c3
 8005454:	08005511 	.word	0x08005511
 8005458:	08005511 	.word	0x08005511
 800545c:	08005511 	.word	0x08005511
 8005460:	08005511 	.word	0x08005511
 8005464:	08005511 	.word	0x08005511
 8005468:	08005511 	.word	0x08005511
 800546c:	08005511 	.word	0x08005511
 8005470:	08005511 	.word	0x08005511
 8005474:	08005511 	.word	0x08005511
 8005478:	08005511 	.word	0x08005511
 800547c:	08005511 	.word	0x08005511
 8005480:	08005511 	.word	0x08005511
 8005484:	08005511 	.word	0x08005511
 8005488:	08005511 	.word	0x08005511
 800548c:	08005511 	.word	0x08005511
 8005490:	08005503 	.word	0x08005503
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d037      	beq.n	8005508 <UART_SetConfig+0x6bc>
 8005498:	e03a      	b.n	8005510 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800549a:	f7fe fcf5 	bl	8003e88 <HAL_RCCEx_GetD3PCLK1Freq>
 800549e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054a0:	e03c      	b.n	800551c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fd04 	bl	8003eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b0:	e034      	b.n	800551c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054b2:	f107 0318 	add.w	r3, r7, #24
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe fe50 	bl	800415c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c0:	e02c      	b.n	800551c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <UART_SetConfig+0x69c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d016      	beq.n	80054fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <UART_SetConfig+0x69c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	08db      	lsrs	r3, r3, #3
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <UART_SetConfig+0x6ac>)
 80054da:	fa22 f303 	lsr.w	r3, r2, r3
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054e0:	e01c      	b.n	800551c <UART_SetConfig+0x6d0>
 80054e2:	bf00      	nop
 80054e4:	40011400 	.word	0x40011400
 80054e8:	58024400 	.word	0x58024400
 80054ec:	40007800 	.word	0x40007800
 80054f0:	40007c00 	.word	0x40007c00
 80054f4:	58000c00 	.word	0x58000c00
 80054f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80054fc:	4b9d      	ldr	r3, [pc, #628]	; (8005774 <UART_SetConfig+0x928>)
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005500:	e00c      	b.n	800551c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005502:	4b9d      	ldr	r3, [pc, #628]	; (8005778 <UART_SetConfig+0x92c>)
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005506:	e009      	b.n	800551c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800550e:	e005      	b.n	800551c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800551a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 81de 	beq.w	80058e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	4a94      	ldr	r2, [pc, #592]	; (800577c <UART_SetConfig+0x930>)
 800552a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800552e:	461a      	mov	r2, r3
 8005530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005532:	fbb3 f3f2 	udiv	r3, r3, r2
 8005536:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4413      	add	r3, r2
 8005542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005544:	429a      	cmp	r2, r3
 8005546:	d305      	bcc.n	8005554 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800554e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005550:	429a      	cmp	r2, r3
 8005552:	d903      	bls.n	800555c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800555a:	e1c1      	b.n	80058e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555e:	2200      	movs	r2, #0
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	60fa      	str	r2, [r7, #12]
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	4a84      	ldr	r2, [pc, #528]	; (800577c <UART_SetConfig+0x930>)
 800556a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800556e:	b29b      	uxth	r3, r3
 8005570:	2200      	movs	r2, #0
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800557a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800557e:	f7fa ff07 	bl	8000390 <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4610      	mov	r0, r2
 8005588:	4619      	mov	r1, r3
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	020b      	lsls	r3, r1, #8
 8005594:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005598:	0202      	lsls	r2, r0, #8
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	6849      	ldr	r1, [r1, #4]
 800559e:	0849      	lsrs	r1, r1, #1
 80055a0:	2000      	movs	r0, #0
 80055a2:	460c      	mov	r4, r1
 80055a4:	4605      	mov	r5, r0
 80055a6:	eb12 0804 	adds.w	r8, r2, r4
 80055aa:	eb43 0905 	adc.w	r9, r3, r5
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	469a      	mov	sl, r3
 80055b6:	4693      	mov	fp, r2
 80055b8:	4652      	mov	r2, sl
 80055ba:	465b      	mov	r3, fp
 80055bc:	4640      	mov	r0, r8
 80055be:	4649      	mov	r1, r9
 80055c0:	f7fa fee6 	bl	8000390 <__aeabi_uldivmod>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4613      	mov	r3, r2
 80055ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d2:	d308      	bcc.n	80055e6 <UART_SetConfig+0x79a>
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055da:	d204      	bcs.n	80055e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e2:	60da      	str	r2, [r3, #12]
 80055e4:	e17c      	b.n	80058e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055ec:	e178      	b.n	80058e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f6:	f040 80c5 	bne.w	8005784 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80055fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055fe:	2b20      	cmp	r3, #32
 8005600:	dc48      	bgt.n	8005694 <UART_SetConfig+0x848>
 8005602:	2b00      	cmp	r3, #0
 8005604:	db7b      	blt.n	80056fe <UART_SetConfig+0x8b2>
 8005606:	2b20      	cmp	r3, #32
 8005608:	d879      	bhi.n	80056fe <UART_SetConfig+0x8b2>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0x7c4>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	0800569b 	.word	0x0800569b
 8005614:	080056a3 	.word	0x080056a3
 8005618:	080056ff 	.word	0x080056ff
 800561c:	080056ff 	.word	0x080056ff
 8005620:	080056ab 	.word	0x080056ab
 8005624:	080056ff 	.word	0x080056ff
 8005628:	080056ff 	.word	0x080056ff
 800562c:	080056ff 	.word	0x080056ff
 8005630:	080056bb 	.word	0x080056bb
 8005634:	080056ff 	.word	0x080056ff
 8005638:	080056ff 	.word	0x080056ff
 800563c:	080056ff 	.word	0x080056ff
 8005640:	080056ff 	.word	0x080056ff
 8005644:	080056ff 	.word	0x080056ff
 8005648:	080056ff 	.word	0x080056ff
 800564c:	080056ff 	.word	0x080056ff
 8005650:	080056cb 	.word	0x080056cb
 8005654:	080056ff 	.word	0x080056ff
 8005658:	080056ff 	.word	0x080056ff
 800565c:	080056ff 	.word	0x080056ff
 8005660:	080056ff 	.word	0x080056ff
 8005664:	080056ff 	.word	0x080056ff
 8005668:	080056ff 	.word	0x080056ff
 800566c:	080056ff 	.word	0x080056ff
 8005670:	080056ff 	.word	0x080056ff
 8005674:	080056ff 	.word	0x080056ff
 8005678:	080056ff 	.word	0x080056ff
 800567c:	080056ff 	.word	0x080056ff
 8005680:	080056ff 	.word	0x080056ff
 8005684:	080056ff 	.word	0x080056ff
 8005688:	080056ff 	.word	0x080056ff
 800568c:	080056ff 	.word	0x080056ff
 8005690:	080056f1 	.word	0x080056f1
 8005694:	2b40      	cmp	r3, #64	; 0x40
 8005696:	d02e      	beq.n	80056f6 <UART_SetConfig+0x8aa>
 8005698:	e031      	b.n	80056fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800569a:	f7fd fc19 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 800569e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056a0:	e033      	b.n	800570a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a2:	f7fd fc2b 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 80056a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056a8:	e02f      	b.n	800570a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fc00 	bl	8003eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056b8:	e027      	b.n	800570a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ba:	f107 0318 	add.w	r3, r7, #24
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fd4c 	bl	800415c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056c8:	e01f      	b.n	800570a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ca:	4b2d      	ldr	r3, [pc, #180]	; (8005780 <UART_SetConfig+0x934>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056d6:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <UART_SetConfig+0x934>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	08db      	lsrs	r3, r3, #3
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	4a24      	ldr	r2, [pc, #144]	; (8005774 <UART_SetConfig+0x928>)
 80056e2:	fa22 f303 	lsr.w	r3, r2, r3
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056e8:	e00f      	b.n	800570a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80056ea:	4b22      	ldr	r3, [pc, #136]	; (8005774 <UART_SetConfig+0x928>)
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ee:	e00c      	b.n	800570a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056f0:	4b21      	ldr	r3, [pc, #132]	; (8005778 <UART_SetConfig+0x92c>)
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056f4:	e009      	b.n	800570a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056fc:	e005      	b.n	800570a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005708:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800570a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80e7 	beq.w	80058e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	4a19      	ldr	r2, [pc, #100]	; (800577c <UART_SetConfig+0x930>)
 8005718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800571c:	461a      	mov	r2, r3
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	fbb3 f3f2 	udiv	r3, r3, r2
 8005724:	005a      	lsls	r2, r3, #1
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	441a      	add	r2, r3
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	fbb2 f3f3 	udiv	r3, r2, r3
 8005736:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	2b0f      	cmp	r3, #15
 800573c:	d916      	bls.n	800576c <UART_SetConfig+0x920>
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005744:	d212      	bcs.n	800576c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	b29b      	uxth	r3, r3
 800574a:	f023 030f 	bic.w	r3, r3, #15
 800574e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	b29b      	uxth	r3, r3
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	b29a      	uxth	r2, r3
 800575c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800575e:	4313      	orrs	r3, r2
 8005760:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005768:	60da      	str	r2, [r3, #12]
 800576a:	e0b9      	b.n	80058e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005772:	e0b5      	b.n	80058e0 <UART_SetConfig+0xa94>
 8005774:	03d09000 	.word	0x03d09000
 8005778:	003d0900 	.word	0x003d0900
 800577c:	080094d8 	.word	0x080094d8
 8005780:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005784:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005788:	2b20      	cmp	r3, #32
 800578a:	dc49      	bgt.n	8005820 <UART_SetConfig+0x9d4>
 800578c:	2b00      	cmp	r3, #0
 800578e:	db7c      	blt.n	800588a <UART_SetConfig+0xa3e>
 8005790:	2b20      	cmp	r3, #32
 8005792:	d87a      	bhi.n	800588a <UART_SetConfig+0xa3e>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x950>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	08005827 	.word	0x08005827
 80057a0:	0800582f 	.word	0x0800582f
 80057a4:	0800588b 	.word	0x0800588b
 80057a8:	0800588b 	.word	0x0800588b
 80057ac:	08005837 	.word	0x08005837
 80057b0:	0800588b 	.word	0x0800588b
 80057b4:	0800588b 	.word	0x0800588b
 80057b8:	0800588b 	.word	0x0800588b
 80057bc:	08005847 	.word	0x08005847
 80057c0:	0800588b 	.word	0x0800588b
 80057c4:	0800588b 	.word	0x0800588b
 80057c8:	0800588b 	.word	0x0800588b
 80057cc:	0800588b 	.word	0x0800588b
 80057d0:	0800588b 	.word	0x0800588b
 80057d4:	0800588b 	.word	0x0800588b
 80057d8:	0800588b 	.word	0x0800588b
 80057dc:	08005857 	.word	0x08005857
 80057e0:	0800588b 	.word	0x0800588b
 80057e4:	0800588b 	.word	0x0800588b
 80057e8:	0800588b 	.word	0x0800588b
 80057ec:	0800588b 	.word	0x0800588b
 80057f0:	0800588b 	.word	0x0800588b
 80057f4:	0800588b 	.word	0x0800588b
 80057f8:	0800588b 	.word	0x0800588b
 80057fc:	0800588b 	.word	0x0800588b
 8005800:	0800588b 	.word	0x0800588b
 8005804:	0800588b 	.word	0x0800588b
 8005808:	0800588b 	.word	0x0800588b
 800580c:	0800588b 	.word	0x0800588b
 8005810:	0800588b 	.word	0x0800588b
 8005814:	0800588b 	.word	0x0800588b
 8005818:	0800588b 	.word	0x0800588b
 800581c:	0800587d 	.word	0x0800587d
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d02e      	beq.n	8005882 <UART_SetConfig+0xa36>
 8005824:	e031      	b.n	800588a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005826:	f7fd fb53 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 800582a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800582c:	e033      	b.n	8005896 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800582e:	f7fd fb65 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8005832:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005834:	e02f      	b.n	8005896 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fb3a 	bl	8003eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005844:	e027      	b.n	8005896 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005846:	f107 0318 	add.w	r3, r7, #24
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fc86 	bl	800415c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005854:	e01f      	b.n	8005896 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005856:	4b2d      	ldr	r3, [pc, #180]	; (800590c <UART_SetConfig+0xac0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005862:	4b2a      	ldr	r3, [pc, #168]	; (800590c <UART_SetConfig+0xac0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	08db      	lsrs	r3, r3, #3
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	4a28      	ldr	r2, [pc, #160]	; (8005910 <UART_SetConfig+0xac4>)
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005874:	e00f      	b.n	8005896 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005876:	4b26      	ldr	r3, [pc, #152]	; (8005910 <UART_SetConfig+0xac4>)
 8005878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800587a:	e00c      	b.n	8005896 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800587c:	4b25      	ldr	r3, [pc, #148]	; (8005914 <UART_SetConfig+0xac8>)
 800587e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005880:	e009      	b.n	8005896 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005888:	e005      	b.n	8005896 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005894:	bf00      	nop
    }

    if (pclk != 0U)
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d021      	beq.n	80058e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <UART_SetConfig+0xacc>)
 80058a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	441a      	add	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	2b0f      	cmp	r3, #15
 80058c4:	d909      	bls.n	80058da <UART_SetConfig+0xa8e>
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058cc:	d205      	bcs.n	80058da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60da      	str	r2, [r3, #12]
 80058d8:	e002      	b.n	80058e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2200      	movs	r2, #0
 80058f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80058fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005900:	4618      	mov	r0, r3
 8005902:	3748      	adds	r7, #72	; 0x48
 8005904:	46bd      	mov	sp, r7
 8005906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590a:	bf00      	nop
 800590c:	58024400 	.word	0x58024400
 8005910:	03d09000 	.word	0x03d09000
 8005914:	003d0900 	.word	0x003d0900
 8005918:	080094d8 	.word	0x080094d8

0800591c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01a      	beq.n	8005a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a1a:	d10a      	bne.n	8005a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	605a      	str	r2, [r3, #4]
  }
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a70:	f7fb fc7c 	bl	800136c <HAL_GetTick>
 8005a74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d10e      	bne.n	8005aa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f82f 	bl	8005af6 <UART_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e025      	b.n	8005aee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d10e      	bne.n	8005ace <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f819 	bl	8005af6 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b09c      	sub	sp, #112	; 0x70
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b06:	e0a9      	b.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0e:	f000 80a5 	beq.w	8005c5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fb fc2b 	bl	800136c <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d140      	bne.n	8005baa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b3c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e6      	bne.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	663b      	str	r3, [r7, #96]	; 0x60
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e5      	bne.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e069      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d051      	beq.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc6:	d149      	bne.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e6      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	613b      	str	r3, [r7, #16]
   return(result);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3308      	adds	r3, #8
 8005c22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c24:	623a      	str	r2, [r7, #32]
 8005c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	69f9      	ldr	r1, [r7, #28]
 8005c2a:	6a3a      	ldr	r2, [r7, #32]
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e5      	bne.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e010      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4013      	ands	r3, r2
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	f43f af46 	beq.w	8005b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3770      	adds	r7, #112	; 0x70
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_UARTEx_DisableFifoMode+0x16>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e027      	b.n	8005cec <HAL_UARTEx_DisableFifoMode+0x66>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e02d      	b.n	8005d6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	; 0x24
 8005d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f84f 	bl	8005df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e02d      	b.n	8005de8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2224      	movs	r2, #36	; 0x24
 8005d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f811 	bl	8005df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d108      	bne.n	8005e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e10:	e031      	b.n	8005e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e12:	2310      	movs	r3, #16
 8005e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e16:	2310      	movs	r3, #16
 8005e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	0e5b      	lsrs	r3, r3, #25
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	0f5b      	lsrs	r3, r3, #29
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	7b3a      	ldrb	r2, [r7, #12]
 8005e3e:	4911      	ldr	r1, [pc, #68]	; (8005e84 <UARTEx_SetNbDataToProcess+0x94>)
 8005e40:	5c8a      	ldrb	r2, [r1, r2]
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e46:	7b3a      	ldrb	r2, [r7, #12]
 8005e48:	490f      	ldr	r1, [pc, #60]	; (8005e88 <UARTEx_SetNbDataToProcess+0x98>)
 8005e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	7b7a      	ldrb	r2, [r7, #13]
 8005e5c:	4909      	ldr	r1, [pc, #36]	; (8005e84 <UARTEx_SetNbDataToProcess+0x94>)
 8005e5e:	5c8a      	ldrb	r2, [r1, r2]
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e64:	7b7a      	ldrb	r2, [r7, #13]
 8005e66:	4908      	ldr	r1, [pc, #32]	; (8005e88 <UARTEx_SetNbDataToProcess+0x98>)
 8005e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	080094f0 	.word	0x080094f0
 8005e88:	080094f8 	.word	0x080094f8

08005e8c <__NVIC_SetPriority>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	6039      	str	r1, [r7, #0]
 8005e96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	db0a      	blt.n	8005eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	490c      	ldr	r1, [pc, #48]	; (8005ed8 <__NVIC_SetPriority+0x4c>)
 8005ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eaa:	0112      	lsls	r2, r2, #4
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005eb4:	e00a      	b.n	8005ecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	4908      	ldr	r1, [pc, #32]	; (8005edc <__NVIC_SetPriority+0x50>)
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	3b04      	subs	r3, #4
 8005ec4:	0112      	lsls	r2, r2, #4
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	440b      	add	r3, r1
 8005eca:	761a      	strb	r2, [r3, #24]
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	e000e100 	.word	0xe000e100
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <SysTick_Handler+0x1c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ee8:	f002 f962 	bl	80081b0 <xTaskGetSchedulerState>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d001      	beq.n	8005ef6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ef2:	f000 fd99 	bl	8006a28 <xPortSysTickHandler>
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	e000e010 	.word	0xe000e010

08005f00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f04:	2100      	movs	r1, #0
 8005f06:	f06f 0004 	mvn.w	r0, #4
 8005f0a:	f7ff ffbf 	bl	8005e8c <__NVIC_SetPriority>
#endif
}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f1a:	f3ef 8305 	mrs	r3, IPSR
 8005f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f26:	f06f 0305 	mvn.w	r3, #5
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	e00c      	b.n	8005f48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <osKernelInitialize+0x44>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d105      	bne.n	8005f42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f36:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <osKernelInitialize+0x44>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	e002      	b.n	8005f48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295
 8005f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f48:	687b      	ldr	r3, [r7, #4]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	24000218 	.word	0x24000218

08005f5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f62:	f3ef 8305 	mrs	r3, IPSR
 8005f66:	603b      	str	r3, [r7, #0]
  return(result);
 8005f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f6e:	f06f 0305 	mvn.w	r3, #5
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	e010      	b.n	8005f98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <osKernelStart+0x48>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d109      	bne.n	8005f92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f7e:	f7ff ffbf 	bl	8005f00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <osKernelStart+0x48>)
 8005f84:	2202      	movs	r2, #2
 8005f86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f88:	f001 fcb6 	bl	80078f8 <vTaskStartScheduler>
      stat = osOK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	e002      	b.n	8005f98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f92:	f04f 33ff 	mov.w	r3, #4294967295
 8005f96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f98:	687b      	ldr	r3, [r7, #4]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	24000218 	.word	0x24000218

08005fa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08e      	sub	sp, #56	; 0x38
 8005fac:	af04      	add	r7, sp, #16
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb8:	f3ef 8305 	mrs	r3, IPSR
 8005fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005fbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d17e      	bne.n	80060c2 <osThreadNew+0x11a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d07b      	beq.n	80060c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005fce:	2318      	movs	r3, #24
 8005fd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d045      	beq.n	800606e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <osThreadNew+0x48>
        name = attr->name;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <osThreadNew+0x6e>
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b38      	cmp	r3, #56	; 0x38
 8006008:	d805      	bhi.n	8006016 <osThreadNew+0x6e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <osThreadNew+0x72>
        return (NULL);
 8006016:	2300      	movs	r3, #0
 8006018:	e054      	b.n	80060c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00e      	beq.n	8006050 <osThreadNew+0xa8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2bbb      	cmp	r3, #187	; 0xbb
 8006038:	d90a      	bls.n	8006050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800603e:	2b00      	cmp	r3, #0
 8006040:	d006      	beq.n	8006050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <osThreadNew+0xa8>
        mem = 1;
 800604a:	2301      	movs	r3, #1
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	e010      	b.n	8006072 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10c      	bne.n	8006072 <osThreadNew+0xca>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d108      	bne.n	8006072 <osThreadNew+0xca>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <osThreadNew+0xca>
          mem = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e001      	b.n	8006072 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d110      	bne.n	800609a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006080:	9202      	str	r2, [sp, #8]
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a3a      	ldr	r2, [r7, #32]
 800608c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f001 fa46 	bl	8007520 <xTaskCreateStatic>
 8006094:	4603      	mov	r3, r0
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	e013      	b.n	80060c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d110      	bne.n	80060c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f107 0310 	add.w	r3, r7, #16
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f001 fa91 	bl	80075da <xTaskCreate>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <osThreadNew+0x11a>
            hTask = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060c2:	693b      	ldr	r3, [r7, #16]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3728      	adds	r7, #40	; 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d4:	f3ef 8305 	mrs	r3, IPSR
 80060d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80060da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <osDelay+0x1c>
    stat = osErrorISR;
 80060e0:	f06f 0305 	mvn.w	r3, #5
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e007      	b.n	80060f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fbcc 	bl	8007890 <vTaskDelay>
    }
  }

  return (stat);
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a07      	ldr	r2, [pc, #28]	; (8006130 <vApplicationGetIdleTaskMemory+0x2c>)
 8006114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4a06      	ldr	r2, [pc, #24]	; (8006134 <vApplicationGetIdleTaskMemory+0x30>)
 800611a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2280      	movs	r2, #128	; 0x80
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	2400021c 	.word	0x2400021c
 8006134:	240002d8 	.word	0x240002d8

08006138 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a07      	ldr	r2, [pc, #28]	; (8006164 <vApplicationGetTimerTaskMemory+0x2c>)
 8006148:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4a06      	ldr	r2, [pc, #24]	; (8006168 <vApplicationGetTimerTaskMemory+0x30>)
 800614e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006156:	601a      	str	r2, [r3, #0]
}
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	240004d8 	.word	0x240004d8
 8006168:	24000594 	.word	0x24000594

0800616c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006178:	f001 fc2e 	bl	80079d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800617c:	4b5b      	ldr	r3, [pc, #364]	; (80062ec <pvPortMalloc+0x180>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006184:	f000 f920 	bl	80063c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006188:	4b59      	ldr	r3, [pc, #356]	; (80062f0 <pvPortMalloc+0x184>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	f040 8093 	bne.w	80062bc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01d      	beq.n	80061d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800619c:	2208      	movs	r2, #8
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d014      	beq.n	80061d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f023 0307 	bic.w	r3, r3, #7
 80061b4:	3308      	adds	r3, #8
 80061b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061d4:	bf00      	nop
 80061d6:	e7fe      	b.n	80061d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d06e      	beq.n	80062bc <pvPortMalloc+0x150>
 80061de:	4b45      	ldr	r3, [pc, #276]	; (80062f4 <pvPortMalloc+0x188>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d869      	bhi.n	80062bc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061e8:	4b43      	ldr	r3, [pc, #268]	; (80062f8 <pvPortMalloc+0x18c>)
 80061ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061ec:	4b42      	ldr	r3, [pc, #264]	; (80062f8 <pvPortMalloc+0x18c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061f2:	e004      	b.n	80061fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	429a      	cmp	r2, r3
 8006206:	d903      	bls.n	8006210 <pvPortMalloc+0xa4>
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1f1      	bne.n	80061f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006210:	4b36      	ldr	r3, [pc, #216]	; (80062ec <pvPortMalloc+0x180>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	429a      	cmp	r2, r3
 8006218:	d050      	beq.n	80062bc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2208      	movs	r2, #8
 8006220:	4413      	add	r3, r2
 8006222:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	2308      	movs	r3, #8
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	429a      	cmp	r2, r3
 800623a:	d91f      	bls.n	800627c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800623c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4413      	add	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <pvPortMalloc+0xf8>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	613b      	str	r3, [r7, #16]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	1ad2      	subs	r2, r2, r3
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006276:	69b8      	ldr	r0, [r7, #24]
 8006278:	f000 f908 	bl	800648c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800627c:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <pvPortMalloc+0x188>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <pvPortMalloc+0x188>)
 8006288:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800628a:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <pvPortMalloc+0x188>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b1b      	ldr	r3, [pc, #108]	; (80062fc <pvPortMalloc+0x190>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d203      	bcs.n	800629e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006296:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <pvPortMalloc+0x188>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a18      	ldr	r2, [pc, #96]	; (80062fc <pvPortMalloc+0x190>)
 800629c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <pvPortMalloc+0x184>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <pvPortMalloc+0x194>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3301      	adds	r3, #1
 80062b8:	4a11      	ldr	r2, [pc, #68]	; (8006300 <pvPortMalloc+0x194>)
 80062ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062bc:	f001 fb9a 	bl	80079f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <pvPortMalloc+0x174>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	60fb      	str	r3, [r7, #12]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <pvPortMalloc+0x172>
	return pvReturn;
 80062e0:	69fb      	ldr	r3, [r7, #28]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3728      	adds	r7, #40	; 0x28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	2400459c 	.word	0x2400459c
 80062f0:	240045b0 	.word	0x240045b0
 80062f4:	240045a0 	.word	0x240045a0
 80062f8:	24004594 	.word	0x24004594
 80062fc:	240045a4 	.word	0x240045a4
 8006300:	240045a8 	.word	0x240045a8

08006304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d04d      	beq.n	80063b2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006316:	2308      	movs	r3, #8
 8006318:	425b      	negs	r3, r3
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4413      	add	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	4b24      	ldr	r3, [pc, #144]	; (80063bc <vPortFree+0xb8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <vPortFree+0x44>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60fb      	str	r3, [r7, #12]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <vPortFree+0x62>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	60bb      	str	r3, [r7, #8]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	4b14      	ldr	r3, [pc, #80]	; (80063bc <vPortFree+0xb8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01e      	beq.n	80063b2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11a      	bne.n	80063b2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <vPortFree+0xb8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	43db      	mvns	r3, r3
 8006386:	401a      	ands	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800638c:	f001 fb24 	bl	80079d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <vPortFree+0xbc>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4413      	add	r3, r2
 800639a:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <vPortFree+0xbc>)
 800639c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639e:	6938      	ldr	r0, [r7, #16]
 80063a0:	f000 f874 	bl	800648c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063a4:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <vPortFree+0xc0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a06      	ldr	r2, [pc, #24]	; (80063c4 <vPortFree+0xc0>)
 80063ac:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063ae:	f001 fb21 	bl	80079f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063b2:	bf00      	nop
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	240045b0 	.word	0x240045b0
 80063c0:	240045a0 	.word	0x240045a0
 80063c4:	240045ac 	.word	0x240045ac

080063c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <prvHeapInit+0xac>)
 80063d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00c      	beq.n	80063fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3307      	adds	r3, #7
 80063e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <prvHeapInit+0xac>)
 80063f8:	4413      	add	r3, r2
 80063fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006400:	4a1d      	ldr	r2, [pc, #116]	; (8006478 <prvHeapInit+0xb0>)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006406:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <prvHeapInit+0xb0>)
 8006408:	2200      	movs	r2, #0
 800640a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	4413      	add	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006414:	2208      	movs	r2, #8
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0307 	bic.w	r3, r3, #7
 8006422:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a15      	ldr	r2, [pc, #84]	; (800647c <prvHeapInit+0xb4>)
 8006428:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800642a:	4b14      	ldr	r3, [pc, #80]	; (800647c <prvHeapInit+0xb4>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2200      	movs	r2, #0
 8006430:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <prvHeapInit+0xb4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	1ad2      	subs	r2, r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <prvHeapInit+0xb4>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4a0a      	ldr	r2, [pc, #40]	; (8006480 <prvHeapInit+0xb8>)
 8006456:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a09      	ldr	r2, [pc, #36]	; (8006484 <prvHeapInit+0xbc>)
 800645e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <prvHeapInit+0xc0>)
 8006462:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006466:	601a      	str	r2, [r3, #0]
}
 8006468:	bf00      	nop
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	24000994 	.word	0x24000994
 8006478:	24004594 	.word	0x24004594
 800647c:	2400459c 	.word	0x2400459c
 8006480:	240045a4 	.word	0x240045a4
 8006484:	240045a0 	.word	0x240045a0
 8006488:	240045b0 	.word	0x240045b0

0800648c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006494:	4b28      	ldr	r3, [pc, #160]	; (8006538 <prvInsertBlockIntoFreeList+0xac>)
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e002      	b.n	80064a0 <prvInsertBlockIntoFreeList+0x14>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d8f7      	bhi.n	800649a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4413      	add	r3, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d108      	bne.n	80064ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	441a      	add	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	441a      	add	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d118      	bne.n	8006514 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b15      	ldr	r3, [pc, #84]	; (800653c <prvInsertBlockIntoFreeList+0xb0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d00d      	beq.n	800650a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	441a      	add	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	e008      	b.n	800651c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800650a:	4b0c      	ldr	r3, [pc, #48]	; (800653c <prvInsertBlockIntoFreeList+0xb0>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e003      	b.n	800651c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d002      	beq.n	800652a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	24004594 	.word	0x24004594
 800653c:	2400459c 	.word	0x2400459c

08006540 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f103 0208 	add.w	r2, r3, #8
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f04f 32ff 	mov.w	r2, #4294967295
 8006558:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f103 0208 	add.w	r2, r3, #8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f103 0208 	add.w	r2, r3, #8
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d103      	bne.n	8006602 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	e00c      	b.n	800661c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3308      	adds	r3, #8
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e002      	b.n	8006610 <vListInsert+0x2e>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	429a      	cmp	r2, r3
 800661a:	d2f6      	bcs.n	800660a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6892      	ldr	r2, [r2, #8]
 800666a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6852      	ldr	r2, [r2, #4]
 8006674:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d103      	bne.n	8006688 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	1e5a      	subs	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3b04      	subs	r3, #4
 80066b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3b04      	subs	r3, #4
 80066c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f023 0201 	bic.w	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3b04      	subs	r3, #4
 80066d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066d8:	4a0c      	ldr	r2, [pc, #48]	; (800670c <pxPortInitialiseStack+0x64>)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3b14      	subs	r3, #20
 80066e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f06f 0202 	mvn.w	r2, #2
 80066f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3b20      	subs	r3, #32
 80066fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066fe:	68fb      	ldr	r3, [r7, #12]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	08006711 	.word	0x08006711

08006710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800671a:	4b12      	ldr	r3, [pc, #72]	; (8006764 <prvTaskExitError+0x54>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006722:	d00a      	beq.n	800673a <prvTaskExitError+0x2a>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	60fb      	str	r3, [r7, #12]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <prvTaskExitError+0x28>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	60bb      	str	r3, [r7, #8]
}
 800674c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800674e:	bf00      	nop
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0fc      	beq.n	8006750 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	24000010 	.word	0x24000010
	...

08006770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <pxCurrentTCBConst2>)
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	6808      	ldr	r0, [r1, #0]
 8006776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	f380 8809 	msr	PSP, r0
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8811 	msr	BASEPRI, r0
 800678a:	4770      	bx	lr
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst2>:
 8006790:	240045fc 	.word	0x240045fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006798:	4808      	ldr	r0, [pc, #32]	; (80067bc <prvPortStartFirstTask+0x24>)
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	f380 8808 	msr	MSP, r0
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8814 	msr	CONTROL, r0
 80067aa:	b662      	cpsie	i
 80067ac:	b661      	cpsie	f
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	df00      	svc	0
 80067b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ba:	bf00      	nop
 80067bc:	e000ed08 	.word	0xe000ed08

080067c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067c6:	4b46      	ldr	r3, [pc, #280]	; (80068e0 <xPortStartScheduler+0x120>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a46      	ldr	r2, [pc, #280]	; (80068e4 <xPortStartScheduler+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10a      	bne.n	80067e6 <xPortStartScheduler+0x26>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	613b      	str	r3, [r7, #16]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067e6:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <xPortStartScheduler+0x120>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3f      	ldr	r2, [pc, #252]	; (80068e8 <xPortStartScheduler+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10a      	bne.n	8006806 <xPortStartScheduler+0x46>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	60fb      	str	r3, [r7, #12]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006806:	4b39      	ldr	r3, [pc, #228]	; (80068ec <xPortStartScheduler+0x12c>)
 8006808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	22ff      	movs	r2, #255	; 0xff
 8006816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006828:	b2da      	uxtb	r2, r3
 800682a:	4b31      	ldr	r3, [pc, #196]	; (80068f0 <xPortStartScheduler+0x130>)
 800682c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800682e:	4b31      	ldr	r3, [pc, #196]	; (80068f4 <xPortStartScheduler+0x134>)
 8006830:	2207      	movs	r2, #7
 8006832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006834:	e009      	b.n	800684a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <xPortStartScheduler+0x134>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3b01      	subs	r3, #1
 800683c:	4a2d      	ldr	r2, [pc, #180]	; (80068f4 <xPortStartScheduler+0x134>)
 800683e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	b2db      	uxtb	r3, r3
 8006848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d0ef      	beq.n	8006836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006856:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <xPortStartScheduler+0x134>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f1c3 0307 	rsb	r3, r3, #7
 800685e:	2b04      	cmp	r3, #4
 8006860:	d00a      	beq.n	8006878 <xPortStartScheduler+0xb8>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	60bb      	str	r3, [r7, #8]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <xPortStartScheduler+0x134>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	4a1d      	ldr	r2, [pc, #116]	; (80068f4 <xPortStartScheduler+0x134>)
 8006880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <xPortStartScheduler+0x134>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800688a:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <xPortStartScheduler+0x134>)
 800688c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006896:	4b18      	ldr	r3, [pc, #96]	; (80068f8 <xPortStartScheduler+0x138>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <xPortStartScheduler+0x138>)
 800689c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <xPortStartScheduler+0x138>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <xPortStartScheduler+0x138>)
 80068a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068ae:	f000 f8dd 	bl	8006a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068b2:	4b12      	ldr	r3, [pc, #72]	; (80068fc <xPortStartScheduler+0x13c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068b8:	f000 f8fc 	bl	8006ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068bc:	4b10      	ldr	r3, [pc, #64]	; (8006900 <xPortStartScheduler+0x140>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <xPortStartScheduler+0x140>)
 80068c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068c8:	f7ff ff66 	bl	8006798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068cc:	f001 f9fa 	bl	8007cc4 <vTaskSwitchContext>
	prvTaskExitError();
 80068d0:	f7ff ff1e 	bl	8006710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	e000ed00 	.word	0xe000ed00
 80068e4:	410fc271 	.word	0x410fc271
 80068e8:	410fc270 	.word	0x410fc270
 80068ec:	e000e400 	.word	0xe000e400
 80068f0:	240045b4 	.word	0x240045b4
 80068f4:	240045b8 	.word	0x240045b8
 80068f8:	e000ed20 	.word	0xe000ed20
 80068fc:	24000010 	.word	0x24000010
 8006900:	e000ef34 	.word	0xe000ef34

08006904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	607b      	str	r3, [r7, #4]
}
 800691c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800691e:	4b0f      	ldr	r3, [pc, #60]	; (800695c <vPortEnterCritical+0x58>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	4a0d      	ldr	r2, [pc, #52]	; (800695c <vPortEnterCritical+0x58>)
 8006926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006928:	4b0c      	ldr	r3, [pc, #48]	; (800695c <vPortEnterCritical+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10f      	bne.n	8006950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <vPortEnterCritical+0x5c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <vPortEnterCritical+0x4c>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	603b      	str	r3, [r7, #0]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <vPortEnterCritical+0x4a>
	}
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	24000010 	.word	0x24000010
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <vPortExitCritical+0x50>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <vPortExitCritical+0x24>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <vPortExitCritical+0x50>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3b01      	subs	r3, #1
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <vPortExitCritical+0x50>)
 8006990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006992:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <vPortExitCritical+0x50>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d105      	bne.n	80069a6 <vPortExitCritical+0x42>
 800699a:	2300      	movs	r3, #0
 800699c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	24000010 	.word	0x24000010
	...

080069c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069c0:	f3ef 8009 	mrs	r0, PSP
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <pxCurrentTCBConst>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	f01e 0f10 	tst.w	lr, #16
 80069d0:	bf08      	it	eq
 80069d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069da:	6010      	str	r0, [r2, #0]
 80069dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069e4:	f380 8811 	msr	BASEPRI, r0
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f001 f968 	bl	8007cc4 <vTaskSwitchContext>
 80069f4:	f04f 0000 	mov.w	r0, #0
 80069f8:	f380 8811 	msr	BASEPRI, r0
 80069fc:	bc09      	pop	{r0, r3}
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	6808      	ldr	r0, [r1, #0]
 8006a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a06:	f01e 0f10 	tst.w	lr, #16
 8006a0a:	bf08      	it	eq
 8006a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a10:	f380 8809 	msr	PSP, r0
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst>:
 8006a20:	240045fc 	.word	0x240045fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
}
 8006a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a42:	f001 f885 	bl	8007b50 <xTaskIncrementTick>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <xPortSysTickHandler+0x40>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	f383 8811 	msr	BASEPRI, r3
}
 8006a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <vPortSetupTimerInterrupt+0x38>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <vPortSetupTimerInterrupt+0x3c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <vPortSetupTimerInterrupt+0x40>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <vPortSetupTimerInterrupt+0x44>)
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a8e:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	e000e010 	.word	0xe000e010
 8006aa4:	e000e018 	.word	0xe000e018
 8006aa8:	24000000 	.word	0x24000000
 8006aac:	10624dd3 	.word	0x10624dd3
 8006ab0:	e000e014 	.word	0xe000e014

08006ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ac4 <vPortEnableVFP+0x10>
 8006ab8:	6801      	ldr	r1, [r0, #0]
 8006aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006abe:	6001      	str	r1, [r0, #0]
 8006ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ac2:	bf00      	nop
 8006ac4:	e000ed88 	.word	0xe000ed88

08006ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ace:	f3ef 8305 	mrs	r3, IPSR
 8006ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d914      	bls.n	8006b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ada:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <vPortValidateInterruptPriority+0x70>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ae4:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <vPortValidateInterruptPriority+0x74>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	7afa      	ldrb	r2, [r7, #11]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d20a      	bcs.n	8006b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <vPortValidateInterruptPriority+0x78>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <vPortValidateInterruptPriority+0x7c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d90a      	bls.n	8006b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	603b      	str	r3, [r7, #0]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <vPortValidateInterruptPriority+0x60>
	}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	e000e3f0 	.word	0xe000e3f0
 8006b3c:	240045b4 	.word	0x240045b4
 8006b40:	e000ed0c 	.word	0xe000ed0c
 8006b44:	240045b8 	.word	0x240045b8

08006b48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xQueueGenericReset+0x2a>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	60bb      	str	r3, [r7, #8]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b72:	f7ff fec7 	bl	8006904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b82:	fb01 f303 	mul.w	r3, r1, r3
 8006b86:	441a      	add	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	68f9      	ldr	r1, [r7, #12]
 8006ba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	441a      	add	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	22ff      	movs	r2, #255	; 0xff
 8006bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	22ff      	movs	r2, #255	; 0xff
 8006bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d114      	bne.n	8006bf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01a      	beq.n	8006c06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3310      	adds	r3, #16
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f929 	bl	8007e2c <xTaskRemoveFromEventList>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d012      	beq.n	8006c06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006be0:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <xQueueGenericReset+0xcc>)
 8006be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	e009      	b.n	8006c06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3310      	adds	r3, #16
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff fca2 	bl	8006540 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3324      	adds	r3, #36	; 0x24
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fc9d 	bl	8006540 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c06:	f7ff fead 	bl	8006964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c0a:	2301      	movs	r3, #1
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	e000ed04 	.word	0xe000ed04

08006c18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08e      	sub	sp, #56	; 0x38
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <xQueueGenericCreateStatic+0x52>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <xQueueGenericCreateStatic+0x56>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e000      	b.n	8006c70 <xQueueGenericCreateStatic+0x58>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	623b      	str	r3, [r7, #32]
}
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <xQueueGenericCreateStatic+0x7e>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <xQueueGenericCreateStatic+0x82>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <xQueueGenericCreateStatic+0x84>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	61fb      	str	r3, [r7, #28]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cb6:	2350      	movs	r3, #80	; 0x50
 8006cb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b50      	cmp	r3, #80	; 0x50
 8006cbe:	d00a      	beq.n	8006cd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	61bb      	str	r3, [r7, #24]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00d      	beq.n	8006cfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f805 	bl	8006d08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3730      	adds	r7, #48	; 0x30
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e002      	b.n	8006d2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d36:	2101      	movs	r1, #1
 8006d38:	69b8      	ldr	r0, [r7, #24]
 8006d3a:	f7ff ff05 	bl	8006b48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	78fa      	ldrb	r2, [r7, #3]
 8006d42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d46:	bf00      	nop
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08e      	sub	sp, #56	; 0x38
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <xQueueGenericSend+0x32>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d103      	bne.n	8006d90 <xQueueGenericSend+0x40>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <xQueueGenericSend+0x44>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <xQueueGenericSend+0x46>
 8006d94:	2300      	movs	r3, #0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <xQueueGenericSend+0x60>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d103      	bne.n	8006dbe <xQueueGenericSend+0x6e>
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <xQueueGenericSend+0x72>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xQueueGenericSend+0x74>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xQueueGenericSend+0x8e>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	623b      	str	r3, [r7, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dde:	f001 f9e7 	bl	80081b0 <xTaskGetSchedulerState>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <xQueueGenericSend+0x9e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <xQueueGenericSend+0xa2>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <xQueueGenericSend+0xa4>
 8006df2:	2300      	movs	r3, #0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <xQueueGenericSend+0xbe>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	61fb      	str	r3, [r7, #28]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e0e:	f7ff fd79 	bl	8006904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d302      	bcc.n	8006e24 <xQueueGenericSend+0xd4>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d129      	bne.n	8006e78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e2a:	f000 fa0b 	bl	8007244 <prvCopyDataToQueue>
 8006e2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	3324      	adds	r3, #36	; 0x24
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fff5 	bl	8007e2c <xTaskRemoveFromEventList>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d013      	beq.n	8006e70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e48:	4b3f      	ldr	r3, [pc, #252]	; (8006f48 <xQueueGenericSend+0x1f8>)
 8006e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	e00a      	b.n	8006e70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e60:	4b39      	ldr	r3, [pc, #228]	; (8006f48 <xQueueGenericSend+0x1f8>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e70:	f7ff fd78 	bl	8006964 <vPortExitCritical>
				return pdPASS;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e063      	b.n	8006f40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e7e:	f7ff fd71 	bl	8006964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	e05c      	b.n	8006f40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e8c:	f107 0314 	add.w	r3, r7, #20
 8006e90:	4618      	mov	r0, r3
 8006e92:	f001 f82f 	bl	8007ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e96:	2301      	movs	r3, #1
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e9a:	f7ff fd63 	bl	8006964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e9e:	f000 fd9b 	bl	80079d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ea2:	f7ff fd2f 	bl	8006904 <vPortEnterCritical>
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb2:	d103      	bne.n	8006ebc <xQueueGenericSend+0x16c>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ec2:	b25b      	sxtb	r3, r3
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d103      	bne.n	8006ed2 <xQueueGenericSend+0x182>
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ed2:	f7ff fd47 	bl	8006964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ed6:	1d3a      	adds	r2, r7, #4
 8006ed8:	f107 0314 	add.w	r3, r7, #20
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 f81e 	bl	8007f20 <xTaskCheckForTimeOut>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d124      	bne.n	8006f34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eec:	f000 faa2 	bl	8007434 <prvIsQueueFull>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d018      	beq.n	8006f28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	3310      	adds	r3, #16
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 ff44 	bl	8007d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f06:	f000 fa2d 	bl	8007364 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f0a:	f000 fd73 	bl	80079f4 <xTaskResumeAll>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f47f af7c 	bne.w	8006e0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006f16:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <xQueueGenericSend+0x1f8>)
 8006f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	e772      	b.n	8006e0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f2a:	f000 fa1b 	bl	8007364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f2e:	f000 fd61 	bl	80079f4 <xTaskResumeAll>
 8006f32:	e76c      	b.n	8006e0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f36:	f000 fa15 	bl	8007364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f3a:	f000 fd5b 	bl	80079f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3738      	adds	r7, #56	; 0x38
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	e000ed04 	.word	0xe000ed04

08006f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b090      	sub	sp, #64	; 0x40
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <xQueueGenericSendFromISR+0x3c>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <xQueueGenericSendFromISR+0x40>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <xQueueGenericSendFromISR+0x42>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d103      	bne.n	8006fb6 <xQueueGenericSendFromISR+0x6a>
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <xQueueGenericSendFromISR+0x6e>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <xQueueGenericSendFromISR+0x70>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	623b      	str	r3, [r7, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fd6:	f7ff fd77 	bl	8006ac8 <vPortValidateInterruptPriority>
	__asm volatile
 8006fda:	f3ef 8211 	mrs	r2, BASEPRI
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	61fa      	str	r2, [r7, #28]
 8006ff0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d302      	bcc.n	8007008 <xQueueGenericSendFromISR+0xbc>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d12f      	bne.n	8007068 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800701e:	f000 f911 	bl	8007244 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007022:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702a:	d112      	bne.n	8007052 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	2b00      	cmp	r3, #0
 8007032:	d016      	beq.n	8007062 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	3324      	adds	r3, #36	; 0x24
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fef7 	bl	8007e2c <xTaskRemoveFromEventList>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00e      	beq.n	8007062 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00b      	beq.n	8007062 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	e007      	b.n	8007062 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007052:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007056:	3301      	adds	r3, #1
 8007058:	b2db      	uxtb	r3, r3
 800705a:	b25a      	sxtb	r2, r3
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007062:	2301      	movs	r3, #1
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007066:	e001      	b.n	800706c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007068:	2300      	movs	r3, #0
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f383 8811 	msr	BASEPRI, r3
}
 8007076:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800707a:	4618      	mov	r0, r3
 800707c:	3740      	adds	r7, #64	; 0x40
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007090:	2300      	movs	r3, #0
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xQueueReceive+0x30>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	623b      	str	r3, [r7, #32]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <xQueueReceive+0x3e>
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <xQueueReceive+0x42>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueReceive+0x44>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueReceive+0x5e>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61fb      	str	r3, [r7, #28]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070e2:	f001 f865 	bl	80081b0 <xTaskGetSchedulerState>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <xQueueReceive+0x6e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <xQueueReceive+0x72>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <xQueueReceive+0x74>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueReceive+0x8e>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	61bb      	str	r3, [r7, #24]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007112:	f7ff fbf7 	bl	8006904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01f      	beq.n	8007162 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007126:	f000 f8f7 	bl	8007318 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	1e5a      	subs	r2, r3, #1
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00f      	beq.n	800715a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	3310      	adds	r3, #16
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fe74 	bl	8007e2c <xTaskRemoveFromEventList>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d007      	beq.n	800715a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800714a:	4b3d      	ldr	r3, [pc, #244]	; (8007240 <xQueueReceive+0x1bc>)
 800714c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800715a:	f7ff fc03 	bl	8006964 <vPortExitCritical>
				return pdPASS;
 800715e:	2301      	movs	r3, #1
 8007160:	e069      	b.n	8007236 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007168:	f7ff fbfc 	bl	8006964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800716c:	2300      	movs	r3, #0
 800716e:	e062      	b.n	8007236 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007176:	f107 0310 	add.w	r3, r7, #16
 800717a:	4618      	mov	r0, r3
 800717c:	f000 feba 	bl	8007ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007184:	f7ff fbee 	bl	8006964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007188:	f000 fc26 	bl	80079d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800718c:	f7ff fbba 	bl	8006904 <vPortEnterCritical>
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007196:	b25b      	sxtb	r3, r3
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d103      	bne.n	80071a6 <xQueueReceive+0x122>
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ac:	b25b      	sxtb	r3, r3
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d103      	bne.n	80071bc <xQueueReceive+0x138>
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071bc:	f7ff fbd2 	bl	8006964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071c0:	1d3a      	adds	r2, r7, #4
 80071c2:	f107 0310 	add.w	r3, r7, #16
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fea9 	bl	8007f20 <xTaskCheckForTimeOut>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d123      	bne.n	800721c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d6:	f000 f917 	bl	8007408 <prvIsQueueEmpty>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d017      	beq.n	8007210 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4611      	mov	r1, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fdcf 	bl	8007d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f0:	f000 f8b8 	bl	8007364 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071f4:	f000 fbfe 	bl	80079f4 <xTaskResumeAll>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d189      	bne.n	8007112 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <xQueueReceive+0x1bc>)
 8007200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	e780      	b.n	8007112 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007212:	f000 f8a7 	bl	8007364 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007216:	f000 fbed 	bl	80079f4 <xTaskResumeAll>
 800721a:	e77a      	b.n	8007112 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800721c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800721e:	f000 f8a1 	bl	8007364 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007222:	f000 fbe7 	bl	80079f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007228:	f000 f8ee 	bl	8007408 <prvIsQueueEmpty>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	f43f af6f 	beq.w	8007112 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007234:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007236:	4618      	mov	r0, r3
 8007238:	3730      	adds	r7, #48	; 0x30
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10d      	bne.n	800727e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d14d      	bne.n	8007306 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 ffbc 	bl	80081ec <xTaskPriorityDisinherit>
 8007274:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	e043      	b.n	8007306 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d119      	bne.n	80072b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6858      	ldr	r0, [r3, #4]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	461a      	mov	r2, r3
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	f001 fbe8 	bl	8008a64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	441a      	add	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d32b      	bcc.n	8007306 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	e026      	b.n	8007306 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	68d8      	ldr	r0, [r3, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	461a      	mov	r2, r3
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	f001 fbce 	bl	8008a64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d0:	425b      	negs	r3, r3
 80072d2:	441a      	add	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d207      	bcs.n	80072f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	425b      	negs	r3, r3
 80072ee:	441a      	add	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d105      	bne.n	8007306 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	3b01      	subs	r3, #1
 8007304:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800730e:	697b      	ldr	r3, [r7, #20]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d018      	beq.n	800735c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	441a      	add	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	429a      	cmp	r2, r3
 8007342:	d303      	bcc.n	800734c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68d9      	ldr	r1, [r3, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	461a      	mov	r2, r3
 8007356:	6838      	ldr	r0, [r7, #0]
 8007358:	f001 fb84 	bl	8008a64 <memcpy>
	}
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800736c:	f7ff faca 	bl	8006904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007376:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007378:	e011      	b.n	800739e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	2b00      	cmp	r3, #0
 8007380:	d012      	beq.n	80073a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3324      	adds	r3, #36	; 0x24
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fd50 	bl	8007e2c <xTaskRemoveFromEventList>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007392:	f000 fe27 	bl	8007fe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	3b01      	subs	r3, #1
 800739a:	b2db      	uxtb	r3, r3
 800739c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800739e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	dce9      	bgt.n	800737a <prvUnlockQueue+0x16>
 80073a6:	e000      	b.n	80073aa <prvUnlockQueue+0x46>
					break;
 80073a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	22ff      	movs	r2, #255	; 0xff
 80073ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073b2:	f7ff fad7 	bl	8006964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073b6:	f7ff faa5 	bl	8006904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073c2:	e011      	b.n	80073e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d012      	beq.n	80073f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3310      	adds	r3, #16
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fd2b 	bl	8007e2c <xTaskRemoveFromEventList>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073dc:	f000 fe02 	bl	8007fe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dce9      	bgt.n	80073c4 <prvUnlockQueue+0x60>
 80073f0:	e000      	b.n	80073f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	22ff      	movs	r2, #255	; 0xff
 80073f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073fc:	f7ff fab2 	bl	8006964 <vPortExitCritical>
}
 8007400:	bf00      	nop
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007410:	f7ff fa78 	bl	8006904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800741c:	2301      	movs	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	e001      	b.n	8007426 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007426:	f7ff fa9d 	bl	8006964 <vPortExitCritical>

	return xReturn;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800743c:	f7ff fa62 	bl	8006904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	429a      	cmp	r2, r3
 800744a:	d102      	bne.n	8007452 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	e001      	b.n	8007456 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007456:	f7ff fa85 	bl	8006964 <vPortExitCritical>

	return xReturn;
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e014      	b.n	800749e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007474:	4a0f      	ldr	r2, [pc, #60]	; (80074b4 <vQueueAddToRegistry+0x50>)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10b      	bne.n	8007498 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007480:	490c      	ldr	r1, [pc, #48]	; (80074b4 <vQueueAddToRegistry+0x50>)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800748a:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <vQueueAddToRegistry+0x50>)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	4413      	add	r3, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007496:	e006      	b.n	80074a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b07      	cmp	r3, #7
 80074a2:	d9e7      	bls.n	8007474 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	240045bc 	.word	0x240045bc

080074b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074c8:	f7ff fa1c 	bl	8006904 <vPortEnterCritical>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074d2:	b25b      	sxtb	r3, r3
 80074d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d8:	d103      	bne.n	80074e2 <vQueueWaitForMessageRestricted+0x2a>
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d103      	bne.n	80074f8 <vQueueWaitForMessageRestricted+0x40>
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074f8:	f7ff fa34 	bl	8006964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	3324      	adds	r3, #36	; 0x24
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fc61 	bl	8007dd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007512:	6978      	ldr	r0, [r7, #20]
 8007514:	f7ff ff26 	bl	8007364 <prvUnlockQueue>
	}
 8007518:	bf00      	nop
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08e      	sub	sp, #56	; 0x38
 8007524:	af04      	add	r7, sp, #16
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800752e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	623b      	str	r3, [r7, #32]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xTaskCreateStatic+0x46>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	61fb      	str	r3, [r7, #28]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007566:	23bc      	movs	r3, #188	; 0xbc
 8007568:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2bbc      	cmp	r3, #188	; 0xbc
 800756e:	d00a      	beq.n	8007586 <xTaskCreateStatic+0x66>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	61bb      	str	r3, [r7, #24]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007586:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01e      	beq.n	80075cc <xTaskCreateStatic+0xac>
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800759c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075a6:	2300      	movs	r3, #0
 80075a8:	9303      	str	r3, [sp, #12]
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	9302      	str	r3, [sp, #8]
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	9301      	str	r3, [sp, #4]
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f850 	bl	8007664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075c6:	f000 f8f3 	bl	80077b0 <prvAddNewTaskToReadyList>
 80075ca:	e001      	b.n	80075d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075d0:	697b      	ldr	r3, [r7, #20]
	}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3728      	adds	r7, #40	; 0x28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b08c      	sub	sp, #48	; 0x30
 80075de:	af04      	add	r7, sp, #16
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	603b      	str	r3, [r7, #0]
 80075e6:	4613      	mov	r3, r2
 80075e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fdbc 	bl	800616c <pvPortMalloc>
 80075f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00e      	beq.n	800761a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075fc:	20bc      	movs	r0, #188	; 0xbc
 80075fe:	f7fe fdb5 	bl	800616c <pvPortMalloc>
 8007602:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
 8007610:	e005      	b.n	800761e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007612:	6978      	ldr	r0, [r7, #20]
 8007614:	f7fe fe76 	bl	8006304 <vPortFree>
 8007618:	e001      	b.n	800761e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d017      	beq.n	8007654 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800762c:	88fa      	ldrh	r2, [r7, #6]
 800762e:	2300      	movs	r3, #0
 8007630:	9303      	str	r3, [sp, #12]
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	9302      	str	r3, [sp, #8]
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f80e 	bl	8007664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007648:	69f8      	ldr	r0, [r7, #28]
 800764a:	f000 f8b1 	bl	80077b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800764e:	2301      	movs	r3, #1
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e002      	b.n	800765a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007654:	f04f 33ff 	mov.w	r3, #4294967295
 8007658:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800765a:	69bb      	ldr	r3, [r7, #24]
	}
 800765c:	4618      	mov	r0, r3
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	461a      	mov	r2, r3
 800767c:	21a5      	movs	r1, #165	; 0xa5
 800767e:	f001 f9ff 	bl	8008a80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800768c:	440b      	add	r3, r1
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	617b      	str	r3, [r7, #20]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01f      	beq.n	8007702 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
 80076c6:	e012      	b.n	80076ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	4413      	add	r3, r2
 80076ce:	7819      	ldrb	r1, [r3, #0]
 80076d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	3334      	adds	r3, #52	; 0x34
 80076d8:	460a      	mov	r2, r1
 80076da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d006      	beq.n	80076f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	3301      	adds	r3, #1
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	2b0f      	cmp	r3, #15
 80076f2:	d9e9      	bls.n	80076c8 <prvInitialiseNewTask+0x64>
 80076f4:	e000      	b.n	80076f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80076f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007700:	e003      	b.n	800770a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	2b37      	cmp	r3, #55	; 0x37
 800770e:	d901      	bls.n	8007714 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007710:	2337      	movs	r3, #55	; 0x37
 8007712:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007718:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800771e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	2200      	movs	r2, #0
 8007724:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	3304      	adds	r3, #4
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe ff28 	bl	8006580 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	3318      	adds	r3, #24
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe ff23 	bl	8006580 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	2200      	movs	r2, #0
 800775c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	3354      	adds	r3, #84	; 0x54
 8007764:	2260      	movs	r2, #96	; 0x60
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f001 f989 	bl	8008a80 <memset>
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	4a0c      	ldr	r2, [pc, #48]	; (80077a4 <prvInitialiseNewTask+0x140>)
 8007772:	659a      	str	r2, [r3, #88]	; 0x58
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	4a0c      	ldr	r2, [pc, #48]	; (80077a8 <prvInitialiseNewTask+0x144>)
 8007778:	65da      	str	r2, [r3, #92]	; 0x5c
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	4a0b      	ldr	r2, [pc, #44]	; (80077ac <prvInitialiseNewTask+0x148>)
 800777e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	69b8      	ldr	r0, [r7, #24]
 8007786:	f7fe ff8f 	bl	80066a8 <pxPortInitialiseStack>
 800778a:	4602      	mov	r2, r0
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800779c:	bf00      	nop
 800779e:	3720      	adds	r7, #32
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	08009520 	.word	0x08009520
 80077a8:	08009540 	.word	0x08009540
 80077ac:	08009500 	.word	0x08009500

080077b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077b8:	f7ff f8a4 	bl	8006904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077bc:	4b2d      	ldr	r3, [pc, #180]	; (8007874 <prvAddNewTaskToReadyList+0xc4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	4a2c      	ldr	r2, [pc, #176]	; (8007874 <prvAddNewTaskToReadyList+0xc4>)
 80077c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077c6:	4b2c      	ldr	r3, [pc, #176]	; (8007878 <prvAddNewTaskToReadyList+0xc8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077ce:	4a2a      	ldr	r2, [pc, #168]	; (8007878 <prvAddNewTaskToReadyList+0xc8>)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077d4:	4b27      	ldr	r3, [pc, #156]	; (8007874 <prvAddNewTaskToReadyList+0xc4>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d110      	bne.n	80077fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077dc:	f000 fc26 	bl	800802c <prvInitialiseTaskLists>
 80077e0:	e00d      	b.n	80077fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077e2:	4b26      	ldr	r3, [pc, #152]	; (800787c <prvAddNewTaskToReadyList+0xcc>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ea:	4b23      	ldr	r3, [pc, #140]	; (8007878 <prvAddNewTaskToReadyList+0xc8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d802      	bhi.n	80077fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077f8:	4a1f      	ldr	r2, [pc, #124]	; (8007878 <prvAddNewTaskToReadyList+0xc8>)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077fe:	4b20      	ldr	r3, [pc, #128]	; (8007880 <prvAddNewTaskToReadyList+0xd0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	4a1e      	ldr	r2, [pc, #120]	; (8007880 <prvAddNewTaskToReadyList+0xd0>)
 8007806:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007808:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <prvAddNewTaskToReadyList+0xd0>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007814:	4b1b      	ldr	r3, [pc, #108]	; (8007884 <prvAddNewTaskToReadyList+0xd4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d903      	bls.n	8007824 <prvAddNewTaskToReadyList+0x74>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	4a18      	ldr	r2, [pc, #96]	; (8007884 <prvAddNewTaskToReadyList+0xd4>)
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4a15      	ldr	r2, [pc, #84]	; (8007888 <prvAddNewTaskToReadyList+0xd8>)
 8007832:	441a      	add	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f7fe fead 	bl	800659a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007840:	f7ff f890 	bl	8006964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007844:	4b0d      	ldr	r3, [pc, #52]	; (800787c <prvAddNewTaskToReadyList+0xcc>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00e      	beq.n	800786a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <prvAddNewTaskToReadyList+0xc8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	429a      	cmp	r2, r3
 8007858:	d207      	bcs.n	800786a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <prvAddNewTaskToReadyList+0xdc>)
 800785c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	24004ad0 	.word	0x24004ad0
 8007878:	240045fc 	.word	0x240045fc
 800787c:	24004adc 	.word	0x24004adc
 8007880:	24004aec 	.word	0x24004aec
 8007884:	24004ad8 	.word	0x24004ad8
 8007888:	24004600 	.word	0x24004600
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d017      	beq.n	80078d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078a2:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <vTaskDelay+0x60>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <vTaskDelay+0x30>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	60bb      	str	r3, [r7, #8]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078c0:	f000 f88a 	bl	80079d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fcfe 	bl	80082c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078cc:	f000 f892 	bl	80079f4 <xTaskResumeAll>
 80078d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d107      	bne.n	80078e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <vTaskDelay+0x64>)
 80078da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	24004af8 	.word	0x24004af8
 80078f4:	e000ed04 	.word	0xe000ed04

080078f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	; 0x28
 80078fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007906:	463a      	mov	r2, r7
 8007908:	1d39      	adds	r1, r7, #4
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe fbf8 	bl	8006104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	9202      	str	r2, [sp, #8]
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	2300      	movs	r3, #0
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	2300      	movs	r3, #0
 8007924:	460a      	mov	r2, r1
 8007926:	4924      	ldr	r1, [pc, #144]	; (80079b8 <vTaskStartScheduler+0xc0>)
 8007928:	4824      	ldr	r0, [pc, #144]	; (80079bc <vTaskStartScheduler+0xc4>)
 800792a:	f7ff fdf9 	bl	8007520 <xTaskCreateStatic>
 800792e:	4603      	mov	r3, r0
 8007930:	4a23      	ldr	r2, [pc, #140]	; (80079c0 <vTaskStartScheduler+0xc8>)
 8007932:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007934:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <vTaskStartScheduler+0xc8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800793c:	2301      	movs	r3, #1
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	e001      	b.n	8007946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d102      	bne.n	8007952 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800794c:	f000 fd10 	bl	8008370 <xTimerCreateTimerTask>
 8007950:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d11b      	bne.n	8007990 <vTaskStartScheduler+0x98>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	613b      	str	r3, [r7, #16]
}
 800796a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800796c:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <vTaskStartScheduler+0xcc>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3354      	adds	r3, #84	; 0x54
 8007972:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <vTaskStartScheduler+0xd0>)
 8007974:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007976:	4b15      	ldr	r3, [pc, #84]	; (80079cc <vTaskStartScheduler+0xd4>)
 8007978:	f04f 32ff 	mov.w	r2, #4294967295
 800797c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800797e:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <vTaskStartScheduler+0xd8>)
 8007980:	2201      	movs	r2, #1
 8007982:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007984:	4b13      	ldr	r3, [pc, #76]	; (80079d4 <vTaskStartScheduler+0xdc>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800798a:	f7fe ff19 	bl	80067c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800798e:	e00e      	b.n	80079ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d10a      	bne.n	80079ae <vTaskStartScheduler+0xb6>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	60fb      	str	r3, [r7, #12]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <vTaskStartScheduler+0xb4>
}
 80079ae:	bf00      	nop
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	08009468 	.word	0x08009468
 80079bc:	08007ffd 	.word	0x08007ffd
 80079c0:	24004af4 	.word	0x24004af4
 80079c4:	240045fc 	.word	0x240045fc
 80079c8:	24000014 	.word	0x24000014
 80079cc:	24004af0 	.word	0x24004af0
 80079d0:	24004adc 	.word	0x24004adc
 80079d4:	24004ad4 	.word	0x24004ad4

080079d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079dc:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <vTaskSuspendAll+0x18>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a03      	ldr	r2, [pc, #12]	; (80079f0 <vTaskSuspendAll+0x18>)
 80079e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079e6:	bf00      	nop
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	24004af8 	.word	0x24004af8

080079f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a02:	4b42      	ldr	r3, [pc, #264]	; (8007b0c <xTaskResumeAll+0x118>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <xTaskResumeAll+0x2c>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	603b      	str	r3, [r7, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a20:	f7fe ff70 	bl	8006904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a24:	4b39      	ldr	r3, [pc, #228]	; (8007b0c <xTaskResumeAll+0x118>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	4a38      	ldr	r2, [pc, #224]	; (8007b0c <xTaskResumeAll+0x118>)
 8007a2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a2e:	4b37      	ldr	r3, [pc, #220]	; (8007b0c <xTaskResumeAll+0x118>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d162      	bne.n	8007afc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a36:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <xTaskResumeAll+0x11c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d05e      	beq.n	8007afc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a3e:	e02f      	b.n	8007aa0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a40:	4b34      	ldr	r3, [pc, #208]	; (8007b14 <xTaskResumeAll+0x120>)
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3318      	adds	r3, #24
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fe01 	bl	8006654 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fdfc 	bl	8006654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a60:	4b2d      	ldr	r3, [pc, #180]	; (8007b18 <xTaskResumeAll+0x124>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d903      	bls.n	8007a70 <xTaskResumeAll+0x7c>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <xTaskResumeAll+0x124>)
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4a27      	ldr	r2, [pc, #156]	; (8007b1c <xTaskResumeAll+0x128>)
 8007a7e:	441a      	add	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f7fe fd87 	bl	800659a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <xTaskResumeAll+0x12c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a9a:	4b22      	ldr	r3, [pc, #136]	; (8007b24 <xTaskResumeAll+0x130>)
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aa0:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <xTaskResumeAll+0x120>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1cb      	bne.n	8007a40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007aae:	f000 fb5f 	bl	8008170 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ab2:	4b1d      	ldr	r3, [pc, #116]	; (8007b28 <xTaskResumeAll+0x134>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d010      	beq.n	8007ae0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007abe:	f000 f847 	bl	8007b50 <xTaskIncrementTick>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ac8:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <xTaskResumeAll+0x130>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f1      	bne.n	8007abe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007ada:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <xTaskResumeAll+0x134>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ae0:	4b10      	ldr	r3, [pc, #64]	; (8007b24 <xTaskResumeAll+0x130>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d009      	beq.n	8007afc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007aec:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <xTaskResumeAll+0x138>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007afc:	f7fe ff32 	bl	8006964 <vPortExitCritical>

	return xAlreadyYielded;
 8007b00:	68bb      	ldr	r3, [r7, #8]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	24004af8 	.word	0x24004af8
 8007b10:	24004ad0 	.word	0x24004ad0
 8007b14:	24004a90 	.word	0x24004a90
 8007b18:	24004ad8 	.word	0x24004ad8
 8007b1c:	24004600 	.word	0x24004600
 8007b20:	240045fc 	.word	0x240045fc
 8007b24:	24004ae4 	.word	0x24004ae4
 8007b28:	24004ae0 	.word	0x24004ae0
 8007b2c:	e000ed04 	.word	0xe000ed04

08007b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <xTaskGetTickCount+0x1c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b3c:	687b      	ldr	r3, [r7, #4]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	24004ad4 	.word	0x24004ad4

08007b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b5a:	4b4f      	ldr	r3, [pc, #316]	; (8007c98 <xTaskIncrementTick+0x148>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f040 808f 	bne.w	8007c82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b64:	4b4d      	ldr	r3, [pc, #308]	; (8007c9c <xTaskIncrementTick+0x14c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b6c:	4a4b      	ldr	r2, [pc, #300]	; (8007c9c <xTaskIncrementTick+0x14c>)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d120      	bne.n	8007bba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b78:	4b49      	ldr	r3, [pc, #292]	; (8007ca0 <xTaskIncrementTick+0x150>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	603b      	str	r3, [r7, #0]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <xTaskIncrementTick+0x46>
 8007b98:	4b41      	ldr	r3, [pc, #260]	; (8007ca0 <xTaskIncrementTick+0x150>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	4b41      	ldr	r3, [pc, #260]	; (8007ca4 <xTaskIncrementTick+0x154>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a3f      	ldr	r2, [pc, #252]	; (8007ca0 <xTaskIncrementTick+0x150>)
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	4a3f      	ldr	r2, [pc, #252]	; (8007ca4 <xTaskIncrementTick+0x154>)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	4b3e      	ldr	r3, [pc, #248]	; (8007ca8 <xTaskIncrementTick+0x158>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	4a3d      	ldr	r2, [pc, #244]	; (8007ca8 <xTaskIncrementTick+0x158>)
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	f000 fadb 	bl	8008170 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bba:	4b3c      	ldr	r3, [pc, #240]	; (8007cac <xTaskIncrementTick+0x15c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d349      	bcc.n	8007c58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc4:	4b36      	ldr	r3, [pc, #216]	; (8007ca0 <xTaskIncrementTick+0x150>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bce:	4b37      	ldr	r3, [pc, #220]	; (8007cac <xTaskIncrementTick+0x15c>)
 8007bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd4:	601a      	str	r2, [r3, #0]
					break;
 8007bd6:	e03f      	b.n	8007c58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd8:	4b31      	ldr	r3, [pc, #196]	; (8007ca0 <xTaskIncrementTick+0x150>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d203      	bcs.n	8007bf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bf0:	4a2e      	ldr	r2, [pc, #184]	; (8007cac <xTaskIncrementTick+0x15c>)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bf6:	e02f      	b.n	8007c58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fd29 	bl	8006654 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	3318      	adds	r3, #24
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fd20 	bl	8006654 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c18:	4b25      	ldr	r3, [pc, #148]	; (8007cb0 <xTaskIncrementTick+0x160>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d903      	bls.n	8007c28 <xTaskIncrementTick+0xd8>
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	4a22      	ldr	r2, [pc, #136]	; (8007cb0 <xTaskIncrementTick+0x160>)
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <xTaskIncrementTick+0x164>)
 8007c36:	441a      	add	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f7fe fcab 	bl	800659a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c48:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <xTaskIncrementTick+0x168>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d3b8      	bcc.n	8007bc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c52:	2301      	movs	r3, #1
 8007c54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c56:	e7b5      	b.n	8007bc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c58:	4b17      	ldr	r3, [pc, #92]	; (8007cb8 <xTaskIncrementTick+0x168>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	4915      	ldr	r1, [pc, #84]	; (8007cb4 <xTaskIncrementTick+0x164>)
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d901      	bls.n	8007c74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c70:	2301      	movs	r3, #1
 8007c72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c74:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <xTaskIncrementTick+0x16c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	e004      	b.n	8007c8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c82:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <xTaskIncrementTick+0x170>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3301      	adds	r3, #1
 8007c88:	4a0d      	ldr	r2, [pc, #52]	; (8007cc0 <xTaskIncrementTick+0x170>)
 8007c8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c8c:	697b      	ldr	r3, [r7, #20]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	24004af8 	.word	0x24004af8
 8007c9c:	24004ad4 	.word	0x24004ad4
 8007ca0:	24004a88 	.word	0x24004a88
 8007ca4:	24004a8c 	.word	0x24004a8c
 8007ca8:	24004ae8 	.word	0x24004ae8
 8007cac:	24004af0 	.word	0x24004af0
 8007cb0:	24004ad8 	.word	0x24004ad8
 8007cb4:	24004600 	.word	0x24004600
 8007cb8:	240045fc 	.word	0x240045fc
 8007cbc:	24004ae4 	.word	0x24004ae4
 8007cc0:	24004ae0 	.word	0x24004ae0

08007cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cca:	4b2a      	ldr	r3, [pc, #168]	; (8007d74 <vTaskSwitchContext+0xb0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cd2:	4b29      	ldr	r3, [pc, #164]	; (8007d78 <vTaskSwitchContext+0xb4>)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cd8:	e046      	b.n	8007d68 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007cda:	4b27      	ldr	r3, [pc, #156]	; (8007d78 <vTaskSwitchContext+0xb4>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce0:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <vTaskSwitchContext+0xb8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e010      	b.n	8007d0a <vTaskSwitchContext+0x46>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <vTaskSwitchContext+0x40>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	607b      	str	r3, [r7, #4]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <vTaskSwitchContext+0x3e>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	491d      	ldr	r1, [pc, #116]	; (8007d80 <vTaskSwitchContext+0xbc>)
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	440b      	add	r3, r1
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0e4      	beq.n	8007ce8 <vTaskSwitchContext+0x24>
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4a15      	ldr	r2, [pc, #84]	; (8007d80 <vTaskSwitchContext+0xbc>)
 8007d2a:	4413      	add	r3, r2
 8007d2c:	60bb      	str	r3, [r7, #8]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	605a      	str	r2, [r3, #4]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d104      	bne.n	8007d4e <vTaskSwitchContext+0x8a>
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	605a      	str	r2, [r3, #4]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <vTaskSwitchContext+0xc0>)
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	4a08      	ldr	r2, [pc, #32]	; (8007d7c <vTaskSwitchContext+0xb8>)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <vTaskSwitchContext+0xc0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3354      	adds	r3, #84	; 0x54
 8007d64:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <vTaskSwitchContext+0xc4>)
 8007d66:	6013      	str	r3, [r2, #0]
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	24004af8 	.word	0x24004af8
 8007d78:	24004ae4 	.word	0x24004ae4
 8007d7c:	24004ad8 	.word	0x24004ad8
 8007d80:	24004600 	.word	0x24004600
 8007d84:	240045fc 	.word	0x240045fc
 8007d88:	24000014 	.word	0x24000014

08007d8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60fb      	str	r3, [r7, #12]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007db2:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <vTaskPlaceOnEventList+0x44>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3318      	adds	r3, #24
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fe fc11 	bl	80065e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	6838      	ldr	r0, [r7, #0]
 8007dc4:	f000 fa80 	bl	80082c8 <prvAddCurrentTaskToDelayedList>
}
 8007dc8:	bf00      	nop
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	240045fc 	.word	0x240045fc

08007dd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	617b      	str	r3, [r7, #20]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3318      	adds	r3, #24
 8007e02:	4619      	mov	r1, r3
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7fe fbc8 	bl	800659a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007e10:	f04f 33ff 	mov.w	r3, #4294967295
 8007e14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	68b8      	ldr	r0, [r7, #8]
 8007e1a:	f000 fa55 	bl	80082c8 <prvAddCurrentTaskToDelayedList>
	}
 8007e1e:	bf00      	nop
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	240045fc 	.word	0x240045fc

08007e2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60fb      	str	r3, [r7, #12]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	3318      	adds	r3, #24
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe fbf9 	bl	8006654 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e62:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <xTaskRemoveFromEventList+0xb0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d11d      	bne.n	8007ea6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fbf0 	bl	8006654 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e78:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <xTaskRemoveFromEventList+0xb4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d903      	bls.n	8007e88 <xTaskRemoveFromEventList+0x5c>
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <xTaskRemoveFromEventList+0xb4>)
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4a13      	ldr	r2, [pc, #76]	; (8007ee4 <xTaskRemoveFromEventList+0xb8>)
 8007e96:	441a      	add	r2, r3
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	f7fe fb7b 	bl	800659a <vListInsertEnd>
 8007ea4:	e005      	b.n	8007eb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	3318      	adds	r3, #24
 8007eaa:	4619      	mov	r1, r3
 8007eac:	480e      	ldr	r0, [pc, #56]	; (8007ee8 <xTaskRemoveFromEventList+0xbc>)
 8007eae:	f7fe fb74 	bl	800659a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <xTaskRemoveFromEventList+0xc0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d905      	bls.n	8007ecc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	; (8007ef0 <xTaskRemoveFromEventList+0xc4>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e001      	b.n	8007ed0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ed0:	697b      	ldr	r3, [r7, #20]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	24004af8 	.word	0x24004af8
 8007ee0:	24004ad8 	.word	0x24004ad8
 8007ee4:	24004600 	.word	0x24004600
 8007ee8:	24004a90 	.word	0x24004a90
 8007eec:	240045fc 	.word	0x240045fc
 8007ef0:	24004ae4 	.word	0x24004ae4

08007ef4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <vTaskInternalSetTimeOutState+0x24>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <vTaskInternalSetTimeOutState+0x28>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	605a      	str	r2, [r3, #4]
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	24004ae8 	.word	0x24004ae8
 8007f1c:	24004ad4 	.word	0x24004ad4

08007f20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	613b      	str	r3, [r7, #16]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60fb      	str	r3, [r7, #12]
}
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f62:	f7fe fccf 	bl	8006904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f66:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <xTaskCheckForTimeOut+0xbc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7e:	d102      	bne.n	8007f86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61fb      	str	r3, [r7, #28]
 8007f84:	e023      	b.n	8007fce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <xTaskCheckForTimeOut+0xc0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d007      	beq.n	8007fa2 <xTaskCheckForTimeOut+0x82>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d302      	bcc.n	8007fa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	61fb      	str	r3, [r7, #28]
 8007fa0:	e015      	b.n	8007fce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d20b      	bcs.n	8007fc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	1ad2      	subs	r2, r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff ff9b 	bl	8007ef4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61fb      	str	r3, [r7, #28]
 8007fc2:	e004      	b.n	8007fce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fce:	f7fe fcc9 	bl	8006964 <vPortExitCritical>

	return xReturn;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3720      	adds	r7, #32
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	24004ad4 	.word	0x24004ad4
 8007fe0:	24004ae8 	.word	0x24004ae8

08007fe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fe8:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <vTaskMissedYield+0x14>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
}
 8007fee:	bf00      	nop
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	24004ae4 	.word	0x24004ae4

08007ffc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008004:	f000 f852 	bl	80080ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <prvIdleTask+0x28>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d9f9      	bls.n	8008004 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008010:	4b05      	ldr	r3, [pc, #20]	; (8008028 <prvIdleTask+0x2c>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008020:	e7f0      	b.n	8008004 <prvIdleTask+0x8>
 8008022:	bf00      	nop
 8008024:	24004600 	.word	0x24004600
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008032:	2300      	movs	r3, #0
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	e00c      	b.n	8008052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4a12      	ldr	r2, [pc, #72]	; (800808c <prvInitialiseTaskLists+0x60>)
 8008044:	4413      	add	r3, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fa7a 	bl	8006540 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3301      	adds	r3, #1
 8008050:	607b      	str	r3, [r7, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b37      	cmp	r3, #55	; 0x37
 8008056:	d9ef      	bls.n	8008038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008058:	480d      	ldr	r0, [pc, #52]	; (8008090 <prvInitialiseTaskLists+0x64>)
 800805a:	f7fe fa71 	bl	8006540 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800805e:	480d      	ldr	r0, [pc, #52]	; (8008094 <prvInitialiseTaskLists+0x68>)
 8008060:	f7fe fa6e 	bl	8006540 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008064:	480c      	ldr	r0, [pc, #48]	; (8008098 <prvInitialiseTaskLists+0x6c>)
 8008066:	f7fe fa6b 	bl	8006540 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800806a:	480c      	ldr	r0, [pc, #48]	; (800809c <prvInitialiseTaskLists+0x70>)
 800806c:	f7fe fa68 	bl	8006540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008070:	480b      	ldr	r0, [pc, #44]	; (80080a0 <prvInitialiseTaskLists+0x74>)
 8008072:	f7fe fa65 	bl	8006540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008076:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <prvInitialiseTaskLists+0x78>)
 8008078:	4a05      	ldr	r2, [pc, #20]	; (8008090 <prvInitialiseTaskLists+0x64>)
 800807a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800807c:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <prvInitialiseTaskLists+0x7c>)
 800807e:	4a05      	ldr	r2, [pc, #20]	; (8008094 <prvInitialiseTaskLists+0x68>)
 8008080:	601a      	str	r2, [r3, #0]
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	24004600 	.word	0x24004600
 8008090:	24004a60 	.word	0x24004a60
 8008094:	24004a74 	.word	0x24004a74
 8008098:	24004a90 	.word	0x24004a90
 800809c:	24004aa4 	.word	0x24004aa4
 80080a0:	24004abc 	.word	0x24004abc
 80080a4:	24004a88 	.word	0x24004a88
 80080a8:	24004a8c 	.word	0x24004a8c

080080ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080b2:	e019      	b.n	80080e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080b4:	f7fe fc26 	bl	8006904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b8:	4b10      	ldr	r3, [pc, #64]	; (80080fc <prvCheckTasksWaitingTermination+0x50>)
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe fac5 	bl	8006654 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080ca:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <prvCheckTasksWaitingTermination+0x54>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	4a0b      	ldr	r2, [pc, #44]	; (8008100 <prvCheckTasksWaitingTermination+0x54>)
 80080d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080d4:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <prvCheckTasksWaitingTermination+0x58>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3b01      	subs	r3, #1
 80080da:	4a0a      	ldr	r2, [pc, #40]	; (8008104 <prvCheckTasksWaitingTermination+0x58>)
 80080dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080de:	f7fe fc41 	bl	8006964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f810 	bl	8008108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <prvCheckTasksWaitingTermination+0x58>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e1      	bne.n	80080b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	24004aa4 	.word	0x24004aa4
 8008100:	24004ad0 	.word	0x24004ad0
 8008104:	24004ab8 	.word	0x24004ab8

08008108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3354      	adds	r3, #84	; 0x54
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fd5d 	bl	8008bd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008120:	2b00      	cmp	r3, #0
 8008122:	d108      	bne.n	8008136 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe f8eb 	bl	8006304 <vPortFree>
				vPortFree( pxTCB );
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fe f8e8 	bl	8006304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008134:	e018      	b.n	8008168 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800813c:	2b01      	cmp	r3, #1
 800813e:	d103      	bne.n	8008148 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7fe f8df 	bl	8006304 <vPortFree>
	}
 8008146:	e00f      	b.n	8008168 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800814e:	2b02      	cmp	r3, #2
 8008150:	d00a      	beq.n	8008168 <prvDeleteTCB+0x60>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	60fb      	str	r3, [r7, #12]
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <prvDeleteTCB+0x5e>
	}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008176:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <prvResetNextTaskUnblockTime+0x38>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d104      	bne.n	800818a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008180:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <prvResetNextTaskUnblockTime+0x3c>)
 8008182:	f04f 32ff 	mov.w	r2, #4294967295
 8008186:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008188:	e008      	b.n	800819c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <prvResetNextTaskUnblockTime+0x38>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4a04      	ldr	r2, [pc, #16]	; (80081ac <prvResetNextTaskUnblockTime+0x3c>)
 800819a:	6013      	str	r3, [r2, #0]
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	24004a88 	.word	0x24004a88
 80081ac:	24004af0 	.word	0x24004af0

080081b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <xTaskGetSchedulerState+0x34>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081be:	2301      	movs	r3, #1
 80081c0:	607b      	str	r3, [r7, #4]
 80081c2:	e008      	b.n	80081d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081c4:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <xTaskGetSchedulerState+0x38>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081cc:	2302      	movs	r3, #2
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	e001      	b.n	80081d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081d2:	2300      	movs	r3, #0
 80081d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081d6:	687b      	ldr	r3, [r7, #4]
	}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	24004adc 	.word	0x24004adc
 80081e8:	24004af8 	.word	0x24004af8

080081ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d056      	beq.n	80082b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008202:	4b2e      	ldr	r3, [pc, #184]	; (80082bc <xTaskPriorityDisinherit+0xd0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	429a      	cmp	r2, r3
 800820a:	d00a      	beq.n	8008222 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	60fb      	str	r3, [r7, #12]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	60bb      	str	r3, [r7, #8]
}
 800823c:	bf00      	nop
 800823e:	e7fe      	b.n	800823e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008244:	1e5a      	subs	r2, r3, #1
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008252:	429a      	cmp	r2, r3
 8008254:	d02c      	beq.n	80082b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825a:	2b00      	cmp	r3, #0
 800825c:	d128      	bne.n	80082b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	3304      	adds	r3, #4
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe f9f6 	bl	8006654 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4b0f      	ldr	r3, [pc, #60]	; (80082c0 <xTaskPriorityDisinherit+0xd4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d903      	bls.n	8008290 <xTaskPriorityDisinherit+0xa4>
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	4a0c      	ldr	r2, [pc, #48]	; (80082c0 <xTaskPriorityDisinherit+0xd4>)
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4a09      	ldr	r2, [pc, #36]	; (80082c4 <xTaskPriorityDisinherit+0xd8>)
 800829e:	441a      	add	r2, r3
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fe f977 	bl	800659a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082b0:	697b      	ldr	r3, [r7, #20]
	}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	240045fc 	.word	0x240045fc
 80082c0:	24004ad8 	.word	0x24004ad8
 80082c4:	24004600 	.word	0x24004600

080082c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082d2:	4b21      	ldr	r3, [pc, #132]	; (8008358 <prvAddCurrentTaskToDelayedList+0x90>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d8:	4b20      	ldr	r3, [pc, #128]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3304      	adds	r3, #4
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe f9b8 	bl	8006654 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d10a      	bne.n	8008302 <prvAddCurrentTaskToDelayedList+0x3a>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4619      	mov	r1, r3
 80082fa:	4819      	ldr	r0, [pc, #100]	; (8008360 <prvAddCurrentTaskToDelayedList+0x98>)
 80082fc:	f7fe f94d 	bl	800659a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008300:	e026      	b.n	8008350 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4413      	add	r3, r2
 8008308:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	429a      	cmp	r2, r3
 8008318:	d209      	bcs.n	800832e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <prvAddCurrentTaskToDelayedList+0x9c>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fe f95b 	bl	80065e2 <vListInsert>
}
 800832c:	e010      	b.n	8008350 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800832e:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3304      	adds	r3, #4
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7fe f951 	bl	80065e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	d202      	bcs.n	8008350 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800834a:	4a08      	ldr	r2, [pc, #32]	; (800836c <prvAddCurrentTaskToDelayedList+0xa4>)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6013      	str	r3, [r2, #0]
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	24004ad4 	.word	0x24004ad4
 800835c:	240045fc 	.word	0x240045fc
 8008360:	24004abc 	.word	0x24004abc
 8008364:	24004a8c 	.word	0x24004a8c
 8008368:	24004a88 	.word	0x24004a88
 800836c:	24004af0 	.word	0x24004af0

08008370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	; 0x28
 8008374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800837a:	f000 fb07 	bl	800898c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800837e:	4b1c      	ldr	r3, [pc, #112]	; (80083f0 <xTimerCreateTimerTask+0x80>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d021      	beq.n	80083ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800838e:	1d3a      	adds	r2, r7, #4
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	4618      	mov	r0, r3
 800839a:	f7fd fecd 	bl	8006138 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	9202      	str	r2, [sp, #8]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	2302      	movs	r3, #2
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	2300      	movs	r3, #0
 80083ae:	460a      	mov	r2, r1
 80083b0:	4910      	ldr	r1, [pc, #64]	; (80083f4 <xTimerCreateTimerTask+0x84>)
 80083b2:	4811      	ldr	r0, [pc, #68]	; (80083f8 <xTimerCreateTimerTask+0x88>)
 80083b4:	f7ff f8b4 	bl	8007520 <xTaskCreateStatic>
 80083b8:	4603      	mov	r3, r0
 80083ba:	4a10      	ldr	r2, [pc, #64]	; (80083fc <xTimerCreateTimerTask+0x8c>)
 80083bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <xTimerCreateTimerTask+0x8c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083c6:	2301      	movs	r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083e6:	697b      	ldr	r3, [r7, #20]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	24004b2c 	.word	0x24004b2c
 80083f4:	08009470 	.word	0x08009470
 80083f8:	08008535 	.word	0x08008535
 80083fc:	24004b30 	.word	0x24004b30

08008400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800840e:	2300      	movs	r3, #0
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	623b      	str	r3, [r7, #32]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800842e:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <xTimerGenericCommand+0x98>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d02a      	beq.n	800848c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b05      	cmp	r3, #5
 8008446:	dc18      	bgt.n	800847a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008448:	f7ff feb2 	bl	80081b0 <xTaskGetSchedulerState>
 800844c:	4603      	mov	r3, r0
 800844e:	2b02      	cmp	r3, #2
 8008450:	d109      	bne.n	8008466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <xTimerGenericCommand+0x98>)
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f107 0110 	add.w	r1, r7, #16
 800845a:	2300      	movs	r3, #0
 800845c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845e:	f7fe fc77 	bl	8006d50 <xQueueGenericSend>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24
 8008464:	e012      	b.n	800848c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <xTimerGenericCommand+0x98>)
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f107 0110 	add.w	r1, r7, #16
 800846e:	2300      	movs	r3, #0
 8008470:	2200      	movs	r2, #0
 8008472:	f7fe fc6d 	bl	8006d50 <xQueueGenericSend>
 8008476:	6278      	str	r0, [r7, #36]	; 0x24
 8008478:	e008      	b.n	800848c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <xTimerGenericCommand+0x98>)
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	f107 0110 	add.w	r1, r7, #16
 8008482:	2300      	movs	r3, #0
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	f7fe fd61 	bl	8006f4c <xQueueGenericSendFromISR>
 800848a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800848e:	4618      	mov	r0, r3
 8008490:	3728      	adds	r7, #40	; 0x28
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	24004b2c 	.word	0x24004b2c

0800849c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a6:	4b22      	ldr	r3, [pc, #136]	; (8008530 <prvProcessExpiredTimer+0x94>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe f8cd 	bl	8006654 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d022      	beq.n	800850e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	18d1      	adds	r1, r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	6978      	ldr	r0, [r7, #20]
 80084d6:	f000 f8d1 	bl	800867c <prvInsertTimerInActiveList>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01f      	beq.n	8008520 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084e0:	2300      	movs	r3, #0
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	2300      	movs	r3, #0
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	2100      	movs	r1, #0
 80084ea:	6978      	ldr	r0, [r7, #20]
 80084ec:	f7ff ff88 	bl	8008400 <xTimerGenericCommand>
 80084f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d113      	bne.n	8008520 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	60fb      	str	r3, [r7, #12]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008514:	f023 0301 	bic.w	r3, r3, #1
 8008518:	b2da      	uxtb	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	6978      	ldr	r0, [r7, #20]
 8008526:	4798      	blx	r3
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	24004b24 	.word	0x24004b24

08008534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800853c:	f107 0308 	add.w	r3, r7, #8
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f857 	bl	80085f4 <prvGetNextExpireTime>
 8008546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4619      	mov	r1, r3
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f803 	bl	8008558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008552:	f000 f8d5 	bl	8008700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008556:	e7f1      	b.n	800853c <prvTimerTask+0x8>

08008558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008562:	f7ff fa39 	bl	80079d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008566:	f107 0308 	add.w	r3, r7, #8
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f866 	bl	800863c <prvSampleTimeNow>
 8008570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d130      	bne.n	80085da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <prvProcessTimerOrBlockTask+0x3c>
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	429a      	cmp	r2, r3
 8008584:	d806      	bhi.n	8008594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008586:	f7ff fa35 	bl	80079f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ff85 	bl	800849c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008592:	e024      	b.n	80085de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d008      	beq.n	80085ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <prvProcessTimerOrBlockTask+0x90>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <prvProcessTimerOrBlockTask+0x50>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <prvProcessTimerOrBlockTask+0x52>
 80085a8:	2300      	movs	r3, #0
 80085aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <prvProcessTimerOrBlockTask+0x94>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4619      	mov	r1, r3
 80085ba:	f7fe ff7d 	bl	80074b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085be:	f7ff fa19 	bl	80079f4 <xTaskResumeAll>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <prvProcessTimerOrBlockTask+0x98>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
}
 80085d8:	e001      	b.n	80085de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085da:	f7ff fa0b 	bl	80079f4 <xTaskResumeAll>
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	24004b28 	.word	0x24004b28
 80085ec:	24004b2c 	.word	0x24004b2c
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085fc:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <prvGetNextExpireTime+0x44>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <prvGetNextExpireTime+0x16>
 8008606:	2201      	movs	r2, #1
 8008608:	e000      	b.n	800860c <prvGetNextExpireTime+0x18>
 800860a:	2200      	movs	r2, #0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d105      	bne.n	8008624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008618:	4b07      	ldr	r3, [pc, #28]	; (8008638 <prvGetNextExpireTime+0x44>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e001      	b.n	8008628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008628:	68fb      	ldr	r3, [r7, #12]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	24004b24 	.word	0x24004b24

0800863c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008644:	f7ff fa74 	bl	8007b30 <xTaskGetTickCount>
 8008648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <prvSampleTimeNow+0x3c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d205      	bcs.n	8008660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008654:	f000 f936 	bl	80088c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	e002      	b.n	8008666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008666:	4a04      	ldr	r2, [pc, #16]	; (8008678 <prvSampleTimeNow+0x3c>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800866c:	68fb      	ldr	r3, [r7, #12]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	24004b34 	.word	0x24004b34

0800867c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d812      	bhi.n	80086c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d302      	bcc.n	80086b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e01b      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <prvInsertTimerInActiveList+0x7c>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fd ff8e 	bl	80065e2 <vListInsert>
 80086c6:	e012      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d206      	bcs.n	80086de <prvInsertTimerInActiveList+0x62>
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d302      	bcc.n	80086de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e007      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086de:	4b07      	ldr	r3, [pc, #28]	; (80086fc <prvInsertTimerInActiveList+0x80>)
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f7fd ff7a 	bl	80065e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086ee:	697b      	ldr	r3, [r7, #20]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	24004b28 	.word	0x24004b28
 80086fc:	24004b24 	.word	0x24004b24

08008700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08e      	sub	sp, #56	; 0x38
 8008704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008706:	e0ca      	b.n	800889e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	da18      	bge.n	8008740 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800870e:	1d3b      	adds	r3, r7, #4
 8008710:	3304      	adds	r3, #4
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	61fb      	str	r3, [r7, #28]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008736:	6850      	ldr	r0, [r2, #4]
 8008738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873a:	6892      	ldr	r2, [r2, #8]
 800873c:	4611      	mov	r1, r2
 800873e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f2c0 80aa 	blt.w	800889c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	3304      	adds	r3, #4
 8008758:	4618      	mov	r0, r3
 800875a:	f7fd ff7b 	bl	8006654 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800875e:	463b      	mov	r3, r7
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff ff6b 	bl	800863c <prvSampleTimeNow>
 8008766:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b09      	cmp	r3, #9
 800876c:	f200 8097 	bhi.w	800889e <prvProcessReceivedCommands+0x19e>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <prvProcessReceivedCommands+0x78>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	080087a1 	.word	0x080087a1
 800877c:	080087a1 	.word	0x080087a1
 8008780:	080087a1 	.word	0x080087a1
 8008784:	08008815 	.word	0x08008815
 8008788:	08008829 	.word	0x08008829
 800878c:	08008873 	.word	0x08008873
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a1 	.word	0x080087a1
 8008798:	08008815 	.word	0x08008815
 800879c:	08008829 	.word	0x08008829
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087a6:	f043 0301 	orr.w	r3, r3, #1
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	18d1      	adds	r1, r2, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c0:	f7ff ff5c 	bl	800867c <prvInsertTimerInActiveList>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d069      	beq.n	800889e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d05e      	beq.n	800889e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	441a      	add	r2, r3
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	2300      	movs	r3, #0
 80087ee:	2100      	movs	r1, #0
 80087f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f2:	f7ff fe05 	bl	8008400 <xTimerGenericCommand>
 80087f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d14f      	bne.n	800889e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	61bb      	str	r3, [r7, #24]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800881a:	f023 0301 	bic.w	r3, r3, #1
 800881e:	b2da      	uxtb	r2, r3
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008826:	e03a      	b.n	800889e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	b2da      	uxtb	r2, r3
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	617b      	str	r3, [r7, #20]
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	18d1      	adds	r1, r2, r3
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800886c:	f7ff ff06 	bl	800867c <prvInsertTimerInActiveList>
					break;
 8008870:	e015      	b.n	800889e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d103      	bne.n	8008888 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008882:	f7fd fd3f 	bl	8006304 <vPortFree>
 8008886:	e00a      	b.n	800889e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800888e:	f023 0301 	bic.w	r3, r3, #1
 8008892:	b2da      	uxtb	r2, r3
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800889a:	e000      	b.n	800889e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800889c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800889e:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <prvProcessReceivedCommands+0x1c0>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	1d39      	adds	r1, r7, #4
 80088a4:	2200      	movs	r2, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fbec 	bl	8007084 <xQueueReceive>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f47f af2a 	bne.w	8008708 <prvProcessReceivedCommands+0x8>
	}
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3730      	adds	r7, #48	; 0x30
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	24004b2c 	.word	0x24004b2c

080088c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088ca:	e048      	b.n	800895e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088cc:	4b2d      	ldr	r3, [pc, #180]	; (8008984 <prvSwitchTimerLists+0xc0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d6:	4b2b      	ldr	r3, [pc, #172]	; (8008984 <prvSwitchTimerLists+0xc0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fd feb5 	bl	8006654 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d02e      	beq.n	800895e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4413      	add	r3, r2
 8008908:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	429a      	cmp	r2, r3
 8008910:	d90e      	bls.n	8008930 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800891e:	4b19      	ldr	r3, [pc, #100]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f7fd fe5a 	bl	80065e2 <vListInsert>
 800892e:	e016      	b.n	800895e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fd60 	bl	8008400 <xTimerGenericCommand>
 8008940:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	603b      	str	r3, [r7, #0]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1b1      	bne.n	80088cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <prvSwitchTimerLists+0xc0>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <prvSwitchTimerLists+0xc4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a04      	ldr	r2, [pc, #16]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008974:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008976:	4a04      	ldr	r2, [pc, #16]	; (8008988 <prvSwitchTimerLists+0xc4>)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	6013      	str	r3, [r2, #0]
}
 800897c:	bf00      	nop
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	24004b24 	.word	0x24004b24
 8008988:	24004b28 	.word	0x24004b28

0800898c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008992:	f7fd ffb7 	bl	8006904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008996:	4b15      	ldr	r3, [pc, #84]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d120      	bne.n	80089e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800899e:	4814      	ldr	r0, [pc, #80]	; (80089f0 <prvCheckForValidListAndQueue+0x64>)
 80089a0:	f7fd fdce 	bl	8006540 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089a4:	4813      	ldr	r0, [pc, #76]	; (80089f4 <prvCheckForValidListAndQueue+0x68>)
 80089a6:	f7fd fdcb 	bl	8006540 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089aa:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <prvCheckForValidListAndQueue+0x6c>)
 80089ac:	4a10      	ldr	r2, [pc, #64]	; (80089f0 <prvCheckForValidListAndQueue+0x64>)
 80089ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089b0:	4b12      	ldr	r3, [pc, #72]	; (80089fc <prvCheckForValidListAndQueue+0x70>)
 80089b2:	4a10      	ldr	r2, [pc, #64]	; (80089f4 <prvCheckForValidListAndQueue+0x68>)
 80089b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089b6:	2300      	movs	r3, #0
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	4b11      	ldr	r3, [pc, #68]	; (8008a00 <prvCheckForValidListAndQueue+0x74>)
 80089bc:	4a11      	ldr	r2, [pc, #68]	; (8008a04 <prvCheckForValidListAndQueue+0x78>)
 80089be:	2110      	movs	r1, #16
 80089c0:	200a      	movs	r0, #10
 80089c2:	f7fe f929 	bl	8006c18 <xQueueGenericCreateStatic>
 80089c6:	4603      	mov	r3, r0
 80089c8:	4a08      	ldr	r2, [pc, #32]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089cc:	4b07      	ldr	r3, [pc, #28]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	490b      	ldr	r1, [pc, #44]	; (8008a08 <prvCheckForValidListAndQueue+0x7c>)
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd42 	bl	8007464 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089e0:	f7fd ffc0 	bl	8006964 <vPortExitCritical>
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	24004b2c 	.word	0x24004b2c
 80089f0:	24004afc 	.word	0x24004afc
 80089f4:	24004b10 	.word	0x24004b10
 80089f8:	24004b24 	.word	0x24004b24
 80089fc:	24004b28 	.word	0x24004b28
 8008a00:	24004bd8 	.word	0x24004bd8
 8008a04:	24004b38 	.word	0x24004b38
 8008a08:	08009478 	.word	0x08009478

08008a0c <__errno>:
 8008a0c:	4b01      	ldr	r3, [pc, #4]	; (8008a14 <__errno+0x8>)
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	24000014 	.word	0x24000014

08008a18 <__libc_init_array>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	4d0d      	ldr	r5, [pc, #52]	; (8008a50 <__libc_init_array+0x38>)
 8008a1c:	4c0d      	ldr	r4, [pc, #52]	; (8008a54 <__libc_init_array+0x3c>)
 8008a1e:	1b64      	subs	r4, r4, r5
 8008a20:	10a4      	asrs	r4, r4, #2
 8008a22:	2600      	movs	r6, #0
 8008a24:	42a6      	cmp	r6, r4
 8008a26:	d109      	bne.n	8008a3c <__libc_init_array+0x24>
 8008a28:	4d0b      	ldr	r5, [pc, #44]	; (8008a58 <__libc_init_array+0x40>)
 8008a2a:	4c0c      	ldr	r4, [pc, #48]	; (8008a5c <__libc_init_array+0x44>)
 8008a2c:	f000 fcf8 	bl	8009420 <_init>
 8008a30:	1b64      	subs	r4, r4, r5
 8008a32:	10a4      	asrs	r4, r4, #2
 8008a34:	2600      	movs	r6, #0
 8008a36:	42a6      	cmp	r6, r4
 8008a38:	d105      	bne.n	8008a46 <__libc_init_array+0x2e>
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
 8008a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a40:	4798      	blx	r3
 8008a42:	3601      	adds	r6, #1
 8008a44:	e7ee      	b.n	8008a24 <__libc_init_array+0xc>
 8008a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4a:	4798      	blx	r3
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	e7f2      	b.n	8008a36 <__libc_init_array+0x1e>
 8008a50:	0800959c 	.word	0x0800959c
 8008a54:	0800959c 	.word	0x0800959c
 8008a58:	0800959c 	.word	0x0800959c
 8008a5c:	080095a0 	.word	0x080095a0

08008a60 <__retarget_lock_acquire_recursive>:
 8008a60:	4770      	bx	lr

08008a62 <__retarget_lock_release_recursive>:
 8008a62:	4770      	bx	lr

08008a64 <memcpy>:
 8008a64:	440a      	add	r2, r1
 8008a66:	4291      	cmp	r1, r2
 8008a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a6c:	d100      	bne.n	8008a70 <memcpy+0xc>
 8008a6e:	4770      	bx	lr
 8008a70:	b510      	push	{r4, lr}
 8008a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7a:	4291      	cmp	r1, r2
 8008a7c:	d1f9      	bne.n	8008a72 <memcpy+0xe>
 8008a7e:	bd10      	pop	{r4, pc}

08008a80 <memset>:
 8008a80:	4402      	add	r2, r0
 8008a82:	4603      	mov	r3, r0
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d100      	bne.n	8008a8a <memset+0xa>
 8008a88:	4770      	bx	lr
 8008a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a8e:	e7f9      	b.n	8008a84 <memset+0x4>

08008a90 <sbrk_aligned>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	4e0e      	ldr	r6, [pc, #56]	; (8008acc <sbrk_aligned+0x3c>)
 8008a94:	460c      	mov	r4, r1
 8008a96:	6831      	ldr	r1, [r6, #0]
 8008a98:	4605      	mov	r5, r0
 8008a9a:	b911      	cbnz	r1, 8008aa2 <sbrk_aligned+0x12>
 8008a9c:	f000 f8f6 	bl	8008c8c <_sbrk_r>
 8008aa0:	6030      	str	r0, [r6, #0]
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f000 f8f1 	bl	8008c8c <_sbrk_r>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	d00a      	beq.n	8008ac4 <sbrk_aligned+0x34>
 8008aae:	1cc4      	adds	r4, r0, #3
 8008ab0:	f024 0403 	bic.w	r4, r4, #3
 8008ab4:	42a0      	cmp	r0, r4
 8008ab6:	d007      	beq.n	8008ac8 <sbrk_aligned+0x38>
 8008ab8:	1a21      	subs	r1, r4, r0
 8008aba:	4628      	mov	r0, r5
 8008abc:	f000 f8e6 	bl	8008c8c <_sbrk_r>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d101      	bne.n	8008ac8 <sbrk_aligned+0x38>
 8008ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ac8:	4620      	mov	r0, r4
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	24004c30 	.word	0x24004c30

08008ad0 <_malloc_r>:
 8008ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad4:	1ccd      	adds	r5, r1, #3
 8008ad6:	f025 0503 	bic.w	r5, r5, #3
 8008ada:	3508      	adds	r5, #8
 8008adc:	2d0c      	cmp	r5, #12
 8008ade:	bf38      	it	cc
 8008ae0:	250c      	movcc	r5, #12
 8008ae2:	2d00      	cmp	r5, #0
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	db01      	blt.n	8008aec <_malloc_r+0x1c>
 8008ae8:	42a9      	cmp	r1, r5
 8008aea:	d905      	bls.n	8008af8 <_malloc_r+0x28>
 8008aec:	230c      	movs	r3, #12
 8008aee:	603b      	str	r3, [r7, #0]
 8008af0:	2600      	movs	r6, #0
 8008af2:	4630      	mov	r0, r6
 8008af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af8:	4e2e      	ldr	r6, [pc, #184]	; (8008bb4 <_malloc_r+0xe4>)
 8008afa:	f000 f8f7 	bl	8008cec <__malloc_lock>
 8008afe:	6833      	ldr	r3, [r6, #0]
 8008b00:	461c      	mov	r4, r3
 8008b02:	bb34      	cbnz	r4, 8008b52 <_malloc_r+0x82>
 8008b04:	4629      	mov	r1, r5
 8008b06:	4638      	mov	r0, r7
 8008b08:	f7ff ffc2 	bl	8008a90 <sbrk_aligned>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	4604      	mov	r4, r0
 8008b10:	d14d      	bne.n	8008bae <_malloc_r+0xde>
 8008b12:	6834      	ldr	r4, [r6, #0]
 8008b14:	4626      	mov	r6, r4
 8008b16:	2e00      	cmp	r6, #0
 8008b18:	d140      	bne.n	8008b9c <_malloc_r+0xcc>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	4638      	mov	r0, r7
 8008b20:	eb04 0803 	add.w	r8, r4, r3
 8008b24:	f000 f8b2 	bl	8008c8c <_sbrk_r>
 8008b28:	4580      	cmp	r8, r0
 8008b2a:	d13a      	bne.n	8008ba2 <_malloc_r+0xd2>
 8008b2c:	6821      	ldr	r1, [r4, #0]
 8008b2e:	3503      	adds	r5, #3
 8008b30:	1a6d      	subs	r5, r5, r1
 8008b32:	f025 0503 	bic.w	r5, r5, #3
 8008b36:	3508      	adds	r5, #8
 8008b38:	2d0c      	cmp	r5, #12
 8008b3a:	bf38      	it	cc
 8008b3c:	250c      	movcc	r5, #12
 8008b3e:	4629      	mov	r1, r5
 8008b40:	4638      	mov	r0, r7
 8008b42:	f7ff ffa5 	bl	8008a90 <sbrk_aligned>
 8008b46:	3001      	adds	r0, #1
 8008b48:	d02b      	beq.n	8008ba2 <_malloc_r+0xd2>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	442b      	add	r3, r5
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	e00e      	b.n	8008b70 <_malloc_r+0xa0>
 8008b52:	6822      	ldr	r2, [r4, #0]
 8008b54:	1b52      	subs	r2, r2, r5
 8008b56:	d41e      	bmi.n	8008b96 <_malloc_r+0xc6>
 8008b58:	2a0b      	cmp	r2, #11
 8008b5a:	d916      	bls.n	8008b8a <_malloc_r+0xba>
 8008b5c:	1961      	adds	r1, r4, r5
 8008b5e:	42a3      	cmp	r3, r4
 8008b60:	6025      	str	r5, [r4, #0]
 8008b62:	bf18      	it	ne
 8008b64:	6059      	strne	r1, [r3, #4]
 8008b66:	6863      	ldr	r3, [r4, #4]
 8008b68:	bf08      	it	eq
 8008b6a:	6031      	streq	r1, [r6, #0]
 8008b6c:	5162      	str	r2, [r4, r5]
 8008b6e:	604b      	str	r3, [r1, #4]
 8008b70:	4638      	mov	r0, r7
 8008b72:	f104 060b 	add.w	r6, r4, #11
 8008b76:	f000 f8bf 	bl	8008cf8 <__malloc_unlock>
 8008b7a:	f026 0607 	bic.w	r6, r6, #7
 8008b7e:	1d23      	adds	r3, r4, #4
 8008b80:	1af2      	subs	r2, r6, r3
 8008b82:	d0b6      	beq.n	8008af2 <_malloc_r+0x22>
 8008b84:	1b9b      	subs	r3, r3, r6
 8008b86:	50a3      	str	r3, [r4, r2]
 8008b88:	e7b3      	b.n	8008af2 <_malloc_r+0x22>
 8008b8a:	6862      	ldr	r2, [r4, #4]
 8008b8c:	42a3      	cmp	r3, r4
 8008b8e:	bf0c      	ite	eq
 8008b90:	6032      	streq	r2, [r6, #0]
 8008b92:	605a      	strne	r2, [r3, #4]
 8008b94:	e7ec      	b.n	8008b70 <_malloc_r+0xa0>
 8008b96:	4623      	mov	r3, r4
 8008b98:	6864      	ldr	r4, [r4, #4]
 8008b9a:	e7b2      	b.n	8008b02 <_malloc_r+0x32>
 8008b9c:	4634      	mov	r4, r6
 8008b9e:	6876      	ldr	r6, [r6, #4]
 8008ba0:	e7b9      	b.n	8008b16 <_malloc_r+0x46>
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	f000 f8a6 	bl	8008cf8 <__malloc_unlock>
 8008bac:	e7a1      	b.n	8008af2 <_malloc_r+0x22>
 8008bae:	6025      	str	r5, [r4, #0]
 8008bb0:	e7de      	b.n	8008b70 <_malloc_r+0xa0>
 8008bb2:	bf00      	nop
 8008bb4:	24004c2c 	.word	0x24004c2c

08008bb8 <cleanup_glue>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	460c      	mov	r4, r1
 8008bbc:	6809      	ldr	r1, [r1, #0]
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	b109      	cbz	r1, 8008bc6 <cleanup_glue+0xe>
 8008bc2:	f7ff fff9 	bl	8008bb8 <cleanup_glue>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4628      	mov	r0, r5
 8008bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bce:	f000 b899 	b.w	8008d04 <_free_r>
	...

08008bd4 <_reclaim_reent>:
 8008bd4:	4b2c      	ldr	r3, [pc, #176]	; (8008c88 <_reclaim_reent+0xb4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4283      	cmp	r3, r0
 8008bda:	b570      	push	{r4, r5, r6, lr}
 8008bdc:	4604      	mov	r4, r0
 8008bde:	d051      	beq.n	8008c84 <_reclaim_reent+0xb0>
 8008be0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008be2:	b143      	cbz	r3, 8008bf6 <_reclaim_reent+0x22>
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d14a      	bne.n	8008c80 <_reclaim_reent+0xac>
 8008bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bec:	6819      	ldr	r1, [r3, #0]
 8008bee:	b111      	cbz	r1, 8008bf6 <_reclaim_reent+0x22>
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f000 f887 	bl	8008d04 <_free_r>
 8008bf6:	6961      	ldr	r1, [r4, #20]
 8008bf8:	b111      	cbz	r1, 8008c00 <_reclaim_reent+0x2c>
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 f882 	bl	8008d04 <_free_r>
 8008c00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c02:	b111      	cbz	r1, 8008c0a <_reclaim_reent+0x36>
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 f87d 	bl	8008d04 <_free_r>
 8008c0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c0c:	b111      	cbz	r1, 8008c14 <_reclaim_reent+0x40>
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 f878 	bl	8008d04 <_free_r>
 8008c14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008c16:	b111      	cbz	r1, 8008c1e <_reclaim_reent+0x4a>
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 f873 	bl	8008d04 <_free_r>
 8008c1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008c20:	b111      	cbz	r1, 8008c28 <_reclaim_reent+0x54>
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 f86e 	bl	8008d04 <_free_r>
 8008c28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008c2a:	b111      	cbz	r1, 8008c32 <_reclaim_reent+0x5e>
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 f869 	bl	8008d04 <_free_r>
 8008c32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008c34:	b111      	cbz	r1, 8008c3c <_reclaim_reent+0x68>
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 f864 	bl	8008d04 <_free_r>
 8008c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3e:	b111      	cbz	r1, 8008c46 <_reclaim_reent+0x72>
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 f85f 	bl	8008d04 <_free_r>
 8008c46:	69a3      	ldr	r3, [r4, #24]
 8008c48:	b1e3      	cbz	r3, 8008c84 <_reclaim_reent+0xb0>
 8008c4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4798      	blx	r3
 8008c50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c52:	b1b9      	cbz	r1, 8008c84 <_reclaim_reent+0xb0>
 8008c54:	4620      	mov	r0, r4
 8008c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c5a:	f7ff bfad 	b.w	8008bb8 <cleanup_glue>
 8008c5e:	5949      	ldr	r1, [r1, r5]
 8008c60:	b941      	cbnz	r1, 8008c74 <_reclaim_reent+0xa0>
 8008c62:	3504      	adds	r5, #4
 8008c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c66:	2d80      	cmp	r5, #128	; 0x80
 8008c68:	68d9      	ldr	r1, [r3, #12]
 8008c6a:	d1f8      	bne.n	8008c5e <_reclaim_reent+0x8a>
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 f849 	bl	8008d04 <_free_r>
 8008c72:	e7ba      	b.n	8008bea <_reclaim_reent+0x16>
 8008c74:	680e      	ldr	r6, [r1, #0]
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 f844 	bl	8008d04 <_free_r>
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	e7ef      	b.n	8008c60 <_reclaim_reent+0x8c>
 8008c80:	2500      	movs	r5, #0
 8008c82:	e7ef      	b.n	8008c64 <_reclaim_reent+0x90>
 8008c84:	bd70      	pop	{r4, r5, r6, pc}
 8008c86:	bf00      	nop
 8008c88:	24000014 	.word	0x24000014

08008c8c <_sbrk_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d06      	ldr	r5, [pc, #24]	; (8008ca8 <_sbrk_r+0x1c>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	f7f8 fab8 	bl	800120c <_sbrk>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_sbrk_r+0x1a>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_sbrk_r+0x1a>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	24004c34 	.word	0x24004c34

08008cac <_vsiprintf_r>:
 8008cac:	b500      	push	{lr}
 8008cae:	b09b      	sub	sp, #108	; 0x6c
 8008cb0:	9100      	str	r1, [sp, #0]
 8008cb2:	9104      	str	r1, [sp, #16]
 8008cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cb8:	9105      	str	r1, [sp, #20]
 8008cba:	9102      	str	r1, [sp, #8]
 8008cbc:	4905      	ldr	r1, [pc, #20]	; (8008cd4 <_vsiprintf_r+0x28>)
 8008cbe:	9103      	str	r1, [sp, #12]
 8008cc0:	4669      	mov	r1, sp
 8008cc2:	f000 f8c7 	bl	8008e54 <_svfiprintf_r>
 8008cc6:	9b00      	ldr	r3, [sp, #0]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	b01b      	add	sp, #108	; 0x6c
 8008cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cd2:	bf00      	nop
 8008cd4:	ffff0208 	.word	0xffff0208

08008cd8 <vsiprintf>:
 8008cd8:	4613      	mov	r3, r2
 8008cda:	460a      	mov	r2, r1
 8008cdc:	4601      	mov	r1, r0
 8008cde:	4802      	ldr	r0, [pc, #8]	; (8008ce8 <vsiprintf+0x10>)
 8008ce0:	6800      	ldr	r0, [r0, #0]
 8008ce2:	f7ff bfe3 	b.w	8008cac <_vsiprintf_r>
 8008ce6:	bf00      	nop
 8008ce8:	24000014 	.word	0x24000014

08008cec <__malloc_lock>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__malloc_lock+0x8>)
 8008cee:	f7ff beb7 	b.w	8008a60 <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	24004c28 	.word	0x24004c28

08008cf8 <__malloc_unlock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_unlock+0x8>)
 8008cfa:	f7ff beb2 	b.w	8008a62 <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	24004c28 	.word	0x24004c28

08008d04 <_free_r>:
 8008d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d06:	2900      	cmp	r1, #0
 8008d08:	d044      	beq.n	8008d94 <_free_r+0x90>
 8008d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d0e:	9001      	str	r0, [sp, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f1a1 0404 	sub.w	r4, r1, #4
 8008d16:	bfb8      	it	lt
 8008d18:	18e4      	addlt	r4, r4, r3
 8008d1a:	f7ff ffe7 	bl	8008cec <__malloc_lock>
 8008d1e:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <_free_r+0x94>)
 8008d20:	9801      	ldr	r0, [sp, #4]
 8008d22:	6813      	ldr	r3, [r2, #0]
 8008d24:	b933      	cbnz	r3, 8008d34 <_free_r+0x30>
 8008d26:	6063      	str	r3, [r4, #4]
 8008d28:	6014      	str	r4, [r2, #0]
 8008d2a:	b003      	add	sp, #12
 8008d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d30:	f7ff bfe2 	b.w	8008cf8 <__malloc_unlock>
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	d908      	bls.n	8008d4a <_free_r+0x46>
 8008d38:	6825      	ldr	r5, [r4, #0]
 8008d3a:	1961      	adds	r1, r4, r5
 8008d3c:	428b      	cmp	r3, r1
 8008d3e:	bf01      	itttt	eq
 8008d40:	6819      	ldreq	r1, [r3, #0]
 8008d42:	685b      	ldreq	r3, [r3, #4]
 8008d44:	1949      	addeq	r1, r1, r5
 8008d46:	6021      	streq	r1, [r4, #0]
 8008d48:	e7ed      	b.n	8008d26 <_free_r+0x22>
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b10b      	cbz	r3, 8008d54 <_free_r+0x50>
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d9fa      	bls.n	8008d4a <_free_r+0x46>
 8008d54:	6811      	ldr	r1, [r2, #0]
 8008d56:	1855      	adds	r5, r2, r1
 8008d58:	42a5      	cmp	r5, r4
 8008d5a:	d10b      	bne.n	8008d74 <_free_r+0x70>
 8008d5c:	6824      	ldr	r4, [r4, #0]
 8008d5e:	4421      	add	r1, r4
 8008d60:	1854      	adds	r4, r2, r1
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	d1e0      	bne.n	8008d2a <_free_r+0x26>
 8008d68:	681c      	ldr	r4, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	6053      	str	r3, [r2, #4]
 8008d6e:	4421      	add	r1, r4
 8008d70:	6011      	str	r1, [r2, #0]
 8008d72:	e7da      	b.n	8008d2a <_free_r+0x26>
 8008d74:	d902      	bls.n	8008d7c <_free_r+0x78>
 8008d76:	230c      	movs	r3, #12
 8008d78:	6003      	str	r3, [r0, #0]
 8008d7a:	e7d6      	b.n	8008d2a <_free_r+0x26>
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	1961      	adds	r1, r4, r5
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf04      	itt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	6063      	str	r3, [r4, #4]
 8008d8a:	bf04      	itt	eq
 8008d8c:	1949      	addeq	r1, r1, r5
 8008d8e:	6021      	streq	r1, [r4, #0]
 8008d90:	6054      	str	r4, [r2, #4]
 8008d92:	e7ca      	b.n	8008d2a <_free_r+0x26>
 8008d94:	b003      	add	sp, #12
 8008d96:	bd30      	pop	{r4, r5, pc}
 8008d98:	24004c2c 	.word	0x24004c2c

08008d9c <__ssputs_r>:
 8008d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da0:	688e      	ldr	r6, [r1, #8]
 8008da2:	429e      	cmp	r6, r3
 8008da4:	4682      	mov	sl, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	4690      	mov	r8, r2
 8008daa:	461f      	mov	r7, r3
 8008dac:	d838      	bhi.n	8008e20 <__ssputs_r+0x84>
 8008dae:	898a      	ldrh	r2, [r1, #12]
 8008db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008db4:	d032      	beq.n	8008e1c <__ssputs_r+0x80>
 8008db6:	6825      	ldr	r5, [r4, #0]
 8008db8:	6909      	ldr	r1, [r1, #16]
 8008dba:	eba5 0901 	sub.w	r9, r5, r1
 8008dbe:	6965      	ldr	r5, [r4, #20]
 8008dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dc8:	3301      	adds	r3, #1
 8008dca:	444b      	add	r3, r9
 8008dcc:	106d      	asrs	r5, r5, #1
 8008dce:	429d      	cmp	r5, r3
 8008dd0:	bf38      	it	cc
 8008dd2:	461d      	movcc	r5, r3
 8008dd4:	0553      	lsls	r3, r2, #21
 8008dd6:	d531      	bpl.n	8008e3c <__ssputs_r+0xa0>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7ff fe79 	bl	8008ad0 <_malloc_r>
 8008dde:	4606      	mov	r6, r0
 8008de0:	b950      	cbnz	r0, 8008df8 <__ssputs_r+0x5c>
 8008de2:	230c      	movs	r3, #12
 8008de4:	f8ca 3000 	str.w	r3, [sl]
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df8:	6921      	ldr	r1, [r4, #16]
 8008dfa:	464a      	mov	r2, r9
 8008dfc:	f7ff fe32 	bl	8008a64 <memcpy>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	6126      	str	r6, [r4, #16]
 8008e0e:	6165      	str	r5, [r4, #20]
 8008e10:	444e      	add	r6, r9
 8008e12:	eba5 0509 	sub.w	r5, r5, r9
 8008e16:	6026      	str	r6, [r4, #0]
 8008e18:	60a5      	str	r5, [r4, #8]
 8008e1a:	463e      	mov	r6, r7
 8008e1c:	42be      	cmp	r6, r7
 8008e1e:	d900      	bls.n	8008e22 <__ssputs_r+0x86>
 8008e20:	463e      	mov	r6, r7
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	4632      	mov	r2, r6
 8008e26:	4641      	mov	r1, r8
 8008e28:	f000 faa8 	bl	800937c <memmove>
 8008e2c:	68a3      	ldr	r3, [r4, #8]
 8008e2e:	1b9b      	subs	r3, r3, r6
 8008e30:	60a3      	str	r3, [r4, #8]
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	4433      	add	r3, r6
 8008e36:	6023      	str	r3, [r4, #0]
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7db      	b.n	8008df4 <__ssputs_r+0x58>
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	f000 fab7 	bl	80093b0 <_realloc_r>
 8008e42:	4606      	mov	r6, r0
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d1e1      	bne.n	8008e0c <__ssputs_r+0x70>
 8008e48:	6921      	ldr	r1, [r4, #16]
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	f7ff ff5a 	bl	8008d04 <_free_r>
 8008e50:	e7c7      	b.n	8008de2 <__ssputs_r+0x46>
	...

08008e54 <_svfiprintf_r>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	4698      	mov	r8, r3
 8008e5a:	898b      	ldrh	r3, [r1, #12]
 8008e5c:	061b      	lsls	r3, r3, #24
 8008e5e:	b09d      	sub	sp, #116	; 0x74
 8008e60:	4607      	mov	r7, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	4614      	mov	r4, r2
 8008e66:	d50e      	bpl.n	8008e86 <_svfiprintf_r+0x32>
 8008e68:	690b      	ldr	r3, [r1, #16]
 8008e6a:	b963      	cbnz	r3, 8008e86 <_svfiprintf_r+0x32>
 8008e6c:	2140      	movs	r1, #64	; 0x40
 8008e6e:	f7ff fe2f 	bl	8008ad0 <_malloc_r>
 8008e72:	6028      	str	r0, [r5, #0]
 8008e74:	6128      	str	r0, [r5, #16]
 8008e76:	b920      	cbnz	r0, 8008e82 <_svfiprintf_r+0x2e>
 8008e78:	230c      	movs	r3, #12
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	e0d1      	b.n	8009026 <_svfiprintf_r+0x1d2>
 8008e82:	2340      	movs	r3, #64	; 0x40
 8008e84:	616b      	str	r3, [r5, #20]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8a:	2320      	movs	r3, #32
 8008e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e94:	2330      	movs	r3, #48	; 0x30
 8008e96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009040 <_svfiprintf_r+0x1ec>
 8008e9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e9e:	f04f 0901 	mov.w	r9, #1
 8008ea2:	4623      	mov	r3, r4
 8008ea4:	469a      	mov	sl, r3
 8008ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eaa:	b10a      	cbz	r2, 8008eb0 <_svfiprintf_r+0x5c>
 8008eac:	2a25      	cmp	r2, #37	; 0x25
 8008eae:	d1f9      	bne.n	8008ea4 <_svfiprintf_r+0x50>
 8008eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb4:	d00b      	beq.n	8008ece <_svfiprintf_r+0x7a>
 8008eb6:	465b      	mov	r3, fp
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff ff6d 	bl	8008d9c <__ssputs_r>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f000 80aa 	beq.w	800901c <_svfiprintf_r+0x1c8>
 8008ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eca:	445a      	add	r2, fp
 8008ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ece:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 80a2 	beq.w	800901c <_svfiprintf_r+0x1c8>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295
 8008ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee2:	f10a 0a01 	add.w	sl, sl, #1
 8008ee6:	9304      	str	r3, [sp, #16]
 8008ee8:	9307      	str	r3, [sp, #28]
 8008eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eee:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef0:	4654      	mov	r4, sl
 8008ef2:	2205      	movs	r2, #5
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	4851      	ldr	r0, [pc, #324]	; (8009040 <_svfiprintf_r+0x1ec>)
 8008efa:	f7f7 f9f9 	bl	80002f0 <memchr>
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	b9d8      	cbnz	r0, 8008f3a <_svfiprintf_r+0xe6>
 8008f02:	06d0      	lsls	r0, r2, #27
 8008f04:	bf44      	itt	mi
 8008f06:	2320      	movmi	r3, #32
 8008f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f0c:	0711      	lsls	r1, r2, #28
 8008f0e:	bf44      	itt	mi
 8008f10:	232b      	movmi	r3, #43	; 0x2b
 8008f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f16:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f1c:	d015      	beq.n	8008f4a <_svfiprintf_r+0xf6>
 8008f1e:	9a07      	ldr	r2, [sp, #28]
 8008f20:	4654      	mov	r4, sl
 8008f22:	2000      	movs	r0, #0
 8008f24:	f04f 0c0a 	mov.w	ip, #10
 8008f28:	4621      	mov	r1, r4
 8008f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f2e:	3b30      	subs	r3, #48	; 0x30
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	d94e      	bls.n	8008fd2 <_svfiprintf_r+0x17e>
 8008f34:	b1b0      	cbz	r0, 8008f64 <_svfiprintf_r+0x110>
 8008f36:	9207      	str	r2, [sp, #28]
 8008f38:	e014      	b.n	8008f64 <_svfiprintf_r+0x110>
 8008f3a:	eba0 0308 	sub.w	r3, r0, r8
 8008f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f42:	4313      	orrs	r3, r2
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	46a2      	mov	sl, r4
 8008f48:	e7d2      	b.n	8008ef0 <_svfiprintf_r+0x9c>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	1d19      	adds	r1, r3, #4
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	9103      	str	r1, [sp, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfbb      	ittet	lt
 8008f56:	425b      	neglt	r3, r3
 8008f58:	f042 0202 	orrlt.w	r2, r2, #2
 8008f5c:	9307      	strge	r3, [sp, #28]
 8008f5e:	9307      	strlt	r3, [sp, #28]
 8008f60:	bfb8      	it	lt
 8008f62:	9204      	strlt	r2, [sp, #16]
 8008f64:	7823      	ldrb	r3, [r4, #0]
 8008f66:	2b2e      	cmp	r3, #46	; 0x2e
 8008f68:	d10c      	bne.n	8008f84 <_svfiprintf_r+0x130>
 8008f6a:	7863      	ldrb	r3, [r4, #1]
 8008f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6e:	d135      	bne.n	8008fdc <_svfiprintf_r+0x188>
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	1d1a      	adds	r2, r3, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	9203      	str	r2, [sp, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bfb8      	it	lt
 8008f7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f80:	3402      	adds	r4, #2
 8008f82:	9305      	str	r3, [sp, #20]
 8008f84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009050 <_svfiprintf_r+0x1fc>
 8008f88:	7821      	ldrb	r1, [r4, #0]
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	f7f7 f9af 	bl	80002f0 <memchr>
 8008f92:	b140      	cbz	r0, 8008fa6 <_svfiprintf_r+0x152>
 8008f94:	2340      	movs	r3, #64	; 0x40
 8008f96:	eba0 000a 	sub.w	r0, r0, sl
 8008f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f9e:	9b04      	ldr	r3, [sp, #16]
 8008fa0:	4303      	orrs	r3, r0
 8008fa2:	3401      	adds	r4, #1
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008faa:	4826      	ldr	r0, [pc, #152]	; (8009044 <_svfiprintf_r+0x1f0>)
 8008fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb0:	2206      	movs	r2, #6
 8008fb2:	f7f7 f99d 	bl	80002f0 <memchr>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d038      	beq.n	800902c <_svfiprintf_r+0x1d8>
 8008fba:	4b23      	ldr	r3, [pc, #140]	; (8009048 <_svfiprintf_r+0x1f4>)
 8008fbc:	bb1b      	cbnz	r3, 8009006 <_svfiprintf_r+0x1b2>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	3307      	adds	r3, #7
 8008fc2:	f023 0307 	bic.w	r3, r3, #7
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	9303      	str	r3, [sp, #12]
 8008fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fcc:	4433      	add	r3, r6
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	e767      	b.n	8008ea2 <_svfiprintf_r+0x4e>
 8008fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	2001      	movs	r0, #1
 8008fda:	e7a5      	b.n	8008f28 <_svfiprintf_r+0xd4>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	3401      	adds	r4, #1
 8008fe0:	9305      	str	r3, [sp, #20]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f04f 0c0a 	mov.w	ip, #10
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fee:	3a30      	subs	r2, #48	; 0x30
 8008ff0:	2a09      	cmp	r2, #9
 8008ff2:	d903      	bls.n	8008ffc <_svfiprintf_r+0x1a8>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0c5      	beq.n	8008f84 <_svfiprintf_r+0x130>
 8008ff8:	9105      	str	r1, [sp, #20]
 8008ffa:	e7c3      	b.n	8008f84 <_svfiprintf_r+0x130>
 8008ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009000:	4604      	mov	r4, r0
 8009002:	2301      	movs	r3, #1
 8009004:	e7f0      	b.n	8008fe8 <_svfiprintf_r+0x194>
 8009006:	ab03      	add	r3, sp, #12
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	462a      	mov	r2, r5
 800900c:	4b0f      	ldr	r3, [pc, #60]	; (800904c <_svfiprintf_r+0x1f8>)
 800900e:	a904      	add	r1, sp, #16
 8009010:	4638      	mov	r0, r7
 8009012:	f3af 8000 	nop.w
 8009016:	1c42      	adds	r2, r0, #1
 8009018:	4606      	mov	r6, r0
 800901a:	d1d6      	bne.n	8008fca <_svfiprintf_r+0x176>
 800901c:	89ab      	ldrh	r3, [r5, #12]
 800901e:	065b      	lsls	r3, r3, #25
 8009020:	f53f af2c 	bmi.w	8008e7c <_svfiprintf_r+0x28>
 8009024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009026:	b01d      	add	sp, #116	; 0x74
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	ab03      	add	r3, sp, #12
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	462a      	mov	r2, r5
 8009032:	4b06      	ldr	r3, [pc, #24]	; (800904c <_svfiprintf_r+0x1f8>)
 8009034:	a904      	add	r1, sp, #16
 8009036:	4638      	mov	r0, r7
 8009038:	f000 f87a 	bl	8009130 <_printf_i>
 800903c:	e7eb      	b.n	8009016 <_svfiprintf_r+0x1c2>
 800903e:	bf00      	nop
 8009040:	08009560 	.word	0x08009560
 8009044:	0800956a 	.word	0x0800956a
 8009048:	00000000 	.word	0x00000000
 800904c:	08008d9d 	.word	0x08008d9d
 8009050:	08009566 	.word	0x08009566

08009054 <_printf_common>:
 8009054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	4616      	mov	r6, r2
 800905a:	4699      	mov	r9, r3
 800905c:	688a      	ldr	r2, [r1, #8]
 800905e:	690b      	ldr	r3, [r1, #16]
 8009060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009064:	4293      	cmp	r3, r2
 8009066:	bfb8      	it	lt
 8009068:	4613      	movlt	r3, r2
 800906a:	6033      	str	r3, [r6, #0]
 800906c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009070:	4607      	mov	r7, r0
 8009072:	460c      	mov	r4, r1
 8009074:	b10a      	cbz	r2, 800907a <_printf_common+0x26>
 8009076:	3301      	adds	r3, #1
 8009078:	6033      	str	r3, [r6, #0]
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	0699      	lsls	r1, r3, #26
 800907e:	bf42      	ittt	mi
 8009080:	6833      	ldrmi	r3, [r6, #0]
 8009082:	3302      	addmi	r3, #2
 8009084:	6033      	strmi	r3, [r6, #0]
 8009086:	6825      	ldr	r5, [r4, #0]
 8009088:	f015 0506 	ands.w	r5, r5, #6
 800908c:	d106      	bne.n	800909c <_printf_common+0x48>
 800908e:	f104 0a19 	add.w	sl, r4, #25
 8009092:	68e3      	ldr	r3, [r4, #12]
 8009094:	6832      	ldr	r2, [r6, #0]
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	42ab      	cmp	r3, r5
 800909a:	dc26      	bgt.n	80090ea <_printf_common+0x96>
 800909c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090a0:	1e13      	subs	r3, r2, #0
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	bf18      	it	ne
 80090a6:	2301      	movne	r3, #1
 80090a8:	0692      	lsls	r2, r2, #26
 80090aa:	d42b      	bmi.n	8009104 <_printf_common+0xb0>
 80090ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090b0:	4649      	mov	r1, r9
 80090b2:	4638      	mov	r0, r7
 80090b4:	47c0      	blx	r8
 80090b6:	3001      	adds	r0, #1
 80090b8:	d01e      	beq.n	80090f8 <_printf_common+0xa4>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	68e5      	ldr	r5, [r4, #12]
 80090be:	6832      	ldr	r2, [r6, #0]
 80090c0:	f003 0306 	and.w	r3, r3, #6
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	bf08      	it	eq
 80090c8:	1aad      	subeq	r5, r5, r2
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	bf0c      	ite	eq
 80090d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090d4:	2500      	movne	r5, #0
 80090d6:	4293      	cmp	r3, r2
 80090d8:	bfc4      	itt	gt
 80090da:	1a9b      	subgt	r3, r3, r2
 80090dc:	18ed      	addgt	r5, r5, r3
 80090de:	2600      	movs	r6, #0
 80090e0:	341a      	adds	r4, #26
 80090e2:	42b5      	cmp	r5, r6
 80090e4:	d11a      	bne.n	800911c <_printf_common+0xc8>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e008      	b.n	80090fc <_printf_common+0xa8>
 80090ea:	2301      	movs	r3, #1
 80090ec:	4652      	mov	r2, sl
 80090ee:	4649      	mov	r1, r9
 80090f0:	4638      	mov	r0, r7
 80090f2:	47c0      	blx	r8
 80090f4:	3001      	adds	r0, #1
 80090f6:	d103      	bne.n	8009100 <_printf_common+0xac>
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	3501      	adds	r5, #1
 8009102:	e7c6      	b.n	8009092 <_printf_common+0x3e>
 8009104:	18e1      	adds	r1, r4, r3
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	2030      	movs	r0, #48	; 0x30
 800910a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800910e:	4422      	add	r2, r4
 8009110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009118:	3302      	adds	r3, #2
 800911a:	e7c7      	b.n	80090ac <_printf_common+0x58>
 800911c:	2301      	movs	r3, #1
 800911e:	4622      	mov	r2, r4
 8009120:	4649      	mov	r1, r9
 8009122:	4638      	mov	r0, r7
 8009124:	47c0      	blx	r8
 8009126:	3001      	adds	r0, #1
 8009128:	d0e6      	beq.n	80090f8 <_printf_common+0xa4>
 800912a:	3601      	adds	r6, #1
 800912c:	e7d9      	b.n	80090e2 <_printf_common+0x8e>
	...

08009130 <_printf_i>:
 8009130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009134:	7e0f      	ldrb	r7, [r1, #24]
 8009136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009138:	2f78      	cmp	r7, #120	; 0x78
 800913a:	4691      	mov	r9, r2
 800913c:	4680      	mov	r8, r0
 800913e:	460c      	mov	r4, r1
 8009140:	469a      	mov	sl, r3
 8009142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009146:	d807      	bhi.n	8009158 <_printf_i+0x28>
 8009148:	2f62      	cmp	r7, #98	; 0x62
 800914a:	d80a      	bhi.n	8009162 <_printf_i+0x32>
 800914c:	2f00      	cmp	r7, #0
 800914e:	f000 80d8 	beq.w	8009302 <_printf_i+0x1d2>
 8009152:	2f58      	cmp	r7, #88	; 0x58
 8009154:	f000 80a3 	beq.w	800929e <_printf_i+0x16e>
 8009158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800915c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009160:	e03a      	b.n	80091d8 <_printf_i+0xa8>
 8009162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009166:	2b15      	cmp	r3, #21
 8009168:	d8f6      	bhi.n	8009158 <_printf_i+0x28>
 800916a:	a101      	add	r1, pc, #4	; (adr r1, 8009170 <_printf_i+0x40>)
 800916c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009170:	080091c9 	.word	0x080091c9
 8009174:	080091dd 	.word	0x080091dd
 8009178:	08009159 	.word	0x08009159
 800917c:	08009159 	.word	0x08009159
 8009180:	08009159 	.word	0x08009159
 8009184:	08009159 	.word	0x08009159
 8009188:	080091dd 	.word	0x080091dd
 800918c:	08009159 	.word	0x08009159
 8009190:	08009159 	.word	0x08009159
 8009194:	08009159 	.word	0x08009159
 8009198:	08009159 	.word	0x08009159
 800919c:	080092e9 	.word	0x080092e9
 80091a0:	0800920d 	.word	0x0800920d
 80091a4:	080092cb 	.word	0x080092cb
 80091a8:	08009159 	.word	0x08009159
 80091ac:	08009159 	.word	0x08009159
 80091b0:	0800930b 	.word	0x0800930b
 80091b4:	08009159 	.word	0x08009159
 80091b8:	0800920d 	.word	0x0800920d
 80091bc:	08009159 	.word	0x08009159
 80091c0:	08009159 	.word	0x08009159
 80091c4:	080092d3 	.word	0x080092d3
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	602a      	str	r2, [r5, #0]
 80091d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091d8:	2301      	movs	r3, #1
 80091da:	e0a3      	b.n	8009324 <_printf_i+0x1f4>
 80091dc:	6820      	ldr	r0, [r4, #0]
 80091de:	6829      	ldr	r1, [r5, #0]
 80091e0:	0606      	lsls	r6, r0, #24
 80091e2:	f101 0304 	add.w	r3, r1, #4
 80091e6:	d50a      	bpl.n	80091fe <_printf_i+0xce>
 80091e8:	680e      	ldr	r6, [r1, #0]
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	2e00      	cmp	r6, #0
 80091ee:	da03      	bge.n	80091f8 <_printf_i+0xc8>
 80091f0:	232d      	movs	r3, #45	; 0x2d
 80091f2:	4276      	negs	r6, r6
 80091f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f8:	485e      	ldr	r0, [pc, #376]	; (8009374 <_printf_i+0x244>)
 80091fa:	230a      	movs	r3, #10
 80091fc:	e019      	b.n	8009232 <_printf_i+0x102>
 80091fe:	680e      	ldr	r6, [r1, #0]
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009206:	bf18      	it	ne
 8009208:	b236      	sxthne	r6, r6
 800920a:	e7ef      	b.n	80091ec <_printf_i+0xbc>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	6820      	ldr	r0, [r4, #0]
 8009210:	1d19      	adds	r1, r3, #4
 8009212:	6029      	str	r1, [r5, #0]
 8009214:	0601      	lsls	r1, r0, #24
 8009216:	d501      	bpl.n	800921c <_printf_i+0xec>
 8009218:	681e      	ldr	r6, [r3, #0]
 800921a:	e002      	b.n	8009222 <_printf_i+0xf2>
 800921c:	0646      	lsls	r6, r0, #25
 800921e:	d5fb      	bpl.n	8009218 <_printf_i+0xe8>
 8009220:	881e      	ldrh	r6, [r3, #0]
 8009222:	4854      	ldr	r0, [pc, #336]	; (8009374 <_printf_i+0x244>)
 8009224:	2f6f      	cmp	r7, #111	; 0x6f
 8009226:	bf0c      	ite	eq
 8009228:	2308      	moveq	r3, #8
 800922a:	230a      	movne	r3, #10
 800922c:	2100      	movs	r1, #0
 800922e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009232:	6865      	ldr	r5, [r4, #4]
 8009234:	60a5      	str	r5, [r4, #8]
 8009236:	2d00      	cmp	r5, #0
 8009238:	bfa2      	ittt	ge
 800923a:	6821      	ldrge	r1, [r4, #0]
 800923c:	f021 0104 	bicge.w	r1, r1, #4
 8009240:	6021      	strge	r1, [r4, #0]
 8009242:	b90e      	cbnz	r6, 8009248 <_printf_i+0x118>
 8009244:	2d00      	cmp	r5, #0
 8009246:	d04d      	beq.n	80092e4 <_printf_i+0x1b4>
 8009248:	4615      	mov	r5, r2
 800924a:	fbb6 f1f3 	udiv	r1, r6, r3
 800924e:	fb03 6711 	mls	r7, r3, r1, r6
 8009252:	5dc7      	ldrb	r7, [r0, r7]
 8009254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009258:	4637      	mov	r7, r6
 800925a:	42bb      	cmp	r3, r7
 800925c:	460e      	mov	r6, r1
 800925e:	d9f4      	bls.n	800924a <_printf_i+0x11a>
 8009260:	2b08      	cmp	r3, #8
 8009262:	d10b      	bne.n	800927c <_printf_i+0x14c>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	07de      	lsls	r6, r3, #31
 8009268:	d508      	bpl.n	800927c <_printf_i+0x14c>
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	6861      	ldr	r1, [r4, #4]
 800926e:	4299      	cmp	r1, r3
 8009270:	bfde      	ittt	le
 8009272:	2330      	movle	r3, #48	; 0x30
 8009274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009278:	f105 35ff 	addle.w	r5, r5, #4294967295
 800927c:	1b52      	subs	r2, r2, r5
 800927e:	6122      	str	r2, [r4, #16]
 8009280:	f8cd a000 	str.w	sl, [sp]
 8009284:	464b      	mov	r3, r9
 8009286:	aa03      	add	r2, sp, #12
 8009288:	4621      	mov	r1, r4
 800928a:	4640      	mov	r0, r8
 800928c:	f7ff fee2 	bl	8009054 <_printf_common>
 8009290:	3001      	adds	r0, #1
 8009292:	d14c      	bne.n	800932e <_printf_i+0x1fe>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	b004      	add	sp, #16
 800929a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929e:	4835      	ldr	r0, [pc, #212]	; (8009374 <_printf_i+0x244>)
 80092a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092a4:	6829      	ldr	r1, [r5, #0]
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80092ac:	6029      	str	r1, [r5, #0]
 80092ae:	061d      	lsls	r5, r3, #24
 80092b0:	d514      	bpl.n	80092dc <_printf_i+0x1ac>
 80092b2:	07df      	lsls	r7, r3, #31
 80092b4:	bf44      	itt	mi
 80092b6:	f043 0320 	orrmi.w	r3, r3, #32
 80092ba:	6023      	strmi	r3, [r4, #0]
 80092bc:	b91e      	cbnz	r6, 80092c6 <_printf_i+0x196>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	f023 0320 	bic.w	r3, r3, #32
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	2310      	movs	r3, #16
 80092c8:	e7b0      	b.n	800922c <_printf_i+0xfc>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	f043 0320 	orr.w	r3, r3, #32
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	2378      	movs	r3, #120	; 0x78
 80092d4:	4828      	ldr	r0, [pc, #160]	; (8009378 <_printf_i+0x248>)
 80092d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092da:	e7e3      	b.n	80092a4 <_printf_i+0x174>
 80092dc:	0659      	lsls	r1, r3, #25
 80092de:	bf48      	it	mi
 80092e0:	b2b6      	uxthmi	r6, r6
 80092e2:	e7e6      	b.n	80092b2 <_printf_i+0x182>
 80092e4:	4615      	mov	r5, r2
 80092e6:	e7bb      	b.n	8009260 <_printf_i+0x130>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	6826      	ldr	r6, [r4, #0]
 80092ec:	6961      	ldr	r1, [r4, #20]
 80092ee:	1d18      	adds	r0, r3, #4
 80092f0:	6028      	str	r0, [r5, #0]
 80092f2:	0635      	lsls	r5, r6, #24
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	d501      	bpl.n	80092fc <_printf_i+0x1cc>
 80092f8:	6019      	str	r1, [r3, #0]
 80092fa:	e002      	b.n	8009302 <_printf_i+0x1d2>
 80092fc:	0670      	lsls	r0, r6, #25
 80092fe:	d5fb      	bpl.n	80092f8 <_printf_i+0x1c8>
 8009300:	8019      	strh	r1, [r3, #0]
 8009302:	2300      	movs	r3, #0
 8009304:	6123      	str	r3, [r4, #16]
 8009306:	4615      	mov	r5, r2
 8009308:	e7ba      	b.n	8009280 <_printf_i+0x150>
 800930a:	682b      	ldr	r3, [r5, #0]
 800930c:	1d1a      	adds	r2, r3, #4
 800930e:	602a      	str	r2, [r5, #0]
 8009310:	681d      	ldr	r5, [r3, #0]
 8009312:	6862      	ldr	r2, [r4, #4]
 8009314:	2100      	movs	r1, #0
 8009316:	4628      	mov	r0, r5
 8009318:	f7f6 ffea 	bl	80002f0 <memchr>
 800931c:	b108      	cbz	r0, 8009322 <_printf_i+0x1f2>
 800931e:	1b40      	subs	r0, r0, r5
 8009320:	6060      	str	r0, [r4, #4]
 8009322:	6863      	ldr	r3, [r4, #4]
 8009324:	6123      	str	r3, [r4, #16]
 8009326:	2300      	movs	r3, #0
 8009328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800932c:	e7a8      	b.n	8009280 <_printf_i+0x150>
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	462a      	mov	r2, r5
 8009332:	4649      	mov	r1, r9
 8009334:	4640      	mov	r0, r8
 8009336:	47d0      	blx	sl
 8009338:	3001      	adds	r0, #1
 800933a:	d0ab      	beq.n	8009294 <_printf_i+0x164>
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	079b      	lsls	r3, r3, #30
 8009340:	d413      	bmi.n	800936a <_printf_i+0x23a>
 8009342:	68e0      	ldr	r0, [r4, #12]
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	4298      	cmp	r0, r3
 8009348:	bfb8      	it	lt
 800934a:	4618      	movlt	r0, r3
 800934c:	e7a4      	b.n	8009298 <_printf_i+0x168>
 800934e:	2301      	movs	r3, #1
 8009350:	4632      	mov	r2, r6
 8009352:	4649      	mov	r1, r9
 8009354:	4640      	mov	r0, r8
 8009356:	47d0      	blx	sl
 8009358:	3001      	adds	r0, #1
 800935a:	d09b      	beq.n	8009294 <_printf_i+0x164>
 800935c:	3501      	adds	r5, #1
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	9903      	ldr	r1, [sp, #12]
 8009362:	1a5b      	subs	r3, r3, r1
 8009364:	42ab      	cmp	r3, r5
 8009366:	dcf2      	bgt.n	800934e <_printf_i+0x21e>
 8009368:	e7eb      	b.n	8009342 <_printf_i+0x212>
 800936a:	2500      	movs	r5, #0
 800936c:	f104 0619 	add.w	r6, r4, #25
 8009370:	e7f5      	b.n	800935e <_printf_i+0x22e>
 8009372:	bf00      	nop
 8009374:	08009571 	.word	0x08009571
 8009378:	08009582 	.word	0x08009582

0800937c <memmove>:
 800937c:	4288      	cmp	r0, r1
 800937e:	b510      	push	{r4, lr}
 8009380:	eb01 0402 	add.w	r4, r1, r2
 8009384:	d902      	bls.n	800938c <memmove+0x10>
 8009386:	4284      	cmp	r4, r0
 8009388:	4623      	mov	r3, r4
 800938a:	d807      	bhi.n	800939c <memmove+0x20>
 800938c:	1e43      	subs	r3, r0, #1
 800938e:	42a1      	cmp	r1, r4
 8009390:	d008      	beq.n	80093a4 <memmove+0x28>
 8009392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800939a:	e7f8      	b.n	800938e <memmove+0x12>
 800939c:	4402      	add	r2, r0
 800939e:	4601      	mov	r1, r0
 80093a0:	428a      	cmp	r2, r1
 80093a2:	d100      	bne.n	80093a6 <memmove+0x2a>
 80093a4:	bd10      	pop	{r4, pc}
 80093a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093ae:	e7f7      	b.n	80093a0 <memmove+0x24>

080093b0 <_realloc_r>:
 80093b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b4:	4680      	mov	r8, r0
 80093b6:	4614      	mov	r4, r2
 80093b8:	460e      	mov	r6, r1
 80093ba:	b921      	cbnz	r1, 80093c6 <_realloc_r+0x16>
 80093bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c0:	4611      	mov	r1, r2
 80093c2:	f7ff bb85 	b.w	8008ad0 <_malloc_r>
 80093c6:	b92a      	cbnz	r2, 80093d4 <_realloc_r+0x24>
 80093c8:	f7ff fc9c 	bl	8008d04 <_free_r>
 80093cc:	4625      	mov	r5, r4
 80093ce:	4628      	mov	r0, r5
 80093d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d4:	f000 f81b 	bl	800940e <_malloc_usable_size_r>
 80093d8:	4284      	cmp	r4, r0
 80093da:	4607      	mov	r7, r0
 80093dc:	d802      	bhi.n	80093e4 <_realloc_r+0x34>
 80093de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093e2:	d812      	bhi.n	800940a <_realloc_r+0x5a>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4640      	mov	r0, r8
 80093e8:	f7ff fb72 	bl	8008ad0 <_malloc_r>
 80093ec:	4605      	mov	r5, r0
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d0ed      	beq.n	80093ce <_realloc_r+0x1e>
 80093f2:	42bc      	cmp	r4, r7
 80093f4:	4622      	mov	r2, r4
 80093f6:	4631      	mov	r1, r6
 80093f8:	bf28      	it	cs
 80093fa:	463a      	movcs	r2, r7
 80093fc:	f7ff fb32 	bl	8008a64 <memcpy>
 8009400:	4631      	mov	r1, r6
 8009402:	4640      	mov	r0, r8
 8009404:	f7ff fc7e 	bl	8008d04 <_free_r>
 8009408:	e7e1      	b.n	80093ce <_realloc_r+0x1e>
 800940a:	4635      	mov	r5, r6
 800940c:	e7df      	b.n	80093ce <_realloc_r+0x1e>

0800940e <_malloc_usable_size_r>:
 800940e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009412:	1f18      	subs	r0, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	bfbc      	itt	lt
 8009418:	580b      	ldrlt	r3, [r1, r0]
 800941a:	18c0      	addlt	r0, r0, r3
 800941c:	4770      	bx	lr
	...

08009420 <_init>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr

0800942c <_fini>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr
