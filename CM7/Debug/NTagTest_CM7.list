
NTagTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa6c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800ad0c  0800ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aecc  0800aecc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aecc  0800aecc  0001aecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aed4  0800aed4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aed4  0800aed4  0001aed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aed8  0800aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800aedc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c48  24000078  0800af54  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004cc0  0800af54  00024cc0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d4a0  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d5  00000000  00000000  0004d546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e98  00000000  00000000  00051f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d00  00000000  00000000  00053db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042615  00000000  00000000  00055ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002845c  00000000  00000000  000980cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b4bca  00000000  00000000  000c0529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002750f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008824  00000000  00000000  00275144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800acf4 	.word	0x0800acf4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800acf4 	.word	0x0800acf4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <_ZN9NTagRC52213WriteRegisterEhh>:
#include "NTagRC522.h"
#include "cmsis_os.h"


//write 8 bits to the specified address
uint8_t NTagRC522::WriteRegister(uint8_t reg_addr, uint8_t write_data) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
 80007cc:	4613      	mov	r3, r2
 80007ce:	70bb      	strb	r3, [r7, #2]
	EnableCS();
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4798      	blx	r3
	uint8_t transmit[2];
	transmit[0] = reg_addr << 1;
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	733b      	strb	r3, [r7, #12]
	transmit[1] = write_data;
 80007de:	78bb      	ldrb	r3, [r7, #2]
 80007e0:	737b      	strb	r3, [r7, #13]

	uint8_t ret;
	ret = HAL_SPI_Transmit(SPIHandle, transmit, 2, HAL_MAX_DELAY);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	f107 010c 	add.w	r1, r7, #12
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	2202      	movs	r2, #2
 80007f0:	f004 feb2 	bl	8005558 <HAL_SPI_Transmit>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]
	//ret = HAL_I2C_Master_Transmit(I2CHandle, i2c_addr, &reg_addr, 1, HAL_MAX_DELAY);
	//if(ret != HAL_OK) panic
	DisableCS();
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4798      	blx	r3
	return ret;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <_ZN9NTagRC52213WriteRegisterEhhPh>:
//write multiple bytes to the specified address. Max of 255
uint8_t NTagRC522::WriteRegister(uint8_t reg_addr, uint8_t write_len, uint8_t *write_data) {
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b0c7      	sub	sp, #284	; 0x11c
 800080c:	af00      	add	r7, sp, #0
 800080e:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000812:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8000816:	6020      	str	r0, [r4, #0]
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000820:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800082a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800082e:	4602      	mov	r2, r0
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000836:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800083a:	460a      	mov	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
	uint8_t transmit[256];
	transmit[0] = reg_addr << 1;
 800083e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000842:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000854:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < write_len; i++)
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800085c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000860:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800086a:	429a      	cmp	r2, r3
 800086c:	da16      	bge.n	800089c <_ZN9NTagRC52213WriteRegisterEhhPh+0x94>
		transmit[i+1] = write_data[i];
 800086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000872:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000876:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	441a      	add	r2, r3
 800087e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000882:	3301      	adds	r3, #1
 8000884:	7811      	ldrb	r1, [r2, #0]
 8000886:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800088a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800088e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < write_len; i++)
 8000890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000894:	3301      	adds	r3, #1
 8000896:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800089a:	e7df      	b.n	800085c <_ZN9NTagRC52213WriteRegisterEhhPh+0x54>

	uint8_t ret;
	EnableCS();
 800089c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	4798      	blx	r3
	ret = HAL_SPI_Transmit(SPIHandle, transmit, write_len+1, HAL_MAX_DELAY);
 80008aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008ba:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3301      	adds	r3, #1
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	f107 0110 	add.w	r1, r7, #16
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	f004 fe43 	bl	8005558 <HAL_SPI_Transmit>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	//ret = HAL_I2C_Master_Transmit(I2CHandle, i2c_addr, &reg_addr, 1, HAL_MAX_DELAY);
	//if(ret != HAL_OK) panic
	DisableCS();
 80008d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	4798      	blx	r3
	return ret;
 80008e6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd90      	pop	{r4, r7, pc}

080008f4 <_ZN9NTagRC52215SetBitsRegisterEhh>:
	for(uint8_t i = 0; i < write_len; i++)
		WriteRegister(reg_addr, write_data[i]);
}*/

//Set bits in mask
uint8_t NTagRC522::SetBitsRegister(uint8_t reg_addr, uint8_t mask) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
 8000900:	4613      	mov	r3, r2
 8000902:	70bb      	strb	r3, [r7, #2]
	return WriteRegister(reg_addr, ReadRegister(reg_addr) | mask);
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	4619      	mov	r1, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f82f 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	78bb      	ldrb	r3, [r7, #2]
 8000914:	4313      	orrs	r3, r2
 8000916:	b2da      	uxtb	r2, r3
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	4619      	mov	r1, r3
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff4f 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
 8000922:	4603      	mov	r3, r0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <_ZN9NTagRC52217ClearBitsRegisterEhh>:
//Clear bits in mask (1s in mask are cleared)
uint8_t NTagRC522::ClearBitsRegister(uint8_t reg_addr, uint8_t mask) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
 8000938:	4613      	mov	r3, r2
 800093a:	70bb      	strb	r3, [r7, #2]
	return WriteRegister(reg_addr, ReadRegister(reg_addr) & (~mask));
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	4619      	mov	r1, r3
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 f813 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 8000946:	4603      	mov	r3, r0
 8000948:	b25a      	sxtb	r2, r3
 800094a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800094e:	43db      	mvns	r3, r3
 8000950:	b25b      	sxtb	r3, r3
 8000952:	4013      	ands	r3, r2
 8000954:	b25b      	sxtb	r3, r3
 8000956:	b2da      	uxtb	r2, r3
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	4619      	mov	r1, r3
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff2f 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
 8000962:	4603      	mov	r3, r0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_ZN9NTagRC52212ReadRegisterEh>:
//read 8 bits from the specified address
uint8_t NTagRC522::ReadRegister(uint8_t reg_addr) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af02      	add	r7, sp, #8
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
	EnableCS();
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4798      	blx	r3
	//Since my spi is full duplex, I need two bits for send/recv. One is dummy.
	uint8_t received[2];
	uint8_t transmit[2];
	transmit[0] = (reg_addr << 1) | 0x80; //set first bit to denote read
 800097e:	78fb      	ldrb	r3, [r7, #3]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	b25b      	sxtb	r3, r3
 8000984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000988:	b25b      	sxtb	r3, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	723b      	strb	r3, [r7, #8]
	transmit[1] = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	727b      	strb	r3, [r7, #9]

	uint8_t error;
	error = HAL_SPI_TransmitReceive(SPIHandle, transmit, received, 2, HAL_MAX_DELAY);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f107 020c 	add.w	r2, r7, #12
 800099a:	f107 0108 	add.w	r1, r7, #8
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2302      	movs	r3, #2
 80009a6:	f004 ffc9 	bl	800593c <HAL_SPI_TransmitReceive>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
	//if(error != HAL_OK) panic
	DisableCS();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	4798      	blx	r3
	return received[1];
 80009b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <_ZN9NTagRC52212ReadRegisterEhhPhh>:
//read multiple bytes from the specified address. Max of 255
uint8_t NTagRC522::ReadRegister(uint8_t reg_addr, uint8_t count, uint8_t *values, uint8_t rxAlign) {
 80009be:	b590      	push	{r4, r7, lr}
 80009c0:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	f507 7408 	add.w	r4, r7, #544	; 0x220
 80009ca:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 80009ce:	6020      	str	r0, [r4, #0]
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80009d8:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80009e2:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 80009e6:	4602      	mov	r2, r0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80009ee:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 80009f2:	460a      	mov	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
	if(count == 0)
 80009f6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80009fa:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d101      	bne.n	8000a08 <_ZN9NTagRC52212ReadRegisterEhhPhh+0x4a>
		return 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e0a5      	b.n	8000b54 <_ZN9NTagRC52212ReadRegisterEhhPhh+0x196>

	uint8_t received[256];
	uint8_t transmit[256];
	for(int i = 0; i < count; i++) {
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a0e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a12:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	da19      	bge.n	8000a54 <_ZN9NTagRC52212ReadRegisterEhhPhh+0x96>
		transmit[i] = (reg_addr << 1) | 0x80; //set first bit to denote read
 8000a20:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a24:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	b2d9      	uxtb	r1, r3
 8000a36:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a3a:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8000a3e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a42:	4413      	add	r3, r2
 8000a44:	460a      	mov	r2, r1
 8000a46:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < count; i++) {
 8000a48:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a52:	e7dc      	b.n	8000a0e <_ZN9NTagRC52212ReadRegisterEhhPhh+0x50>
	}
	transmit[count+1] = 0;
 8000a54:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a58:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000a64:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	54d1      	strb	r1, [r2, r3]

	EnableCS();
 8000a6c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a70:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4798      	blx	r3
	uint8_t error;
	error = HAL_SPI_TransmitReceive(SPIHandle, transmit, received, count+1, HAL_MAX_DELAY);
 8000a7a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a7e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000a8a:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000a9a:	f107 0114 	add.w	r1, r7, #20
 8000a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8000aa2:	9400      	str	r4, [sp, #0]
 8000aa4:	f004 ff4a 	bl	800593c <HAL_SPI_TransmitReceive>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	//if(error != HAL_OK) panic
	DisableCS();
 8000aae:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000ab2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	4798      	blx	r3


	for(int i = 1; i < count; i++)
 8000abc:	2301      	movs	r3, #1
 8000abe:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000ac2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000ac6:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	da16      	bge.n	8000b02 <_ZN9NTagRC52212ReadRegisterEhhPhh+0x144>
		values[i] = received[i+1];
 8000ad4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ad8:	1c5a      	adds	r2, r3, #1
 8000ada:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000ade:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8000ae2:	f5a1 7107 	sub.w	r1, r1, #540	; 0x21c
 8000ae6:	6809      	ldr	r1, [r1, #0]
 8000ae8:	440b      	add	r3, r1
 8000aea:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8000aee:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000af2:	5c8a      	ldrb	r2, [r1, r2]
 8000af4:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < count; i++)
 8000af6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000afa:	3301      	adds	r3, #1
 8000afc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000b00:	e7df      	b.n	8000ac2 <_ZN9NTagRC52212ReadRegisterEhhPhh+0x104>

	//rxAlign nonsense
	uint8_t mask = (0xFF << rxAlign) & 0xFF;
 8000b02:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8000b06:	22ff      	movs	r2, #255	; 0xff
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	values[0] = (values[0] & ~mask) | (received[1] & mask); //don't mess with masked out bits
 8000b10:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b14:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b25a      	sxtb	r2, r3
 8000b1e:	f997 3216 	ldrsb.w	r3, [r7, #534]	; 0x216
 8000b22:	43db      	mvns	r3, r3
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	4013      	ands	r3, r2
 8000b28:	b25a      	sxtb	r2, r3
 8000b2a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b32:	7859      	ldrb	r1, [r3, #1]
 8000b34:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8000b38:	400b      	ands	r3, r1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000b48:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	701a      	strb	r2, [r3, #0]

	return error;
 8000b50:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}

08000b5e <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h>:

uint8_t NTagRC522::CommunicateWithPICC(uint8_t command, uint8_t waitIRq, uint8_t *sendData, uint8_t sendLen, uint8_t *backData,
			uint8_t *backLen, uint8_t *validBits, uint8_t rxAlign = 0) {
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b08a      	sub	sp, #40	; 0x28
 8000b62:	af02      	add	r7, sp, #8
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	72fb      	strb	r3, [r7, #11]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	72bb      	strb	r3, [r7, #10]
	//prepare for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
 8000b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x1e>
 8000b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	e000      	b.n	8000b7e <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x20>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	76fb      	strb	r3, [r7, #27]
	uint8_t bitFraming = (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8000b80:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	7efb      	ldrb	r3, [r7, #27]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	76bb      	strb	r3, [r7, #26]

	WriteRegister(CommandReg, ComIdle);			// Stop any active command.
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2101      	movs	r1, #1
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff fe14 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 8000b98:	227f      	movs	r2, #127	; 0x7f
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff fe0f 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(FIFOLevelReg, 0x80);				// FlushBuffer = 1, FIFO initialization
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	210a      	movs	r1, #10
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fe0a 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 8000bac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2109      	movs	r1, #9
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff fe27 	bl	8000808 <_ZN9NTagRC52213WriteRegisterEhhPh>
	WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 8000bba:	7ebb      	ldrb	r3, [r7, #26]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	210d      	movs	r1, #13
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff fdfd 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(CommandReg, command);				// Execute the command
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2101      	movs	r1, #1
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f7ff fdf7 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	if (command == ComTransceive) {
 8000bd2:	7afb      	ldrb	r3, [r7, #11]
 8000bd4:	2b0c      	cmp	r3, #12
 8000bd6:	d104      	bne.n	8000be2 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x84>
		SetBitsRegister(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	210d      	movs	r1, #13
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff fe89 	bl	80008f4 <_ZN9NTagRC52215SetBitsRegisterEhh>
	}


	//wait for the command to be completed (timer starts -> IRq bit set)
	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
	uint32_t deadline = osKernelGetTickCount() + 36; //deadline in ms
 8000be2:	f006 fe29 	bl	8007838 <osKernelGetTickCount>
 8000be6:	4603      	mov	r3, r0
 8000be8:	3324      	adds	r3, #36	; 0x24
 8000bea:	61fb      	str	r3, [r7, #28]
	while(!(ReadRegister(ComIrqReg) & waitIRq)) {
 8000bec:	2104      	movs	r1, #4
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff febc 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	7abb      	ldrb	r3, [r7, #10]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf0c      	ite	eq
 8000c02:	2301      	moveq	r3, #1
 8000c04:	2300      	movne	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d012      	beq.n	8000c32 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0xd4>
		osDelay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f006 feba 	bl	8007986 <osDelay>
		deadline--;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
		if(osKernelGetTickCount() > deadline)
 8000c18:	f006 fe0e 	bl	8007838 <osKernelGetTickCount>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bf34      	ite	cc
 8000c24:	2301      	movcc	r3, #1
 8000c26:	2300      	movcs	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0de      	beq.n	8000bec <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x8e>
			//break;
			return STATUS_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e040      	b.n	8000cb4 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x156>
	}

	//check for errors
	uint8_t error = ReadRegister(ErrorReg) & 0x13;
 8000c32:	2106      	movs	r1, #6
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fe99 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f003 0313 	and.w	r3, r3, #19
 8000c40:	767b      	strb	r3, [r7, #25]
	if(error)
 8000c42:	7e7b      	ldrb	r3, [r7, #25]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0xee>
		return STATUS_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e033      	b.n	8000cb4 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x156>

	uint8_t _validBits = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	763b      	strb	r3, [r7, #24]

	//send back data if desired
	if(backData && backLen) {
 8000c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d026      	beq.n	8000ca4 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x146>
 8000c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d023      	beq.n	8000ca4 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x146>
		uint8_t n = ReadRegister(FIFOLevelReg); //get number of bytes
 8000c5c:	210a      	movs	r1, #10
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f7ff fe84 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 8000c64:	4603      	mov	r3, r0
 8000c66:	75fb      	strb	r3, [r7, #23]
		if(n > *backLen) //error if data is larger than back buffer
 8000c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	7dfa      	ldrb	r2, [r7, #23]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d901      	bls.n	8000c76 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x118>
			return STATUS_NO_ROOM;
 8000c72:	2304      	movs	r3, #4
 8000c74:	e01e      	b.n	8000cb4 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x156>

		ReadRegister(FIFODataReg, n, backData, rxAlign);
 8000c76:	7dfa      	ldrb	r2, [r7, #23]
 8000c78:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c80:	2109      	movs	r1, #9
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f7ff fe9b 	bl	80009be <_ZN9NTagRC52212ReadRegisterEhhPhh>
		_validBits = ReadRegister(ControlReg) & 0x07;
 8000c88:	210c      	movs	r1, #12
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff fe6e 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	763b      	strb	r3, [r7, #24]
		if(validBits)
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x146>
			*validBits = _validBits;
 8000c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca0:	7e3a      	ldrb	r2, [r7, #24]
 8000ca2:	701a      	strb	r2, [r3, #0]
	}

	//check if collision
	if(error & 0x08)
 8000ca4:	7e7b      	ldrb	r3, [r7, #25]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x154>
		return STATUS_COLLISION;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e000      	b.n	8000cb4 <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h+0x156>


	//CRC could be performed here.

	return STATUS_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_ZN9NTagRC52214TransceiveDataEPhhS0_S0_S0_h>:


uint8_t NTagRC522::TransceiveData(uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen,
			uint8_t *validBits, uint8_t rxAlign = 0) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af06      	add	r7, sp, #24
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	71fb      	strb	r3, [r7, #7]
	uint8_t waitIRq = 0x30; //RxIRq and IdleIRq
 8000ccc:	2330      	movs	r3, #48	; 0x30
 8000cce:	75fb      	strb	r3, [r7, #23]
	return CommunicateWithPICC(ComTransceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign);
 8000cd0:	7dfa      	ldrb	r2, [r7, #23]
 8000cd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cd6:	9304      	str	r3, [sp, #16]
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	9303      	str	r3, [sp, #12]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	9302      	str	r3, [sp, #8]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	210c      	movs	r1, #12
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f7ff ff36 	bl	8000b5e <_ZN9NTagRC52219CommunicateWithPICCEhhPhhS0_S0_S0_h>
 8000cf2:	4603      	mov	r3, r0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_ZN9NTagRC52212CalculateCRCEPhhS0_>:

uint8_t NTagRC522::CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result) {
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71fb      	strb	r3, [r7, #7]
	WriteRegister(CommandReg, ComIdle);		// Stop any active command.
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2101      	movs	r1, #1
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f7ff fd55 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(DivIrqReg, 0x04);				// Clear the CRCIRq interrupt request bit
 8000d16:	2204      	movs	r2, #4
 8000d18:	2105      	movs	r1, #5
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff fd50 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	210a      	movs	r1, #10
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f7ff fd4b 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(FIFODataReg, length, data);	// Write data to the FIFO
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2109      	movs	r1, #9
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	f7ff fd69 	bl	8000808 <_ZN9NTagRC52213WriteRegisterEhhPh>
	WriteRegister(CommandReg, ComCalcCRC);		// Start the calculation
 8000d36:	2203      	movs	r2, #3
 8000d38:	2101      	movs	r1, #1
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff fd40 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>

	// Wait for the CRC calculation to complete. Check for the register to
	// indicate that the CRC calculation is complete in a loop. If the
	// calculation is not indicated as complete in timeout, then time out
	// the operation.
	uint8_t timeout = osKernelGetTickCount() + 15; //might need to be adjusted
 8000d40:	f006 fd7a 	bl	8007838 <osKernelGetTickCount>
 8000d44:	4603      	mov	r3, r0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	330f      	adds	r3, #15
 8000d4a:	75fb      	strb	r3, [r7, #23]
	uint8_t n = 0xFF;
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	75bb      	strb	r3, [r7, #22]
	do {
		n = ReadRegister(DivIrqReg);
 8000d50:	2105      	movs	r1, #5
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff fe0a 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	75bb      	strb	r3, [r7, #22]
		if(n & 0x04) {	// CRCIRq bit set - calculation done
 8000d5c:	7dbb      	ldrb	r3, [r7, #22]
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d016      	beq.n	8000d94 <_ZN9NTagRC52212CalculateCRCEPhhS0_+0x98>
			WriteRegister(CommandReg, ComIdle); // Stop calculating CRC for new content in the FIFO.
 8000d66:	2200      	movs	r2, #0
 8000d68:	2101      	movs	r1, #1
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fd28 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
			// Transfer the result from the registers to the result buffer
			result[0] = ReadRegister(CRCResultRegL);
 8000d70:	2122      	movs	r1, #34	; 0x22
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fdfa 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	701a      	strb	r2, [r3, #0]
			result[1] = ReadRegister(CRCResultRegH);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	1c5c      	adds	r4, r3, #1
 8000d84:	2121      	movs	r1, #33	; 0x21
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f7ff fdf0 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	7023      	strb	r3, [r4, #0]
			return STATUS_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	e00f      	b.n	8000db4 <_ZN9NTagRC52212CalculateCRCEPhhS0_+0xb8>
		}
		timeout--;
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	75fb      	strb	r3, [r7, #23]

	} while(timeout > osKernelGetTickCount());
 8000d9a:	7dfc      	ldrb	r4, [r7, #23]
 8000d9c:	f006 fd4c 	bl	8007838 <osKernelGetTickCount>
 8000da0:	4603      	mov	r3, r0
 8000da2:	429c      	cmp	r4, r3
 8000da4:	bf8c      	ite	hi
 8000da6:	2301      	movhi	r3, #1
 8000da8:	2300      	movls	r3, #0
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d000      	beq.n	8000db2 <_ZN9NTagRC52212CalculateCRCEPhhS0_+0xb6>
	do {
 8000db0:	e7ce      	b.n	8000d50 <_ZN9NTagRC52212CalculateCRCEPhhS0_+0x54>

	return STATUS_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	371c      	adds	r7, #28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <_ZN9NTagRC522C1EP19__SPI_HandleTypeDefPFvvES3_>:


//end of private functions


NTagRC522::NTagRC522(SPI_HandleTypeDef *spi, void (*EnableCSFunc)(void), void (*DisableCSFunc)(void)) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	this->SetSPIHandle(spi);
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f000 f80b 	bl	8000de8 <_ZN9NTagRC52212SetSPIHandleEP19__SPI_HandleTypeDef>
	this->EnableCS = EnableCSFunc;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	605a      	str	r2, [r3, #4]
	this->DisableCS = DisableCSFunc;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	609a      	str	r2, [r3, #8]
}
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <_ZN9NTagRC52212SetSPIHandleEP19__SPI_HandleTypeDef>:
void NTagRC522::SetSPIHandle(SPI_HandleTypeDef *spi) {
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
	SPIHandle = spi;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	601a      	str	r2, [r3, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_ZN9NTagRC5224InitEv>:
//setup the dumb thing to operate. Run after any resetting.
void NTagRC522::Init() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	SoftReset();
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fa32 	bl	8001276 <_ZN9NTagRC5229SoftResetEv>

	//Reset baud rates
	WriteRegister(TxModeReg, 0x00);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2112      	movs	r1, #18
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fcd2 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(RxModeReg, 0x00);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2113      	movs	r1, #19
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff fccd 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	//Reset ModWidthReg
	WriteRegister(ModWidthReg, 0x26);
 8000e26:	2226      	movs	r2, #38	; 0x26
 8000e28:	2124      	movs	r1, #36	; 0x24
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fcc8 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>

	//Set a timeout
	//f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	//TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	212a      	movs	r1, #42	; 0x2a
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fcc3 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(TPrescalerReg, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
 8000e3a:	22a9      	movs	r2, #169	; 0xa9
 8000e3c:	212b      	movs	r1, #43	; 0x2b
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff fcbe 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie ~8ms before timeout.
 8000e44:	2203      	movs	r2, #3
 8000e46:	212c      	movs	r1, #44	; 0x2c
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fcb9 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(TReloadRegL, 0xE8);
 8000e4e:	22e8      	movs	r2, #232	; 0xe8
 8000e50:	212d      	movs	r1, #45	; 0x2d
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff fcb4 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>

	WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	2115      	movs	r1, #21
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff fcaf 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 8000e62:	223d      	movs	r2, #61	; 0x3d
 8000e64:	2111      	movs	r1, #17
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fcaa 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	EnableAntenna();					// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f804 	bl	8000e7a <_ZN9NTagRC52213EnableAntennaEv>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_ZN9NTagRC52213EnableAntennaEv>:
//Enable output signal on Tx1 and Tx2
uint8_t NTagRC522::EnableAntenna() {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	return SetBitsRegister(TxControlReg, 0x03);
 8000e82:	2203      	movs	r2, #3
 8000e84:	2114      	movs	r1, #20
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fd34 	bl	80008f4 <_ZN9NTagRC52215SetBitsRegisterEhh>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN9NTagRC52214SetAntennaGainEh>:
//Disable output signal on Tx1 and Tx2
uint8_t NTagRC522::DisableAntenna() {
	return ClearBitsRegister(TxControlReg, 0x03);
}
//set antenna gain
uint8_t NTagRC522::SetAntennaGain(uint8_t gain) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	70fb      	strb	r3, [r7, #3]
	ClearBitsRegister(RFCfgReg, (0x07<<4));
 8000ea2:	2270      	movs	r2, #112	; 0x70
 8000ea4:	2126      	movs	r1, #38	; 0x26
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fd40 	bl	800092c <_ZN9NTagRC52217ClearBitsRegisterEhh>
	return SetBitsRegister(RFCfgReg, gain & (0x07<<4));
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	2126      	movs	r1, #38	; 0x26
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fd1b 	bl	80008f4 <_ZN9NTagRC52215SetBitsRegisterEhh>
 8000ebe:	4603      	mov	r3, r0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZN9NTagRC5227WakeUpAEPhS0_>:

uint8_t NTagRC522::WakeUpA(uint8_t *AToReq, uint8_t *bufferSize) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	uint8_t validBits, error;
	//set to clear bits after a collision
	ClearBitsRegister(CollReg, 0x80);
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	210e      	movs	r1, #14
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff fd27 	bl	800092c <_ZN9NTagRC52217ClearBitsRegisterEhh>

	validBits = 7;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	75bb      	strb	r3, [r7, #22]

	uint8_t command = PICC_CMD_WUPA;
 8000ee2:	2352      	movs	r3, #82	; 0x52
 8000ee4:	757b      	strb	r3, [r7, #21]
	//uint8_t command = PICC_CMD_REQA;
	error = TransceiveData(&command, 1, AToReq, bufferSize, &validBits);
 8000ee6:	f107 0115 	add.w	r1, r7, #21
 8000eea:	2300      	movs	r3, #0
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	f107 0316 	add.w	r3, r7, #22
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2201      	movs	r2, #1
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f7ff fedd 	bl	8000cbc <_ZN9NTagRC52214TransceiveDataEPhhS0_S0_S0_h>
 8000f02:	4603      	mov	r3, r0
 8000f04:	75fb      	strb	r3, [r7, #23]
	//if(error)
		//__asm__("bkpt");

	return error;
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_ZN9NTagRC5225HaltAEv>:

uint8_t NTagRC522::HaltA() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	6078      	str	r0, [r7, #4]
	uint8_t result;
	uint8_t buffer[4];

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
 8000f18:	2350      	movs	r3, #80	; 0x50
 8000f1a:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	727b      	strb	r3, [r7, #9]
	// Calculate CRC_A
	result = CalculateCRC(buffer, 2, &buffer[2]);
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	3302      	adds	r3, #2
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff fee5 	bl	8000cfc <_ZN9NTagRC52212CalculateCRCEPhhS0_>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]
	if (result != STATUS_OK) {
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <_ZN9NTagRC5225HaltAEv+0x30>
		return result;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	e019      	b.n	8000f74 <_ZN9NTagRC5225HaltAEv+0x64>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	result = TransceiveData(buffer, sizeof(buffer), nullptr, nullptr, nullptr);
 8000f40:	f107 0108 	add.w	r1, r7, #8
 8000f44:	2300      	movs	r3, #0
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	2204      	movs	r2, #4
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff feb1 	bl	8000cbc <_ZN9NTagRC52214TransceiveDataEPhhS0_S0_S0_h>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
	if (result == STATUS_TIMEOUT) {
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d101      	bne.n	8000f68 <_ZN9NTagRC5225HaltAEv+0x58>
		return STATUS_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e005      	b.n	8000f74 <_ZN9NTagRC5225HaltAEv+0x64>
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <_ZN9NTagRC5225HaltAEv+0x62>
		return STATUS_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <_ZN9NTagRC5225HaltAEv+0x64>
	}
	return result;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh>:
	uid->size = 3 * cascadeLevel + 1;

	return STATUS_OK;
}

uint8_t NTagRC522::SelectPICCCas2(Uid *uid, uint8_t validBits, uint8_t *response) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b092      	sub	sp, #72	; 0x48
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71fb      	strb	r3, [r7, #7]
	bool uidComplete, selectDone, useCascadeTag;
	uint8_t cascadeLevel = 2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9

	// Sanity checks
	if (validBits > 80) {
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b50      	cmp	r3, #80	; 0x50
 8000f96:	d901      	bls.n	8000f9c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x20>
		return 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e13f      	b.n	800121c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x2a0>
	}

	buffer[0] = PICC_CMD_SEL_CL1;
 8000f9c:	2393      	movs	r3, #147	; 0x93
 8000f9e:	763b      	strb	r3, [r7, #24]
	buffer[1] = 0x20;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	767b      	strb	r3, [r7, #25]
	TransceiveData(buffer, 2, response, &responseLen, &validBits);
 8000fa4:	f107 0118 	add.w	r1, r7, #24
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f107 0317 	add.w	r3, r7, #23
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f7ff fe7e 	bl	8000cbc <_ZN9NTagRC52214TransceiveDataEPhhS0_S0_S0_h>
	uint8_t lastByte = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int i = 0; i < 4; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	dc0d      	bgt.n	8000fec <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x70>
		if(response[i] == 0) {
 8000fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d103      	bne.n	8000fe4 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x68>
			lastByte = i;
 8000fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 8000fe2:	e003      	b.n	8000fec <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x70>
	for(int i = 0; i < 4; i++)
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8000fea:	e7ee      	b.n	8000fca <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x4e>
		}

	//temporary. Deal with collisions later.
	if(lastByte != 4)
 8000fec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d001      	beq.n	8000ff8 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x7c>
		return responseLen;
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	e111      	b.n	800121c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x2a0>

	uid->uidByte[0] = response[1];
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	785a      	ldrb	r2, [r3, #1]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	705a      	strb	r2, [r3, #1]
	uid->uidByte[1] = response[2];
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	789a      	ldrb	r2, [r3, #2]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	709a      	strb	r2, [r3, #2]
	uid->uidByte[2] = response[3];
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	78da      	ldrb	r2, [r3, #3]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	70da      	strb	r2, [r3, #3]

	buffer[0] = PICC_CMD_SEL_CL1;
 8001010:	2393      	movs	r3, #147	; 0x93
 8001012:	763b      	strb	r3, [r7, #24]
	buffer[1] = 0x70; //all bytes ok
 8001014:	2370      	movs	r3, #112	; 0x70
 8001016:	767b      	strb	r3, [r7, #25]
	for(uint8_t i = 0; i < 5; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800101e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001022:	2b04      	cmp	r3, #4
 8001024:	d811      	bhi.n	800104a <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0xce>
		buffer[i+2] = response[i];
 8001026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	441a      	add	r2, r3
 800102e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001032:	3302      	adds	r3, #2
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	3338      	adds	r3, #56	; 0x38
 8001038:	443b      	add	r3, r7
 800103a:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(uint8_t i = 0; i < 5; i++)
 800103e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001042:	3301      	adds	r3, #1
 8001044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001048:	e7e9      	b.n	800101e <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0xa2>

	//clear response
	for(uint8_t i = 0; i < responseLen; i++)
 800104a:	2300      	movs	r3, #0
 800104c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001056:	429a      	cmp	r2, r3
 8001058:	d20b      	bcs.n	8001072 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0xf6>
		response[i] = 0;
 800105a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < responseLen; i++)
 8001066:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800106a:	3301      	adds	r3, #1
 800106c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001070:	e7ee      	b.n	8001050 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0xd4>

	CalculateCRC(buffer, 7, buffer+7);
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	3307      	adds	r3, #7
 8001078:	f107 0118 	add.w	r1, r7, #24
 800107c:	2207      	movs	r2, #7
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff fe3c 	bl	8000cfc <_ZN9NTagRC52212CalculateCRCEPhhS0_>


	uint8_t err = TransceiveData(buffer, 9, response, &responseLen, &validBits);
 8001084:	f107 0118 	add.w	r1, r7, #24
 8001088:	2300      	movs	r3, #0
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	f107 0317 	add.w	r3, r7, #23
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2209      	movs	r2, #9
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff fe0e 	bl	8000cbc <_ZN9NTagRC52214TransceiveDataEPhhS0_S0_S0_h>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(err != STATUS_OK)
 80010a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x138>
		return err;
 80010ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010b2:	e0b3      	b.n	800121c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x2a0>
	//check for NAK
	if(!response[0])
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x144>
		return STATUS_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0ad      	b.n	800121c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x2a0>

	//cascade level 2
	//clear response
	for(uint8_t i = 0; i < responseLen; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d20b      	bcs.n	80010e8 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x16c>
		response[i] = 0;
 80010d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < responseLen; i++)
 80010dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80010e0:	3301      	adds	r3, #1
 80010e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80010e6:	e7ee      	b.n	80010c6 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x14a>

	buffer[0] = PICC_CMD_SEL_CL2;
 80010e8:	2395      	movs	r3, #149	; 0x95
 80010ea:	763b      	strb	r3, [r7, #24]
	buffer[1] = 0x20;
 80010ec:	2320      	movs	r3, #32
 80010ee:	767b      	strb	r3, [r7, #25]

	TransceiveData(buffer, 2, response, &responseLen, &validBits);
 80010f0:	f107 0118 	add.w	r1, r7, #24
 80010f4:	2300      	movs	r3, #0
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f107 0317 	add.w	r3, r7, #23
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2202      	movs	r2, #2
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff fdd8 	bl	8000cbc <_ZN9NTagRC52214TransceiveDataEPhhS0_S0_S0_h>

	lastByte = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int i = 0; i < 4; i++)
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
 8001116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001118:	2b03      	cmp	r3, #3
 800111a:	dc0d      	bgt.n	8001138 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x1bc>
		if(response[i] == 0) {
 800111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x1b4>
			lastByte = i;
 8001128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 800112e:	e003      	b.n	8001138 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x1bc>
	for(int i = 0; i < 4; i++)
 8001130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001132:	3301      	adds	r3, #1
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
 8001136:	e7ee      	b.n	8001116 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x19a>
		}
	//temporary. Deal with collisions later.
	if(lastByte != 4)
 8001138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800113c:	2b04      	cmp	r3, #4
 800113e:	d001      	beq.n	8001144 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x1c8>
		return responseLen;
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	e06b      	b.n	800121c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x2a0>

	uid->uidByte[3] = response[0];
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	711a      	strb	r2, [r3, #4]
	uid->uidByte[4] = response[1];
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	785a      	ldrb	r2, [r3, #1]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	715a      	strb	r2, [r3, #5]
	uid->uidByte[5] = response[2];
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	789a      	ldrb	r2, [r3, #2]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	719a      	strb	r2, [r3, #6]
	uid->uidByte[6] = response[3];
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	78da      	ldrb	r2, [r3, #3]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	71da      	strb	r2, [r3, #7]

	buffer[0] = PICC_CMD_SEL_CL2;
 8001164:	2395      	movs	r3, #149	; 0x95
 8001166:	763b      	strb	r3, [r7, #24]
	buffer[1] = 0x70; //all bytes ok
 8001168:	2370      	movs	r3, #112	; 0x70
 800116a:	767b      	strb	r3, [r7, #25]
	for(uint8_t i = 0; i < 5; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001176:	2b04      	cmp	r3, #4
 8001178:	d811      	bhi.n	800119e <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x222>
		buffer[i+2] = response[i];
 800117a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	441a      	add	r2, r3
 8001182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001186:	3302      	adds	r3, #2
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	3338      	adds	r3, #56	; 0x38
 800118c:	443b      	add	r3, r7
 800118e:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(uint8_t i = 0; i < 5; i++)
 8001192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001196:	3301      	adds	r3, #1
 8001198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800119c:	e7e9      	b.n	8001172 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x1f6>

	//clear response
	for(uint8_t i = 0; i < responseLen; i++)
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d20b      	bcs.n	80011c6 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x24a>
		response[i] = 0;
 80011ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < responseLen; i++)
 80011ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011be:	3301      	adds	r3, #1
 80011c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011c4:	e7ee      	b.n	80011a4 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x228>

	CalculateCRC(buffer, 7, buffer+7);
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	3307      	adds	r3, #7
 80011cc:	f107 0118 	add.w	r1, r7, #24
 80011d0:	2207      	movs	r2, #7
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff fd92 	bl	8000cfc <_ZN9NTagRC52212CalculateCRCEPhhS0_>

	err = TransceiveData(buffer, 9, response, &responseLen, &validBits);
 80011d8:	f107 0118 	add.w	r1, r7, #24
 80011dc:	2300      	movs	r3, #0
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	f107 0317 	add.w	r3, r7, #23
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2209      	movs	r2, #9
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff fd64 	bl	8000cbc <_ZN9NTagRC52214TransceiveDataEPhhS0_S0_S0_h>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(err != STATUS_OK)
 80011fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x28c>
		return err;
 8001202:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001206:	e009      	b.n	800121c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x2a0>
	//check for SAK = 0
	if(response[0])
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x298>
		return STATUS_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e003      	b.n	800121c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh+0x2a0>


	// Set correct uid->size
	uid->size = 7;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2207      	movs	r2, #7
 8001218:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3738      	adds	r7, #56	; 0x38
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN9NTagRC52213IsCardPresentEv>:

bool NTagRC522::IsCardPresent() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	uint8_t AToReq[2];
	uint8_t bufferSize = sizeof(AToReq);
 800122c:	2302      	movs	r3, #2
 800122e:	72fb      	strb	r3, [r7, #11]

	// Reset baud rates
	WriteRegister(TxModeReg, 0x00);
 8001230:	2200      	movs	r2, #0
 8001232:	2112      	movs	r1, #18
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fac3 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	WriteRegister(RxModeReg, 0x00);
 800123a:	2200      	movs	r2, #0
 800123c:	2113      	movs	r1, #19
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fabe 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
	// Reset ModWidthReg
	WriteRegister(ModWidthReg, 0x26);
 8001244:	2226      	movs	r2, #38	; 0x26
 8001246:	2124      	movs	r1, #36	; 0x24
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fab9 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>

	uint8_t result = WakeUpA(AToReq,&bufferSize);
 800124e:	f107 020b 	add.w	r2, r7, #11
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	4619      	mov	r1, r3
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fe35 	bl	8000ec8 <_ZN9NTagRC5227WakeUpAEPhS0_>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
	return !(result);
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_ZN9NTagRC5229SoftResetEv>:

//perform soft reset
uint8_t NTagRC522::SoftReset() {
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
	uint8_t error = WriteRegister(CommandReg, ComSoftReset);
 800127e:	220f      	movs	r2, #15
 8001280:	2101      	movs	r1, #1
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fa9c 	bl	80007c0 <_ZN9NTagRC52213WriteRegisterEhh>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
	osDelay(10); //might need adjusting
 800128c:	200a      	movs	r0, #10
 800128e:	f006 fb7a 	bl	8007986 <osDelay>
	//wait for reset bit to be cleared
	while((ReadRegister(CommandReg) & (1 << 4)))
 8001292:	2101      	movs	r1, #1
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fb69 	bl	800096c <_ZN9NTagRC52212ReadRegisterEh>
 800129a:	4603      	mov	r3, r0
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <_ZN9NTagRC5229SoftResetEv+0x40>
		osDelay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f006 fb69 	bl	8007986 <osDelay>
	while((ReadRegister(CommandReg) & (1 << 4)))
 80012b4:	e7ed      	b.n	8001292 <_ZN9NTagRC5229SoftResetEv+0x1c>
	return error;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_ZN9NTagRC52210StopCryptoEv>:

	// Start the authentication.
	return CommunicateWithPICC(ComMFAuthent, waitIRq, &sendData[0], sizeof(sendData), nullptr, nullptr, nullptr);
}
//run after done communicating with a authenticated picc
uint8_t NTagRC522::StopCrypto() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	ClearBitsRegister(Status2Reg, 0x08);
 80012c8:	2208      	movs	r2, #8
 80012ca:	2108      	movs	r1, #8
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fb2d 	bl	800092c <_ZN9NTagRC52217ClearBitsRegisterEhh>
}
 80012d2:	bf00      	nop
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN9NTagRC52211MIFARE_ReadEhPhS0_>:


uint8_t NTagRC522::MIFARE_Read(uint8_t blockAddr, uint8_t *buffer, uint8_t *bufferSize) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af04      	add	r7, sp, #16
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	460b      	mov	r3, r1
 80012ea:	72fb      	strb	r3, [r7, #11]
	buffer[0] = PICC_CMD_MF_READ;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	701a      	strb	r2, [r3, #0]
	buffer[1] = blockAddr;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	7afa      	ldrb	r2, [r7, #11]
 80012f8:	701a      	strb	r2, [r3, #0]

	CalculateCRC(buffer, 2, buffer+2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3302      	adds	r3, #2
 80012fe:	2202      	movs	r2, #2
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff fcfa 	bl	8000cfc <_ZN9NTagRC52212CalculateCRCEPhhS0_>

	return TransceiveData(buffer, 4, buffer, bufferSize, nullptr, 0);
 8001308:	2300      	movs	r3, #0
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2300      	movs	r3, #0
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2204      	movs	r2, #4
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff fcce 	bl	8000cbc <_ZN9NTagRC52214TransceiveDataEPhhS0_S0_S0_h>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <_Z6vprintPKcSt9__va_list>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0b4      	sub	sp, #208	; 0xd0
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	f009 f934 	bl	800a5ac <vsiprintf>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	bfcc      	ite	gt
 800134a:	2301      	movgt	r3, #1
 800134c:	2300      	movle	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00c      	beq.n	800136e <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ffc1 	bl	80002e0 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f107 0108 	add.w	r1, r7, #8
 8001366:	230a      	movs	r3, #10
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <_Z6vprintPKcSt9__va_list+0x4c>)
 800136a:	f005 f921 	bl	80065b0 <HAL_UART_Transmit>
    }
}
 800136e:	bf00      	nop
 8001370:	37d0      	adds	r7, #208	; 0xd0
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	240001b4 	.word	0x240001b4

0800137c <_Z7vprintfPKcz>:

void vprintf(const char *fmt, ...) // custom printf() function
{
 800137c:	b40f      	push	{r0, r1, r2, r3}
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	6938      	ldr	r0, [r7, #16]
 800138e:	f7ff ffcd 	bl	800132c <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800139c:	b004      	add	sp, #16
 800139e:	4770      	bx	lr

080013a0 <_Z8EnableCSv>:

void EnableCS() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	//vprintf("Enabling CS\r\n");
	HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2101      	movs	r1, #1
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <_Z8EnableCSv+0x14>)
 80013aa:	f001 fa0f 	bl	80027cc <HAL_GPIO_WritePin>
	//osDelay(1);
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	58022400 	.word	0x58022400

080013b8 <_Z9DisableCSv>:
void DisableCS() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	//vprintf("Disabling CS\r\n");
	HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <_Z9DisableCSv+0x14>)
 80013c2:	f001 fa03 	bl	80027cc <HAL_GPIO_WritePin>
	//osDelay(1);
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	58022400 	.word	0x58022400

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80013d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013da:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <main+0xe0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <main+0x26>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1e5a      	subs	r2, r3, #1
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dd01      	ble.n	80013f6 <main+0x26>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <main+0x28>
 80013f6:	2300      	movs	r3, #0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d000      	beq.n	80013fe <main+0x2e>
 80013fc:	e7ee      	b.n	80013dc <main+0xc>
  if ( timeout < 0 )
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	da01      	bge.n	8001408 <main+0x38>
  {
  Error_Handler();
 8001404:	f000 fc2a 	bl	8001c5c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 fee8 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f85e 	bl	80014cc <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001410:	f000 f8fc 	bl	800160c <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <main+0xe0>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <main+0xe0>)
 800141c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <main+0xe0>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001432:	2000      	movs	r0, #0
 8001434:	f001 f9e4 	bl	8002800 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001438:	2100      	movs	r1, #0
 800143a:	2000      	movs	r0, #0
 800143c:	f001 f9fa 	bl	8002834 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001444:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <main+0xe0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <main+0x90>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd01      	ble.n	8001460 <main+0x90>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <main+0x92>
 8001460:	2300      	movs	r3, #0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d000      	beq.n	8001468 <main+0x98>
 8001466:	e7ee      	b.n	8001446 <main+0x76>
if ( timeout < 0 )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da01      	bge.n	8001472 <main+0xa2>
{
Error_Handler();
 800146e:	f000 fbf5 	bl	8001c5c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f000 fa55 	bl	8001920 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001476:	f000 f9f3 	bl	8001860 <_ZL19MX_USART1_UART_Initv>
  MX_I2C1_Init();
 800147a:	f000 f8f9 	bl	8001670 <_ZL12MX_I2C1_Initv>
  MX_I2C4_Init();
 800147e:	f000 f945 	bl	800170c <_ZL12MX_I2C4_Initv>
  MX_SPI5_Init();
 8001482:	f000 f991 	bl	80017a8 <_ZL12MX_SPI5_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001486:	f006 f98d 	bl	80077a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <main+0xe4>)
 800148c:	2100      	movs	r1, #0
 800148e:	480a      	ldr	r0, [pc, #40]	; (80014b8 <main+0xe8>)
 8001490:	f006 f9e7 	bl	8007862 <osThreadNew>
 8001494:	4603      	mov	r3, r0
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <main+0xec>)
 8001498:	6013      	str	r3, [r2, #0]

  /* creation of NTagTask */
  NTagTaskHandle = osThreadNew(StartNTagTask, NULL, &NTagTask_attributes);
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <main+0xf0>)
 800149c:	2100      	movs	r1, #0
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <main+0xf4>)
 80014a0:	f006 f9df 	bl	8007862 <osThreadNew>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <main+0xf8>)
 80014a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014aa:	f006 f99f 	bl	80077ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <main+0xde>
 80014b0:	58024400 	.word	0x58024400
 80014b4:	0800adc8 	.word	0x0800adc8
 80014b8:	08001a91 	.word	0x08001a91
 80014bc:	24000244 	.word	0x24000244
 80014c0:	0800adec 	.word	0x0800adec
 80014c4:	08001aa1 	.word	0x08001aa1
 80014c8:	24000248 	.word	0x24000248

080014cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b09c      	sub	sp, #112	; 0x70
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	224c      	movs	r2, #76	; 0x4c
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f008 ff3a 	bl	800a354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2220      	movs	r2, #32
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f008 ff34 	bl	800a354 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014ec:	2004      	movs	r0, #4
 80014ee:	f001 fadd 	bl	8002aac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b42      	ldr	r3, [pc, #264]	; (8001600 <_Z18SystemClock_Configv+0x134>)
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	4a41      	ldr	r2, [pc, #260]	; (8001600 <_Z18SystemClock_Configv+0x134>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <_Z18SystemClock_Configv+0x134>)
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <_Z18SystemClock_Configv+0x138>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a3c      	ldr	r2, [pc, #240]	; (8001604 <_Z18SystemClock_Configv+0x138>)
 8001512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <_Z18SystemClock_Configv+0x138>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <_Z18SystemClock_Configv+0x138>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d000      	beq.n	800153e <_Z18SystemClock_Configv+0x72>
 800153c:	e7f2      	b.n	8001524 <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <_Z18SystemClock_Configv+0x13c>)
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f023 0303 	bic.w	r3, r3, #3
 8001546:	4a30      	ldr	r2, [pc, #192]	; (8001608 <_Z18SystemClock_Configv+0x13c>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800154e:	230b      	movs	r3, #11
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001558:	2301      	movs	r3, #1
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155c:	2340      	movs	r3, #64	; 0x40
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001568:	2302      	movs	r3, #2
 800156a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001570:	2340      	movs	r3, #64	; 0x40
 8001572:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001574:	2302      	movs	r3, #2
 8001576:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8001578:	230d      	movs	r3, #13
 800157a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800157c:	2302      	movs	r3, #2
 800157e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001580:	230c      	movs	r3, #12
 8001582:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001584:	2300      	movs	r3, #0
 8001586:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4618      	mov	r0, r3
 8001592:	f001 fae5 	bl	8002b60 <HAL_RCC_OscConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80015a6:	f000 fb59 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015aa:	233f      	movs	r3, #63	; 0x3f
 80015ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ae:	2303      	movs	r3, #3
 80015b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015b6:	2308      	movs	r3, #8
 80015b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015ba:	2340      	movs	r3, #64	; 0x40
 80015bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015be:	2340      	movs	r3, #64	; 0x40
 80015c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2102      	movs	r1, #2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 fef3 	bl	80033bc <HAL_RCC_ClockConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <_Z18SystemClock_Configv+0x11e>
  {
    Error_Handler();
 80015e6:	f000 fb39 	bl	8001c5c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80015ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015ee:	2100      	movs	r1, #0
 80015f0:	2000      	movs	r0, #0
 80015f2:	f002 f899 	bl	8003728 <HAL_RCC_MCOConfig>
}
 80015f6:	bf00      	nop
 80015f8:	3770      	adds	r7, #112	; 0x70
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	58000400 	.word	0x58000400
 8001604:	58024800 	.word	0x58024800
 8001608:	58024400 	.word	0x58024400

0800160c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0b0      	sub	sp, #192	; 0xc0
 8001610:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	22c0      	movs	r2, #192	; 0xc0
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f008 fe9b 	bl	800a354 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800161e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001622:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001628:	230c      	movs	r3, #12
 800162a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800162c:	2301      	movs	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001634:	2302      	movs	r3, #2
 8001636:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001638:	23c0      	movs	r3, #192	; 0xc0
 800163a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800163c:	2320      	movs	r3, #32
 800163e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	4618      	mov	r0, r3
 800164e:	f002 faed 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 8001662:	f000 fafb 	bl	8001c5c <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	37c0      	adds	r7, #192	; 0xc0
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <_ZL12MX_I2C1_Initv+0x94>)
 8001678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <_ZL12MX_I2C1_Initv+0x98>)
 800167e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 8001688:	2201      	movs	r2, #1
 800168a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016aa:	4815      	ldr	r0, [pc, #84]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 80016ac:	f001 f8d6 	bl	800285c <HAL_I2C_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80016c0:	f000 facc 	bl	8001c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c4:	2100      	movs	r1, #0
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 80016c8:	f001 f958 	bl	800297c <HAL_I2CEx_ConfigAnalogFilter>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80016dc:	f000 fabe 	bl	8001c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <_ZL12MX_I2C1_Initv+0x90>)
 80016e4:	f001 f995 	bl	8002a12 <HAL_I2CEx_ConfigDigitalFilter>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf14      	ite	ne
 80016ee:	2301      	movne	r3, #1
 80016f0:	2300      	moveq	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80016f8:	f000 fab0 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	24000094 	.word	0x24000094
 8001704:	40005400 	.word	0x40005400
 8001708:	10c0ecff 	.word	0x10c0ecff

0800170c <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001712:	4a23      	ldr	r2, [pc, #140]	; (80017a0 <_ZL12MX_I2C4_Initv+0x94>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <_ZL12MX_I2C4_Initv+0x98>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001724:	2201      	movs	r2, #1
 8001726:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001748:	f001 f888 	bl	800285c <HAL_I2C_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf14      	ite	ne
 8001752:	2301      	movne	r3, #1
 8001754:	2300      	moveq	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 800175c:	f000 fa7e 	bl	8001c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	480e      	ldr	r0, [pc, #56]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001764:	f001 f90a 	bl	800297c <HAL_I2CEx_ConfigAnalogFilter>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8001778:	f000 fa70 	bl	8001c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800177c:	2100      	movs	r1, #0
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <_ZL12MX_I2C4_Initv+0x90>)
 8001780:	f001 f947 	bl	8002a12 <HAL_I2CEx_ConfigDigitalFilter>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8001794:	f000 fa62 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	240000e0 	.word	0x240000e0
 80017a0:	58001c00 	.word	0x58001c00
 80017a4:	10c0ecff 	.word	0x10c0ecff

080017a8 <_ZL12MX_SPI5_Initv>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017ae:	4a2b      	ldr	r2, [pc, #172]	; (800185c <_ZL12MX_SPI5_Initv+0xb4>)
 80017b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017c2:	2207      	movs	r2, #7
 80017c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 80017fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 8001804:	2200      	movs	r2, #0
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 800180a:	2200      	movs	r2, #0
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 8001810:	2200      	movs	r2, #0
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 800181c:	2200      	movs	r2, #0
 800181e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 8001822:	2200      	movs	r2, #0
 8001824:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 8001828:	2200      	movs	r2, #0
 800182a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 800182e:	2200      	movs	r2, #0
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 8001834:	2200      	movs	r2, #0
 8001836:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001838:	4807      	ldr	r0, [pc, #28]	; (8001858 <_ZL12MX_SPI5_Initv+0xb0>)
 800183a:	f003 fd87 	bl	800534c <HAL_SPI_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_ZL12MX_SPI5_Initv+0xaa>
  {
    Error_Handler();
 800184e:	f000 fa05 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2400012c 	.word	0x2400012c
 800185c:	40015000 	.word	0x40015000

08001860 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001866:	4a2d      	ldr	r2, [pc, #180]	; (800191c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a8:	481b      	ldr	r0, [pc, #108]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018aa:	f004 fe31 	bl	8006510 <HAL_UART_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80018be:	f000 f9cd 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4814      	ldr	r0, [pc, #80]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018c6:	f005 fe5f 	bl	8007588 <HAL_UARTEx_SetTxFifoThreshold>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80018da:	f000 f9bf 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018de:	2100      	movs	r1, #0
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018e2:	f005 fe8f 	bl	8007604 <HAL_UARTEx_SetRxFifoThreshold>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80018f6:	f000 f9b1 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018fa:	4807      	ldr	r0, [pc, #28]	; (8001918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018fc:	f005 fe0b 	bl	8007516 <HAL_UARTEx_DisableFifoMode>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001910:	f000 f9a4 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	240001b4 	.word	0x240001b4
 800191c:	40011000 	.word	0x40011000

08001920 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	; 0x30
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 8001938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193c:	4a50      	ldr	r2, [pc, #320]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001946:	4b4e      	ldr	r3, [pc, #312]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 8001956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195a:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001964:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001978:	4a41      	ldr	r2, [pc, #260]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001996:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a0:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019cc:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	4a2b      	ldr	r2, [pc, #172]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <_ZL12MX_GPIO_Initv+0x160>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	481d      	ldr	r0, [pc, #116]	; (8001a84 <_ZL12MX_GPIO_Initv+0x164>)
 8001a0e:	f000 fedd 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSTest_GPIO_Port, CSTest_Pin, GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2101      	movs	r1, #1
 8001a16:	481c      	ldr	r0, [pc, #112]	; (8001a88 <_ZL12MX_GPIO_Initv+0x168>)
 8001a18:	f000 fed8 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4814      	ldr	r0, [pc, #80]	; (8001a84 <_ZL12MX_GPIO_Initv+0x164>)
 8001a34:	f000 fd1a 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <_ZL12MX_GPIO_Initv+0x16c>)
 8001a56:	f000 fd09 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : CSTest_Pin */
  GPIO_InitStruct.Pin = CSTest_Pin;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a66:	2301      	movs	r3, #1
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSTest_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <_ZL12MX_GPIO_Initv+0x168>)
 8001a72:	f000 fcfb 	bl	800246c <HAL_GPIO_Init>

}
 8001a76:	bf00      	nop
 8001a78:	3730      	adds	r7, #48	; 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020c00 	.word	0x58020c00
 8001a88:	58022400 	.word	0x58022400
 8001a8c:	58020000 	.word	0x58020000

08001a90 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f005 ff74 	bl	8007986 <osDelay>
 8001a9e:	e7fb      	b.n	8001a98 <_Z16StartDefaultTaskPv+0x8>

08001aa0 <_Z13StartNTagTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNTagTask */
void StartNTagTask(void *argument)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b098      	sub	sp, #96	; 0x60
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartNTagTask */
	/* Infinite loop */
	NTagRC522 ntag = NTagRC522(&hspi5, EnableCS, DisableCS);
 8001aa8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001aac:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <_Z13StartNTagTaskPv+0x16c>)
 8001aae:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <_Z13StartNTagTaskPv+0x170>)
 8001ab0:	4958      	ldr	r1, [pc, #352]	; (8001c14 <_Z13StartNTagTaskPv+0x174>)
 8001ab2:	f7ff f983 	bl	8000dbc <_ZN9NTagRC522C1EP19__SPI_HandleTypeDefPFvvES3_>
	ntag.Init();
 8001ab6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f9a2 	bl	8000e04 <_ZN9NTagRC5224InitEv>
	ntag.SetAntennaGain(ntag.RxGain_max);
 8001ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ac4:	2170      	movs	r1, #112	; 0x70
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f9e5 	bl	8000e96 <_ZN9NTagRC52214SetAntennaGainEh>
	//ntag.SetSPIHandle(&hspi5);
	//MFRC522 ntag = MFRC522(&hspi5, EnableCS, DisableCS);
	//ntag.PCD_Init();
	//ntag.PCD_SetAntennaGain(ntag.RxGain_avg);

	vprintf("Start\r\n");
 8001acc:	4852      	ldr	r0, [pc, #328]	; (8001c18 <_Z13StartNTagTaskPv+0x178>)
 8001ace:	f7ff fc55 	bl	800137c <_Z7vprintfPKcz>
	osDelay(1000);
 8001ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad6:	f005 ff56 	bl	8007986 <osDelay>
	for(;;)
	{
		//uint8_t test = ntag.SanityCheck(0x28);
		//vprintf("Version: %d\r\n", test);
		uint8_t read_result, ret;
		uint8_t versreg = 0x37;
 8001ada:	2337      	movs	r3, #55	; 0x37
 8001adc:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		//osDelay(100);

		//ret = ntag.SetWaterLevel(0x01);
		//read_result = ntag.GetWaterLevel();
		//vprintf("WaterLevel 1: %d\r\n", read_result);
		ntag.HaltA();
 8001ae0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa13 	bl	8000f10 <_ZN9NTagRC5225HaltAEv>
		ntag.StopCrypto();
 8001aea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fbe6 	bl	80012c0 <_ZN9NTagRC52210StopCryptoEv>
		if(ntag.IsCardPresent())
 8001af4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fb93 	bl	8001224 <_ZN9NTagRC52213IsCardPresentEv>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d07b      	beq.n	8001bfc <_Z13StartNTagTaskPv+0x15c>
		{
			vprintf("PICC is present!\r\n");
 8001b04:	4845      	ldr	r0, [pc, #276]	; (8001c1c <_Z13StartNTagTaskPv+0x17c>)
 8001b06:	f7ff fc39 	bl	800137c <_Z7vprintfPKcz>
			NTagRC522::Uid uid;
			uint8_t response[50] = {};
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	222e      	movs	r2, #46	; 0x2e
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f008 fc1c 	bl	800a354 <memset>
			if(ntag.SelectPICCCas2(&uid, 0, response) == ntag.STATUS_OK) {
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b24:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f7ff fa27 	bl	8000f7c <_ZN9NTagRC52214SelectPICCCas2EPNS_3UidEhPh>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d061      	beq.n	8001c02 <_Z13StartNTagTaskPv+0x162>
				vprintf("PICC selected! UID:0x", uid.sak);
 8001b3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b42:	4619      	mov	r1, r3
 8001b44:	4836      	ldr	r0, [pc, #216]	; (8001c20 <_Z13StartNTagTaskPv+0x180>)
 8001b46:	f7ff fc19 	bl	800137c <_Z7vprintfPKcz>
				for(int i = 0; i < uid.size; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b4e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b52:	461a      	mov	r2, r3
 8001b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b56:	4293      	cmp	r3, r2
 8001b58:	da0c      	bge.n	8001b74 <_Z13StartNTagTaskPv+0xd4>
					vprintf("%.2X ", uid.uidByte[i]);
 8001b5a:	f107 0241 	add.w	r2, r7, #65	; 0x41
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	482f      	ldr	r0, [pc, #188]	; (8001c24 <_Z13StartNTagTaskPv+0x184>)
 8001b68:	f7ff fc08 	bl	800137c <_Z7vprintfPKcz>
				for(int i = 0; i < uid.size; i++)
 8001b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6e:	3301      	adds	r3, #1
 8001b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b72:	e7ec      	b.n	8001b4e <_Z13StartNTagTaskPv+0xae>
				vprintf("\r\n");
 8001b74:	482c      	ldr	r0, [pc, #176]	; (8001c28 <_Z13StartNTagTaskPv+0x188>)
 8001b76:	f7ff fc01 	bl	800137c <_Z7vprintfPKcz>

				uint8_t responseSize = 50;
 8001b7a:	2332      	movs	r3, #50	; 0x32
 8001b7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				uint8_t pageAddr = 0x04;
 8001b80:	2304      	movs	r3, #4
 8001b82:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
				uint8_t status = ntag.MIFARE_Read(pageAddr, response, &responseSize);
 8001b86:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8001b8a:	f107 020c 	add.w	r2, r7, #12
 8001b8e:	f897 1059 	ldrb.w	r1, [r7, #89]	; 0x59
 8001b92:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001b96:	f7ff fba1 	bl	80012dc <_ZN9NTagRC52211MIFARE_ReadEhPhS0_>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
				if(status == ntag.STATUS_OK) {
 8001ba0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d122      	bne.n	8001bee <_Z13StartNTagTaskPv+0x14e>
					vprintf("Data at block %.2X: ", pageAddr);
 8001ba8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001bac:	4619      	mov	r1, r3
 8001bae:	481f      	ldr	r0, [pc, #124]	; (8001c2c <_Z13StartNTagTaskPv+0x18c>)
 8001bb0:	f7ff fbe4 	bl	800137c <_Z7vprintfPKcz>
					for(uint8_t i = 0; i < responseSize; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bbe:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d20f      	bcs.n	8001be6 <_Z13StartNTagTaskPv+0x146>
						vprintf("%.2X ", response[i]);
 8001bc6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001bca:	3360      	adds	r3, #96	; 0x60
 8001bcc:	443b      	add	r3, r7
 8001bce:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4813      	ldr	r0, [pc, #76]	; (8001c24 <_Z13StartNTagTaskPv+0x184>)
 8001bd6:	f7ff fbd1 	bl	800137c <_Z7vprintfPKcz>
					for(uint8_t i = 0; i < responseSize; i++)
 8001bda:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001bde:	3301      	adds	r3, #1
 8001be0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001be4:	e7e9      	b.n	8001bba <_Z13StartNTagTaskPv+0x11a>
					vprintf("\r\n");
 8001be6:	4810      	ldr	r0, [pc, #64]	; (8001c28 <_Z13StartNTagTaskPv+0x188>)
 8001be8:	f7ff fbc8 	bl	800137c <_Z7vprintfPKcz>
 8001bec:	e009      	b.n	8001c02 <_Z13StartNTagTaskPv+0x162>
				}
				else
					vprintf("Read Error: %s\r\n", status);
 8001bee:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480e      	ldr	r0, [pc, #56]	; (8001c30 <_Z13StartNTagTaskPv+0x190>)
 8001bf6:	f7ff fbc1 	bl	800137c <_Z7vprintfPKcz>
 8001bfa:	e002      	b.n	8001c02 <_Z13StartNTagTaskPv+0x162>
				vprintf("BAD CRC\r\n");
			else
				vprintf("Other Error: %d\r\n", status);*/
		}
		else
			vprintf("No PICC...\r\n");
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <_Z13StartNTagTaskPv+0x194>)
 8001bfe:	f7ff fbbd 	bl	800137c <_Z7vprintfPKcz>
			vprintf("No PICC...\r\n");

		vprintf("Version: %d\r\n", ntag.PCD_ReadRegister(ntag.VersionReg));
		ntag.PCD_WriteRegister(ntag.WaterLevelReg, 0x00);*/

		osDelay(400);
 8001c02:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001c06:	f005 febe 	bl	8007986 <osDelay>


	}
 8001c0a:	e766      	b.n	8001ada <_Z13StartNTagTaskPv+0x3a>
 8001c0c:	080013b9 	.word	0x080013b9
 8001c10:	080013a1 	.word	0x080013a1
 8001c14:	2400012c 	.word	0x2400012c
 8001c18:	0800ad24 	.word	0x0800ad24
 8001c1c:	0800ad2c 	.word	0x0800ad2c
 8001c20:	0800ad40 	.word	0x0800ad40
 8001c24:	0800ad58 	.word	0x0800ad58
 8001c28:	0800ad60 	.word	0x0800ad60
 8001c2c:	0800ad64 	.word	0x0800ad64
 8001c30:	0800ad7c 	.word	0x0800ad7c
 8001c34:	0800ad90 	.word	0x0800ad90

08001c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c4a:	f000 fb03 	bl	8002254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40010000 	.word	0x40010000

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <Error_Handler+0x8>
	...

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_MspInit+0x38>)
 8001c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_MspInit+0x38>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_MspInit+0x38>)
 8001c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f06f 0001 	mvn.w	r0, #1
 8001c94:	f000 fbc2 	bl	800241c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	58024400 	.word	0x58024400

08001ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0bc      	sub	sp, #240	; 0xf0
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	22c0      	movs	r2, #192	; 0xc0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f008 fb45 	bl	800a354 <memset>
  if(hi2c->Instance==I2C1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a54      	ldr	r2, [pc, #336]	; (8001e20 <HAL_I2C_MspInit+0x17c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d158      	bne.n	8001d86 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 ffa2 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cee:	f7ff ffb5 	bl	8001c5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d02:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d16:	2312      	movs	r3, #18
 8001d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d32:	4619      	mov	r1, r3
 8001d34:	483c      	ldr	r0, [pc, #240]	; (8001e28 <HAL_I2C_MspInit+0x184>)
 8001d36:	f000 fb99 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d42:	2312      	movs	r3, #18
 8001d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d54:	2304      	movs	r3, #4
 8001d56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4831      	ldr	r0, [pc, #196]	; (8001e28 <HAL_I2C_MspInit+0x184>)
 8001d62:	f000 fb83 	bl	800246c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d6c:	4a2d      	ldr	r2, [pc, #180]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d84:	e047      	b.n	8001e16 <HAL_I2C_MspInit+0x172>
  else if(hi2c->Instance==I2C4)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <HAL_I2C_MspInit+0x188>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d142      	bne.n	8001e16 <HAL_I2C_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001d90:	2310      	movs	r3, #16
 8001d92:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 ff44 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8001daa:	f7ff ff57 	bl	8001c5c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001dcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd4:	2312      	movs	r3, #18
 8001dd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001de6:	2304      	movs	r3, #4
 8001de8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001df0:	4619      	mov	r1, r3
 8001df2:	480f      	ldr	r0, [pc, #60]	; (8001e30 <HAL_I2C_MspInit+0x18c>)
 8001df4:	f000 fb3a 	bl	800246c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_I2C_MspInit+0x180>)
 8001e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
}
 8001e16:	bf00      	nop
 8001e18:	37f0      	adds	r7, #240	; 0xf0
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40005400 	.word	0x40005400
 8001e24:	58024400 	.word	0x58024400
 8001e28:	58020400 	.word	0x58020400
 8001e2c:	58001c00 	.word	0x58001c00
 8001e30:	58020c00 	.word	0x58020c00

08001e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0ba      	sub	sp, #232	; 0xe8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	22c0      	movs	r2, #192	; 0xc0
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 fa7d 	bl	800a354 <memset>
  if(hspi->Instance==SPI5)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a37      	ldr	r2, [pc, #220]	; (8001f3c <HAL_SPI_MspInit+0x108>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d166      	bne.n	8001f32 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 feda 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001e7e:	f7ff feed 	bl	8001c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e82:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e88:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea6:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec4:	4a1e      	ldr	r2, [pc, #120]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_SPI_MspInit+0x10c>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
    PK0     ------> SPI5_SCK
    PK1     ------> SPI5_NSS
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8001edc:	2303      	movs	r3, #3
 8001ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001efa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4810      	ldr	r0, [pc, #64]	; (8001f44 <HAL_SPI_MspInit+0x110>)
 8001f02:	f000 fab3 	bl	800246c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001f06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f20:	2305      	movs	r3, #5
 8001f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4806      	ldr	r0, [pc, #24]	; (8001f48 <HAL_SPI_MspInit+0x114>)
 8001f2e:	f000 fa9d 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	37e8      	adds	r7, #232	; 0xe8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40015000 	.word	0x40015000
 8001f40:	58024400 	.word	0x58024400
 8001f44:	58022800 	.word	0x58022800
 8001f48:	58022400 	.word	0x58022400

08001f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0ba      	sub	sp, #232	; 0xe8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	22c0      	movs	r2, #192	; 0xc0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f008 f9f1 	bl	800a354 <memset>
  if(huart->Instance==USART1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a25      	ldr	r2, [pc, #148]	; (800200c <HAL_UART_MspInit+0xc0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d142      	bne.n	8002002 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 fe4e 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f96:	f7ff fe61 	bl	8001c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_UART_MspInit+0xc4>)
 8001f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_UART_MspInit+0xc4>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_UART_MspInit+0xc4>)
 8001fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_UART_MspInit+0xc4>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_UART_MspInit+0xc4>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_UART_MspInit+0xc4>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001fd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	; (8002014 <HAL_UART_MspInit+0xc8>)
 8001ffe:	f000 fa35 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	37e8      	adds	r7, #232	; 0xe8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40011000 	.word	0x40011000
 8002010:	58024400 	.word	0x58024400
 8002014:	58020000 	.word	0x58020000

08002018 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	d844      	bhi.n	80020b0 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8002026:	2200      	movs	r2, #0
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	2019      	movs	r0, #25
 800202c:	f000 f9f6 	bl	800241c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002030:	2019      	movs	r0, #25
 8002032:	f000 fa0d 	bl	8002450 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002036:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <HAL_InitTick+0xb0>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_InitTick+0xb4>)
 800203e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_InitTick+0xb4>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800204c:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <HAL_InitTick+0xb4>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800205a:	f107 020c 	add.w	r2, r7, #12
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f001 fd9f 	bl	8003ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800206a:	f001 fd87 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 800206e:	4603      	mov	r3, r0
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <HAL_InitTick+0xb8>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	0c9b      	lsrs	r3, r3, #18
 800207e:	3b01      	subs	r3, #1
 8002080:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_InitTick+0xbc>)
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_InitTick+0xc0>)
 8002086:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0xbc>)
 800208a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800208e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002090:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_InitTick+0xbc>)
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_InitTick+0xbc>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_InitTick+0xbc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80020a2:	480c      	ldr	r0, [pc, #48]	; (80020d4 <HAL_InitTick+0xbc>)
 80020a4:	f003 ff5b 	bl	8005f5e <HAL_TIM_Base_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d107      	bne.n	80020be <HAL_InitTick+0xa6>
 80020ae:	e001      	b.n	80020b4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e005      	b.n	80020c0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <HAL_InitTick+0xbc>)
 80020b6:	f003 ffb3 	bl	8006020 <HAL_TIM_Base_Start_IT>
 80020ba:	4603      	mov	r3, r0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3738      	adds	r7, #56	; 0x38
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	24000008 	.word	0x24000008
 80020cc:	58024400 	.word	0x58024400
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	2400024c 	.word	0x2400024c
 80020d8:	40010000 	.word	0x40010000

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <TIM1_UP_IRQHandler+0x10>)
 800210e:	f003 ffff 	bl	8006110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2400024c 	.word	0x2400024c

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f008 f8c8 	bl	800a2e0 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	24080000 	.word	0x24080000
 800217c:	00000400 	.word	0x00000400
 8002180:	24000298 	.word	0x24000298
 8002184:	24004cc0 	.word	0x24004cc0

08002188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800218c:	f7fe fa82 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002192:	490d      	ldr	r1, [pc, #52]	; (80021c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a8:	4c0a      	ldr	r4, [pc, #40]	; (80021d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b6:	f008 f899 	bl	800a2ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ba:	f7ff f909 	bl	80013d0 <main>
  bx  lr
 80021be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021c8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80021cc:	0800aedc 	.word	0x0800aedc
  ldr r2, =_sbss
 80021d0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80021d4:	24004cc0 	.word	0x24004cc0

080021d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC3_IRQHandler>
	...

080021dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e2:	2003      	movs	r0, #3
 80021e4:	f000 f90f 	bl	8002406 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021e8:	f001 fb08 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_Init+0x68>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	4913      	ldr	r1, [pc, #76]	; (8002248 <HAL_Init+0x6c>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_Init+0x68>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <HAL_Init+0x6c>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <HAL_Init+0x70>)
 800221e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_Init+0x74>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002226:	200f      	movs	r0, #15
 8002228:	f7ff fef6 	bl	8002018 <HAL_InitTick>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e002      	b.n	800223c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002236:	f7ff fd17 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58024400 	.word	0x58024400
 8002248:	0800adb8 	.word	0x0800adb8
 800224c:	24000004 	.word	0x24000004
 8002250:	24000000 	.word	0x24000000

08002254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x20>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x24>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_IncTick+0x24>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2400000c 	.word	0x2400000c
 8002278:	2400029c 	.word	0x2400029c

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	2400029c 	.word	0x2400029c

08002294 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetREVID+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0c1b      	lsrs	r3, r3, #16
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	5c001000 	.word	0x5c001000

080022ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <__NVIC_SetPriorityGrouping+0x40>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x40>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00
 80022f0:	05fa0000 	.word	0x05fa0000

080022f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_GetPriorityGrouping+0x18>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0307 	and.w	r3, r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0b      	blt.n	800233a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <__NVIC_EnableIRQ+0x38>)
 800232a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff4c 	bl	80022ac <__NVIC_SetPriorityGrouping>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800242a:	f7ff ff63 	bl	80022f4 <__NVIC_GetPriorityGrouping>
 800242e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f7ff ffb3 	bl	80023a0 <NVIC_EncodePriority>
 800243a:	4602      	mov	r2, r0
 800243c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff82 	bl	800234c <__NVIC_SetPriority>
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff56 	bl	8002310 <__NVIC_EnableIRQ>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800247a:	4b89      	ldr	r3, [pc, #548]	; (80026a0 <HAL_GPIO_Init+0x234>)
 800247c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800247e:	e194      	b.n	80027aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8186 	beq.w	80027a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d005      	beq.n	80024b0 <HAL_GPIO_Init+0x44>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d130      	bne.n	8002512 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e6:	2201      	movs	r2, #1
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 0201 	and.w	r2, r3, #1
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b03      	cmp	r3, #3
 800251c:	d017      	beq.n	800254e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d123      	bne.n	80025a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	69b9      	ldr	r1, [r7, #24]
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80e0 	beq.w	80027a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e4:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_GPIO_Init+0x238>)
 80025e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025ea:	4a2e      	ldr	r2, [pc, #184]	; (80026a4 <HAL_GPIO_Init+0x238>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_GPIO_Init+0x238>)
 80025f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002602:	4a29      	ldr	r2, [pc, #164]	; (80026a8 <HAL_GPIO_Init+0x23c>)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a20      	ldr	r2, [pc, #128]	; (80026ac <HAL_GPIO_Init+0x240>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d052      	beq.n	80026d4 <HAL_GPIO_Init+0x268>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_GPIO_Init+0x244>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d031      	beq.n	800269a <HAL_GPIO_Init+0x22e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_GPIO_Init+0x248>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02b      	beq.n	8002696 <HAL_GPIO_Init+0x22a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_GPIO_Init+0x24c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d025      	beq.n	8002692 <HAL_GPIO_Init+0x226>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_GPIO_Init+0x250>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01f      	beq.n	800268e <HAL_GPIO_Init+0x222>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <HAL_GPIO_Init+0x254>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d019      	beq.n	800268a <HAL_GPIO_Init+0x21e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_GPIO_Init+0x258>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0x21a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_GPIO_Init+0x25c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00d      	beq.n	8002682 <HAL_GPIO_Init+0x216>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a18      	ldr	r2, [pc, #96]	; (80026cc <HAL_GPIO_Init+0x260>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <HAL_GPIO_Init+0x212>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_GPIO_Init+0x264>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_GPIO_Init+0x20e>
 8002676:	2309      	movs	r3, #9
 8002678:	e02d      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 800267a:	230a      	movs	r3, #10
 800267c:	e02b      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 800267e:	2308      	movs	r3, #8
 8002680:	e029      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 8002682:	2307      	movs	r3, #7
 8002684:	e027      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 8002686:	2306      	movs	r3, #6
 8002688:	e025      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 800268a:	2305      	movs	r3, #5
 800268c:	e023      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 800268e:	2304      	movs	r3, #4
 8002690:	e021      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 8002692:	2303      	movs	r3, #3
 8002694:	e01f      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 8002696:	2302      	movs	r3, #2
 8002698:	e01d      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 800269a:	2301      	movs	r3, #1
 800269c:	e01b      	b.n	80026d6 <HAL_GPIO_Init+0x26a>
 800269e:	bf00      	nop
 80026a0:	58000080 	.word	0x58000080
 80026a4:	58024400 	.word	0x58024400
 80026a8:	58000400 	.word	0x58000400
 80026ac:	58020000 	.word	0x58020000
 80026b0:	58020400 	.word	0x58020400
 80026b4:	58020800 	.word	0x58020800
 80026b8:	58020c00 	.word	0x58020c00
 80026bc:	58021000 	.word	0x58021000
 80026c0:	58021400 	.word	0x58021400
 80026c4:	58021800 	.word	0x58021800
 80026c8:	58021c00 	.word	0x58021c00
 80026cc:	58022000 	.word	0x58022000
 80026d0:	58022400 	.word	0x58022400
 80026d4:	2300      	movs	r3, #0
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e6:	4938      	ldr	r1, [pc, #224]	; (80027c8 <HAL_GPIO_Init+0x35c>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800271a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f47f ae63 	bne.w	8002480 <HAL_GPIO_Init+0x14>
  }
}
 80027ba:	bf00      	nop
 80027bc:	bf00      	nop
 80027be:	3724      	adds	r7, #36	; 0x24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	58000400 	.word	0x58000400

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002808:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_HSEM_FastTake+0x2c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3320      	adds	r3, #32
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_HSEM_FastTake+0x30>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d101      	bne.n	800281c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	58026400 	.word	0x58026400
 8002830:	80000300 	.word	0x80000300

08002834 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800283e:	4906      	ldr	r1, [pc, #24]	; (8002858 <HAL_HSEM_Release+0x24>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	58026400 	.word	0x58026400

0800285c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07f      	b.n	800296e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fa0e 	bl	8001ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2224      	movs	r2, #36	; 0x24
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e006      	b.n	80028e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d104      	bne.n	80028f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_I2C_Init+0x11c>)
 8002902:	430b      	orrs	r3, r1
 8002904:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002914:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69d9      	ldr	r1, [r3, #28]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1a      	ldr	r2, [r3, #32]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	02008000 	.word	0x02008000

0800297c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	d138      	bne.n	8002a04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800299c:	2302      	movs	r3, #2
 800299e:	e032      	b.n	8002a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e000      	b.n	8002a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d139      	bne.n	8002a9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e033      	b.n	8002a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2224      	movs	r2, #36	; 0x24
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ab4:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d00a      	beq.n	8002ad6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e040      	b.n	8002b54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e03e      	b.n	8002b54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ad6:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002ade:	491f      	ldr	r1, [pc, #124]	; (8002b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ae6:	f7ff fbc9 	bl	800227c <HAL_GetTick>
 8002aea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aec:	e009      	b.n	8002b02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002aee:	f7ff fbc5 	bl	800227c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002afc:	d901      	bls.n	8002b02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e028      	b.n	8002b54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0e:	d1ee      	bne.n	8002aee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b1e      	cmp	r3, #30
 8002b14:	d008      	beq.n	8002b28 <HAL_PWREx_ConfigSupply+0x7c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b2e      	cmp	r3, #46	; 0x2e
 8002b1a:	d005      	beq.n	8002b28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b1d      	cmp	r3, #29
 8002b20:	d002      	beq.n	8002b28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b2d      	cmp	r3, #45	; 0x2d
 8002b26:	d114      	bne.n	8002b52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002b28:	f7ff fba8 	bl	800227c <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b2e:	e009      	b.n	8002b44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b30:	f7ff fba4 	bl	800227c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3e:	d901      	bls.n	8002b44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e007      	b.n	8002b54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d1ee      	bne.n	8002b30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	58024800 	.word	0x58024800

08002b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f000 bc1d 	b.w	80033ae <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8087 	beq.w	8002c90 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b8c:	4b96      	ldr	r3, [pc, #600]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d007      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x48>
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	2b18      	cmp	r3, #24
 8002b9c:	d110      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x60>
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b8f      	ldr	r3, [pc, #572]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d06c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x12e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d168      	bne.n	8002c8e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e3f6      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x78>
 8002bca:	4b87      	ldr	r3, [pc, #540]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a86      	ldr	r2, [pc, #536]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e02e      	b.n	8002c36 <HAL_RCC_OscConfig+0xd6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10c      	bne.n	8002bfa <HAL_RCC_OscConfig+0x9a>
 8002be0:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b7e      	ldr	r3, [pc, #504]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7d      	ldr	r2, [pc, #500]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e01d      	b.n	8002c36 <HAL_RCC_OscConfig+0xd6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCC_OscConfig+0xbe>
 8002c04:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a74      	ldr	r2, [pc, #464]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCC_OscConfig+0xd6>
 8002c1e:	4b72      	ldr	r3, [pc, #456]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a71      	ldr	r2, [pc, #452]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d013      	beq.n	8002c66 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7ff fb1d 	bl	800227c <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c46:	f7ff fb19 	bl	800227c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e3aa      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c58:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0xe6>
 8002c64:	e014      	b.n	8002c90 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff fb09 	bl	800227c <HAL_GetTick>
 8002c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6e:	f7ff fb05 	bl	800227c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e396      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x10e>
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80cb 	beq.w	8002e34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b52      	ldr	r3, [pc, #328]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x164>
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	2b18      	cmp	r3, #24
 8002cb8:	d156      	bne.n	8002d68 <HAL_RCC_OscConfig+0x208>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d151      	bne.n	8002d68 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc4:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x17c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e368      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cdc:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 0219 	bic.w	r2, r3, #25
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	493f      	ldr	r1, [pc, #252]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cee:	f7ff fac5 	bl	800227c <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7ff fac1 	bl	800227c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e352      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d08:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	f7ff fabe 	bl	8002294 <HAL_GetREVID>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d817      	bhi.n	8002d52 <HAL_RCC_OscConfig+0x1f2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b40      	cmp	r3, #64	; 0x40
 8002d28:	d108      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1dc>
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d32:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3a:	e07b      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	4927      	ldr	r1, [pc, #156]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d50:	e070      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	061b      	lsls	r3, r3, #24
 8002d60:	4921      	ldr	r1, [pc, #132]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d66:	e065      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d048      	beq.n	8002e02 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 0219 	bic.w	r2, r3, #25
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	491a      	ldr	r1, [pc, #104]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7ff fa7b 	bl	800227c <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7ff fa77 	bl	800227c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e308      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	f7ff fa74 	bl	8002294 <HAL_GetREVID>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f241 0203 	movw	r2, #4099	; 0x1003
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d81a      	bhi.n	8002dec <HAL_RCC_OscConfig+0x28c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d108      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x270>
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dcc:	6053      	str	r3, [r2, #4]
 8002dce:	e031      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	031b      	lsls	r3, r3, #12
 8002dde:	4902      	ldr	r1, [pc, #8]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	e026      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400
 8002dec:	4b9a      	ldr	r3, [pc, #616]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	4997      	ldr	r1, [pc, #604]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
 8002e00:	e018      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e02:	4b95      	ldr	r3, [pc, #596]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a94      	ldr	r2, [pc, #592]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7ff fa35 	bl	800227c <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e16:	f7ff fa31 	bl	800227c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e2c2      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e28:	4b8b      	ldr	r3, [pc, #556]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80a9 	beq.w	8002f94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e42:	4b85      	ldr	r3, [pc, #532]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4c:	4b82      	ldr	r3, [pc, #520]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d007      	beq.n	8002e68 <HAL_RCC_OscConfig+0x308>
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b18      	cmp	r3, #24
 8002e5c:	d13a      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x374>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d135      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e68:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_OscConfig+0x320>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b80      	cmp	r3, #128	; 0x80
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e296      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e80:	f7ff fa08 	bl	8002294 <HAL_GetREVID>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d817      	bhi.n	8002ebe <HAL_RCC_OscConfig+0x35e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x348>
 8002e96:	4b70      	ldr	r3, [pc, #448]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e9e:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ea4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ea6:	e075      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	069b      	lsls	r3, r3, #26
 8002eb6:	4968      	ldr	r1, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ebc:	e06a      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebe:	4b66      	ldr	r3, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	4962      	ldr	r1, [pc, #392]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ed2:	e05f      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d042      	beq.n	8002f62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002edc:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7ff f9c8 	bl	800227c <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f9c4 	bl	800227c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e255      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f02:	4b55      	ldr	r3, [pc, #340]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f0e:	f7ff f9c1 	bl	8002294 <HAL_GetREVID>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d817      	bhi.n	8002f4c <HAL_RCC_OscConfig+0x3ec>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d108      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3d6>
 8002f24:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f2c:	4a4a      	ldr	r2, [pc, #296]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f32:	6053      	str	r3, [r2, #4]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
 8002f36:	4b48      	ldr	r3, [pc, #288]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	069b      	lsls	r3, r3, #26
 8002f44:	4944      	ldr	r1, [pc, #272]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
 8002f4a:	e023      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
 8002f4c:	4b42      	ldr	r3, [pc, #264]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	493f      	ldr	r1, [pc, #252]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60cb      	str	r3, [r1, #12]
 8002f60:	e018      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7ff f985 	bl	800227c <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f76:	f7ff f981 	bl	800227c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e212      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f88:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d036      	beq.n	800300e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d019      	beq.n	8002fdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7ff f962 	bl	800227c <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7ff f95e 	bl	800227c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e1ef      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x45c>
 8002fda:	e018      	b.n	800300e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7ff f948 	bl	800227c <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7ff f944 	bl	800227c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1d5      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8003004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d039      	beq.n	800308e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01c      	beq.n	800305c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8003028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800302c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800302e:	f7ff f925 	bl	800227c <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003036:	f7ff f921 	bl	800227c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1b2      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x4d6>
 8003054:	e01b      	b.n	800308e <HAL_RCC_OscConfig+0x52e>
 8003056:	bf00      	nop
 8003058:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800305c:	4b9b      	ldr	r3, [pc, #620]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a9a      	ldr	r2, [pc, #616]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003066:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003068:	f7ff f908 	bl	800227c <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003070:	f7ff f904 	bl	800227c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e195      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003082:	4b92      	ldr	r3, [pc, #584]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8081 	beq.w	800319e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800309c:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCC_OscConfig+0x770>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a8b      	ldr	r2, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x770>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a8:	f7ff f8e8 	bl	800227c <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030b0:	f7ff f8e4 	bl	800227c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e175      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c2:	4b83      	ldr	r3, [pc, #524]	; (80032d0 <HAL_RCC_OscConfig+0x770>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x584>
 80030d6:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	4a7c      	ldr	r2, [pc, #496]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6713      	str	r3, [r2, #112]	; 0x70
 80030e2:	e02d      	b.n	8003140 <HAL_RCC_OscConfig+0x5e0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10c      	bne.n	8003106 <HAL_RCC_OscConfig+0x5a6>
 80030ec:	4b77      	ldr	r3, [pc, #476]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a76      	ldr	r2, [pc, #472]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
 80030f8:	4b74      	ldr	r3, [pc, #464]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a73      	ldr	r2, [pc, #460]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x5e0>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c8>
 800310e:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a6b      	ldr	r2, [pc, #428]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x5e0>
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a67      	ldr	r2, [pc, #412]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	4b65      	ldr	r3, [pc, #404]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a64      	ldr	r2, [pc, #400]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7ff f898 	bl	800227c <HAL_GetTick>
 800314c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7ff f894 	bl	800227c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e123      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003166:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCC_OscConfig+0x5f0>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7ff f882 	bl	800227c <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7ff f87e 	bl	800227c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e10d      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003192:	4b4e      	ldr	r3, [pc, #312]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ee      	bne.n	800317c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8102 	beq.w	80033ac <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031a8:	4b48      	ldr	r3, [pc, #288]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b0:	2b18      	cmp	r3, #24
 80031b2:	f000 80bd 	beq.w	8003330 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	f040 809e 	bne.w	80032fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b42      	ldr	r3, [pc, #264]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a41      	ldr	r2, [pc, #260]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7ff f856 	bl	800227c <HAL_GetTick>
 80031d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d4:	f7ff f852 	bl	800227c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0e3      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_OscConfig+0x774>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	430a      	orrs	r2, r1
 8003206:	4931      	ldr	r1, [pc, #196]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003208:	4313      	orrs	r3, r2
 800320a:	628b      	str	r3, [r1, #40]	; 0x28
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	3b01      	subs	r3, #1
 8003212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	3b01      	subs	r3, #1
 800321c:	025b      	lsls	r3, r3, #9
 800321e:	b29b      	uxth	r3, r3
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	3b01      	subs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	3b01      	subs	r3, #1
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800323c:	4923      	ldr	r1, [pc, #140]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	4a21      	ldr	r2, [pc, #132]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800324e:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_RCC_OscConfig+0x778>)
 8003254:	4013      	ands	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800325a:	00d2      	lsls	r2, r2, #3
 800325c:	491b      	ldr	r1, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	f023 020c 	bic.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003270:	4313      	orrs	r3, r2
 8003272:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003274:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f023 0202 	bic.w	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	4912      	ldr	r1, [pc, #72]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	4a10      	ldr	r2, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a04      	ldr	r2, [pc, #16]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fe ffdb 	bl	800227c <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c8:	e011      	b.n	80032ee <HAL_RCC_OscConfig+0x78e>
 80032ca:	bf00      	nop
 80032cc:	58024400 	.word	0x58024400
 80032d0:	58024800 	.word	0x58024800
 80032d4:	fffffc0c 	.word	0xfffffc0c
 80032d8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe ffce 	bl	800227c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e05f      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ee:	4b32      	ldr	r3, [pc, #200]	; (80033b8 <HAL_RCC_OscConfig+0x858>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x77c>
 80032fa:	e057      	b.n	80033ac <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCC_OscConfig+0x858>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <HAL_RCC_OscConfig+0x858>)
 8003302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe ffb8 	bl	800227c <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe ffb4 	bl	800227c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e045      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003322:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_OscConfig+0x858>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x7b0>
 800332e:	e03d      	b.n	80033ac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_RCC_OscConfig+0x858>)
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCC_OscConfig+0x858>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b01      	cmp	r3, #1
 8003342:	d031      	beq.n	80033a8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d12a      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d122      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d11a      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	0a5b      	lsrs	r3, r3, #9
 8003376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d111      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d108      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	0e1b      	lsrs	r3, r3, #24
 800339a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3730      	adds	r7, #48	; 0x30
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	58024400 	.word	0x58024400

080033bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e19c      	b.n	800370a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b8a      	ldr	r3, [pc, #552]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b87      	ldr	r3, [pc, #540]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	4985      	ldr	r1, [pc, #532]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b83      	ldr	r3, [pc, #524]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e184      	b.n	800370a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	4b7b      	ldr	r3, [pc, #492]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003418:	429a      	cmp	r2, r3
 800341a:	d908      	bls.n	800342e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	4975      	ldr	r1, [pc, #468]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800342a:	4313      	orrs	r3, r2
 800342c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d010      	beq.n	800345c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	4b70      	ldr	r3, [pc, #448]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003446:	429a      	cmp	r2, r3
 8003448:	d908      	bls.n	800345c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800344a:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	496a      	ldr	r1, [pc, #424]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003458:	4313      	orrs	r3, r2
 800345a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	4b64      	ldr	r3, [pc, #400]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003474:	429a      	cmp	r2, r3
 8003476:	d908      	bls.n	800348a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003478:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	495e      	ldr	r1, [pc, #376]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003486:	4313      	orrs	r3, r2
 8003488:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d908      	bls.n	80034b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034a6:	4b56      	ldr	r3, [pc, #344]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4953      	ldr	r1, [pc, #332]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d908      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f023 020f 	bic.w	r2, r3, #15
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4947      	ldr	r1, [pc, #284]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d055      	beq.n	800359e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034f2:	4b43      	ldr	r3, [pc, #268]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4940      	ldr	r1, [pc, #256]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003500:	4313      	orrs	r3, r2
 8003502:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d107      	bne.n	800351c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800350c:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d121      	bne.n	800355c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0f6      	b.n	800370a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d107      	bne.n	8003534 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003524:	4b36      	ldr	r3, [pc, #216]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d115      	bne.n	800355c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0ea      	b.n	800370a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d107      	bne.n	800354c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800353c:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d109      	bne.n	800355c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0de      	b.n	800370a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800354c:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0d6      	b.n	800370a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f023 0207 	bic.w	r2, r3, #7
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4925      	ldr	r1, [pc, #148]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800356a:	4313      	orrs	r3, r2
 800356c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe fe85 	bl	800227c <HAL_GetTick>
 8003572:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003574:	e00a      	b.n	800358c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003576:	f7fe fe81 	bl	800227c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0be      	b.n	800370a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358c:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	429a      	cmp	r2, r3
 800359c:	d1eb      	bne.n	8003576 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d208      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f023 020f 	bic.w	r2, r3, #15
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	490e      	ldr	r1, [pc, #56]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d214      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	4906      	ldr	r1, [pc, #24]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e086      	b.n	800370a <HAL_RCC_ClockConfig+0x34e>
 80035fc:	52002000 	.word	0x52002000
 8003600:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	4b3f      	ldr	r3, [pc, #252]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800361c:	429a      	cmp	r2, r3
 800361e:	d208      	bcs.n	8003632 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003620:	4b3c      	ldr	r3, [pc, #240]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	4939      	ldr	r1, [pc, #228]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 800362e:	4313      	orrs	r3, r2
 8003630:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d010      	beq.n	8003660 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	4b34      	ldr	r3, [pc, #208]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800364a:	429a      	cmp	r2, r3
 800364c:	d208      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	492e      	ldr	r1, [pc, #184]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 800365c:	4313      	orrs	r3, r2
 800365e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003678:	429a      	cmp	r2, r3
 800367a:	d208      	bcs.n	800368e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	4922      	ldr	r1, [pc, #136]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 800368a:	4313      	orrs	r3, r2
 800368c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d208      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4917      	ldr	r1, [pc, #92]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036bc:	f000 f89e 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	4912      	ldr	r1, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x35c>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_RCC_ClockConfig+0x358>)
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <HAL_RCC_ClockConfig+0x35c>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x360>)
 80036f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036f4:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <HAL_RCC_ClockConfig+0x364>)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_RCC_ClockConfig+0x368>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fc8a 	bl	8002018 <HAL_InitTick>
 8003704:	4603      	mov	r3, r0
 8003706:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	58024400 	.word	0x58024400
 8003718:	0800adb8 	.word	0x0800adb8
 800371c:	24000004 	.word	0x24000004
 8003720:	24000000 	.word	0x24000000
 8003724:	24000008 	.word	0x24000008

08003728 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	; 0x30
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d12a      	bne.n	8003790 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800373a:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 800373c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003740:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800374a:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 800374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003762:	2303      	movs	r3, #3
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800376a:	2300      	movs	r3, #0
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800376e:	f107 031c 	add.w	r3, r7, #28
 8003772:	4619      	mov	r1, r3
 8003774:	481f      	ldr	r0, [pc, #124]	; (80037f4 <HAL_RCC_MCOConfig+0xcc>)
 8003776:	f7fe fe79 	bl	800246c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	430b      	orrs	r3, r1
 8003788:	4919      	ldr	r1, [pc, #100]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800378e:	e02a      	b.n	80037e6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003790:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 8003792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 80037a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80037ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	4619      	mov	r1, r3
 80037ca:	480b      	ldr	r0, [pc, #44]	; (80037f8 <HAL_RCC_MCOConfig+0xd0>)
 80037cc:	f7fe fe4e 	bl	800246c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	01d9      	lsls	r1, r3, #7
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	430b      	orrs	r3, r1
 80037e0:	4903      	ldr	r1, [pc, #12]	; (80037f0 <HAL_RCC_MCOConfig+0xc8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	610b      	str	r3, [r1, #16]
}
 80037e6:	bf00      	nop
 80037e8:	3730      	adds	r7, #48	; 0x30
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	58024400 	.word	0x58024400
 80037f4:	58020000 	.word	0x58020000
 80037f8:	58020800 	.word	0x58020800

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003802:	4bb3      	ldr	r3, [pc, #716]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800380a:	2b18      	cmp	r3, #24
 800380c:	f200 8155 	bhi.w	8003aba <HAL_RCC_GetSysClockFreq+0x2be>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800387d 	.word	0x0800387d
 800381c:	08003abb 	.word	0x08003abb
 8003820:	08003abb 	.word	0x08003abb
 8003824:	08003abb 	.word	0x08003abb
 8003828:	08003abb 	.word	0x08003abb
 800382c:	08003abb 	.word	0x08003abb
 8003830:	08003abb 	.word	0x08003abb
 8003834:	08003abb 	.word	0x08003abb
 8003838:	080038a3 	.word	0x080038a3
 800383c:	08003abb 	.word	0x08003abb
 8003840:	08003abb 	.word	0x08003abb
 8003844:	08003abb 	.word	0x08003abb
 8003848:	08003abb 	.word	0x08003abb
 800384c:	08003abb 	.word	0x08003abb
 8003850:	08003abb 	.word	0x08003abb
 8003854:	08003abb 	.word	0x08003abb
 8003858:	080038a9 	.word	0x080038a9
 800385c:	08003abb 	.word	0x08003abb
 8003860:	08003abb 	.word	0x08003abb
 8003864:	08003abb 	.word	0x08003abb
 8003868:	08003abb 	.word	0x08003abb
 800386c:	08003abb 	.word	0x08003abb
 8003870:	08003abb 	.word	0x08003abb
 8003874:	08003abb 	.word	0x08003abb
 8003878:	080038af 	.word	0x080038af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800387c:	4b94      	ldr	r3, [pc, #592]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003888:	4b91      	ldr	r3, [pc, #580]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	4a90      	ldr	r2, [pc, #576]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
 8003898:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800389a:	e111      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800389c:	4b8d      	ldr	r3, [pc, #564]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800389e:	61bb      	str	r3, [r7, #24]
    break;
 80038a0:	e10e      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038a2:	4b8d      	ldr	r3, [pc, #564]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038a4:	61bb      	str	r3, [r7, #24]
    break;
 80038a6:	e10b      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80038a8:	4b8c      	ldr	r3, [pc, #560]	; (8003adc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038aa:	61bb      	str	r3, [r7, #24]
    break;
 80038ac:	e108      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038ae:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80038b8:	4b85      	ldr	r3, [pc, #532]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038c4:	4b82      	ldr	r3, [pc, #520]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80038ce:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d2:	08db      	lsrs	r3, r3, #3
 80038d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80e1 	beq.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	f000 8083 	beq.w	8003a00 <HAL_RCC_GetSysClockFreq+0x204>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	f200 80a1 	bhi.w	8003a44 <HAL_RCC_GetSysClockFreq+0x248>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x114>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d056      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800390e:	e099      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003910:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d02d      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800391c:	4b6c      	ldr	r3, [pc, #432]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	4a6b      	ldr	r2, [pc, #428]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	ee07 3a90 	vmov	s15, r3
 8003934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003946:	4b62      	ldr	r3, [pc, #392]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003956:	ed97 6a02 	vldr	s12, [r7, #8]
 800395a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003976:	e087      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ae4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399a:	ed97 6a02 	vldr	s12, [r7, #8]
 800399e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ba:	e065      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ce:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039de:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039fe:	e043      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003aec <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a12:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a42:	e021      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a86:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	0a5b      	lsrs	r3, r3, #9
 8003a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a92:	3301      	adds	r3, #1
 8003a94:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aac:	ee17 3a90 	vmov	r3, s15
 8003ab0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
    break;
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003abc:	61bb      	str	r3, [r7, #24]
    break;
 8003abe:	bf00      	nop
  }

  return sysclockfreq;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	03d09000 	.word	0x03d09000
 8003ad8:	003d0900 	.word	0x003d0900
 8003adc:	017d7840 	.word	0x017d7840
 8003ae0:	46000000 	.word	0x46000000
 8003ae4:	4c742400 	.word	0x4c742400
 8003ae8:	4a742400 	.word	0x4a742400
 8003aec:	4bbebc20 	.word	0x4bbebc20

08003af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003af6:	f7ff fe81 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x50>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	0a1b      	lsrs	r3, r3, #8
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	490f      	ldr	r1, [pc, #60]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b2e:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	58024400 	.word	0x58024400
 8003b44:	0800adb8 	.word	0x0800adb8
 8003b48:	24000004 	.word	0x24000004
 8003b4c:	24000000 	.word	0x24000000

08003b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b54:	f7ff ffcc 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4904      	ldr	r1, [pc, #16]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	58024400 	.word	0x58024400
 8003b78:	0800adb8 	.word	0x0800adb8

08003b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b80:	f7ff ffb6 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4904      	ldr	r1, [pc, #16]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	0800adb8 	.word	0x0800adb8

08003ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	223f      	movs	r2, #63	; 0x3f
 8003bb6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <HAL_RCC_GetClockConfig+0x7c>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0207 	and.w	r2, r3, #7
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003bc4:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <HAL_RCC_GetClockConfig+0x7c>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_RCC_GetClockConfig+0x7c>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_RCC_GetClockConfig+0x7c>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_RCC_GetClockConfig+0x7c>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_GetClockConfig+0x7c>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <HAL_RCC_GetClockConfig+0x7c>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCC_GetClockConfig+0x80>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 020f 	and.w	r2, r3, #15
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	601a      	str	r2, [r3, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	58024400 	.word	0x58024400
 8003c28:	52002000 	.word	0x52002000

08003c2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d03f      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c50:	d02a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c56:	d824      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c5c:	d018      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c62:	d81e      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6c:	d007      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c70:	4ba3      	ldr	r3, [pc, #652]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4aa2      	ldr	r2, [pc, #648]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c7c:	e015      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2102      	movs	r1, #2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 f9fd 	bl	8005084 <RCCEx_PLL2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3324      	adds	r3, #36	; 0x24
 8003c94:	2102      	movs	r1, #2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 faa6 	bl	80051e8 <RCCEx_PLL3_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cb0:	4b93      	ldr	r3, [pc, #588]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cbc:	4990      	ldr	r1, [pc, #576]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	650b      	str	r3, [r1, #80]	; 0x50
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d03d      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d826      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003cf9 	.word	0x08003cf9
 8003ce8:	08003d07 	.word	0x08003d07
 8003cec:	08003d19 	.word	0x08003d19
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d31 	.word	0x08003d31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf8:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a80      	ldr	r2, [pc, #512]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d04:	e015      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 f9b9 	bl	8005084 <RCCEx_PLL2_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d16:	e00c      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3324      	adds	r3, #36	; 0x24
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fa62 	bl	80051e8 <RCCEx_PLL3_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d28:	e003      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d38:	4b71      	ldr	r3, [pc, #452]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3c:	f023 0207 	bic.w	r2, r3, #7
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	496e      	ldr	r1, [pc, #440]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	650b      	str	r3, [r1, #80]	; 0x50
 8003d4a:	e001      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d042      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d64:	d02b      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6a:	d825      	bhi.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d6c:	2bc0      	cmp	r3, #192	; 0xc0
 8003d6e:	d028      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d70:	2bc0      	cmp	r3, #192	; 0xc0
 8003d72:	d821      	bhi.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d016      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003d78:	2b80      	cmp	r3, #128	; 0x80
 8003d7a:	d81d      	bhi.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d007      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003d84:	e018      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d86:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	4a5d      	ldr	r2, [pc, #372]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d92:	e017      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3304      	adds	r3, #4
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f972 	bl	8005084 <RCCEx_PLL2_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003da4:	e00e      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3324      	adds	r3, #36	; 0x24
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 fa1b 	bl	80051e8 <RCCEx_PLL3_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003db6:	e005      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	75fb      	strb	r3, [r7, #23]
      break;
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003dca:	4b4d      	ldr	r3, [pc, #308]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	494a      	ldr	r1, [pc, #296]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	650b      	str	r3, [r1, #80]	; 0x50
 8003ddc:	e001      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d049      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003df4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df8:	d030      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003dfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dfe:	d82a      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e04:	d02c      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003e06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e0a:	d824      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e10:	d018      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e16:	d81e      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e20:	d007      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003e22:	e018      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e24:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	4a35      	ldr	r2, [pc, #212]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e30:	e017      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 f923 	bl	8005084 <RCCEx_PLL2_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e42:	e00e      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f9cc 	bl	80051e8 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e54:	e005      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e76:	4922      	ldr	r1, [pc, #136]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	658b      	str	r3, [r1, #88]	; 0x58
 8003e7c:	e001      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d04b      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e98:	d030      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9e:	d82a      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ea0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea4:	d02e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003ea6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003eaa:	d824      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb0:	d018      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003eb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb6:	d81e      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec0:	d007      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ec2:	e018      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ed0:	e019      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 f8d3 	bl	8005084 <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ee2:	e010      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 f97c 	bl	80051e8 <RCCEx_PLL3_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ef4:	e007      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003efc:	bf00      	nop
 8003efe:	e002      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f00:	58024400 	.word	0x58024400
      break;
 8003f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f0c:	4b99      	ldr	r3, [pc, #612]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f1a:	4996      	ldr	r1, [pc, #600]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	658b      	str	r3, [r1, #88]	; 0x58
 8003f20:	e001      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d032      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	2b30      	cmp	r3, #48	; 0x30
 8003f38:	d01c      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003f3a:	2b30      	cmp	r3, #48	; 0x30
 8003f3c:	d817      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d00c      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d813      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d016      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d10f      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4e:	4b89      	ldr	r3, [pc, #548]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	4a88      	ldr	r2, [pc, #544]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f5a:	e00e      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	2102      	movs	r1, #2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 f88e 	bl	8005084 <RCCEx_PLL2_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f6c:	e005      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
      break;
 8003f72:	e002      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f80:	4b7c      	ldr	r3, [pc, #496]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	4979      	ldr	r1, [pc, #484]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f92:	e001      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d047      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fac:	d030      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb2:	d82a      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb8:	d02c      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003fba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fbe:	d824      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc4:	d018      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fca:	d81e      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d007      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003fd6:	e018      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd8:	4b66      	ldr	r3, [pc, #408]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	4a65      	ldr	r2, [pc, #404]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fe4:	e017      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f001 f849 	bl	8005084 <RCCEx_PLL2_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ff6:	e00e      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3324      	adds	r3, #36	; 0x24
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 f8f2 	bl	80051e8 <RCCEx_PLL3_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004008:	e005      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
      break;
 800400e:	e002      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004010:	bf00      	nop
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800401c:	4b55      	ldr	r3, [pc, #340]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800401e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004020:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	4952      	ldr	r1, [pc, #328]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800402a:	4313      	orrs	r3, r2
 800402c:	650b      	str	r3, [r1, #80]	; 0x50
 800402e:	e001      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d049      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004048:	d02e      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800404a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800404e:	d828      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004054:	d02a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004056:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800405a:	d822      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800405c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004060:	d026      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004062:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004066:	d81c      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406c:	d010      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800406e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004072:	d816      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01d      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d111      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fffd 	bl	8005084 <RCCEx_PLL2_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800408e:	e012      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3324      	adds	r3, #36	; 0x24
 8004094:	2101      	movs	r1, #1
 8004096:	4618      	mov	r0, r3
 8004098:	f001 f8a6 	bl	80051e8 <RCCEx_PLL3_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040a0:	e009      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	75fb      	strb	r3, [r7, #23]
      break;
 80040a6:	e006      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040a8:	bf00      	nop
 80040aa:	e004      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040ac:	bf00      	nop
 80040ae:	e002      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040bc:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c8:	492a      	ldr	r1, [pc, #168]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	650b      	str	r3, [r1, #80]	; 0x50
 80040ce:	e001      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d04d      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ea:	d02e      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80040ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f0:	d828      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80040f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f6:	d02a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fc:	d822      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80040fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004102:	d026      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004104:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004108:	d81c      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800410a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410e:	d010      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004114:	d816      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01d      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800411a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411e:	d111      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	2101      	movs	r1, #1
 8004126:	4618      	mov	r0, r3
 8004128:	f000 ffac 	bl	8005084 <RCCEx_PLL2_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004130:	e012      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3324      	adds	r3, #36	; 0x24
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f001 f855 	bl	80051e8 <RCCEx_PLL3_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004142:	e009      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	75fb      	strb	r3, [r7, #23]
      break;
 8004148:	e006      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800414a:	bf00      	nop
 800414c:	e004      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800416c:	4901      	ldr	r1, [pc, #4]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800416e:	4313      	orrs	r3, r2
 8004170:	658b      	str	r3, [r1, #88]	; 0x58
 8004172:	e003      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d022      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004194:	d108      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f000 ff71 	bl	8005084 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80041a6:	e003      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      break;
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 80041ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80041b6:	4b82      	ldr	r3, [pc, #520]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	497f      	ldr	r1, [pc, #508]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041c8:	e001      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d02f      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e2:	d00e      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 80041e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e8:	d814      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d015      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 80041ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041f2:	d10f      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f4:	4b72      	ldr	r3, [pc, #456]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	4a71      	ldr	r2, [pc, #452]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80041fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004200:	e00c      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f000 ff3b 	bl	8005084 <RCCEx_PLL2_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004212:	e003      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
      break;
 8004218:	e000      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 800421a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004222:	4b67      	ldr	r3, [pc, #412]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4964      	ldr	r1, [pc, #400]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004230:	4313      	orrs	r3, r2
 8004232:	650b      	str	r3, [r1, #80]	; 0x50
 8004234:	e001      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d031      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	2b03      	cmp	r3, #3
 800424c:	d81a      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	0800428b 	.word	0x0800428b
 8004258:	08004265 	.word	0x08004265
 800425c:	08004273 	.word	0x08004273
 8004260:	0800428b 	.word	0x0800428b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004264:	4b56      	ldr	r3, [pc, #344]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a55      	ldr	r2, [pc, #340]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800426a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004270:	e00c      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	2102      	movs	r1, #2
 8004278:	4618      	mov	r0, r3
 800427a:	f000 ff03 	bl	8005084 <RCCEx_PLL2_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004282:	e003      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
      break;
 8004288:	e000      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 800428a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004292:	4b4b      	ldr	r3, [pc, #300]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	4948      	ldr	r1, [pc, #288]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042a4:	e001      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 808c 	beq.w	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b8:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a41      	ldr	r2, [pc, #260]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 80042be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042c4:	f7fd ffda 	bl	800227c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ca:	e009      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042cc:	f7fd ffd6 	bl	800227c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d902      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	75fb      	strb	r3, [r7, #23]
        break;
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e0:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ef      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d16c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042f2:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80042f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042fc:	4053      	eors	r3, r2
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d013      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004306:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800431c:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004338:	d115      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd ff9f 	bl	800227c <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004340:	e00b      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fd ff9b 	bl	800227c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d902      	bls.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	75fb      	strb	r3, [r7, #23]
            break;
 8004358:	e005      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800435a:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ed      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d126      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437a:	d10d      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800438a:	0919      	lsrs	r1, r3, #4
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 800438e:	400b      	ands	r3, r1
 8004390:	490b      	ldr	r1, [pc, #44]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004392:	4313      	orrs	r3, r2
 8004394:	610b      	str	r3, [r1, #16]
 8004396:	e005      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800439e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043a2:	6113      	str	r3, [r2, #16]
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80043a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b2:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	670b      	str	r3, [r1, #112]	; 0x70
 80043b8:	e00a      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	75bb      	strb	r3, [r7, #22]
 80043be:	e007      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 80043c0:	58024400 	.word	0x58024400
 80043c4:	58024800 	.word	0x58024800
 80043c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d07e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e0:	2b28      	cmp	r3, #40	; 0x28
 80043e2:	d867      	bhi.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080044bb 	.word	0x080044bb
 80043f0:	080044b5 	.word	0x080044b5
 80043f4:	080044b5 	.word	0x080044b5
 80043f8:	080044b5 	.word	0x080044b5
 80043fc:	080044b5 	.word	0x080044b5
 8004400:	080044b5 	.word	0x080044b5
 8004404:	080044b5 	.word	0x080044b5
 8004408:	080044b5 	.word	0x080044b5
 800440c:	08004491 	.word	0x08004491
 8004410:	080044b5 	.word	0x080044b5
 8004414:	080044b5 	.word	0x080044b5
 8004418:	080044b5 	.word	0x080044b5
 800441c:	080044b5 	.word	0x080044b5
 8004420:	080044b5 	.word	0x080044b5
 8004424:	080044b5 	.word	0x080044b5
 8004428:	080044b5 	.word	0x080044b5
 800442c:	080044a3 	.word	0x080044a3
 8004430:	080044b5 	.word	0x080044b5
 8004434:	080044b5 	.word	0x080044b5
 8004438:	080044b5 	.word	0x080044b5
 800443c:	080044b5 	.word	0x080044b5
 8004440:	080044b5 	.word	0x080044b5
 8004444:	080044b5 	.word	0x080044b5
 8004448:	080044b5 	.word	0x080044b5
 800444c:	080044bb 	.word	0x080044bb
 8004450:	080044b5 	.word	0x080044b5
 8004454:	080044b5 	.word	0x080044b5
 8004458:	080044b5 	.word	0x080044b5
 800445c:	080044b5 	.word	0x080044b5
 8004460:	080044b5 	.word	0x080044b5
 8004464:	080044b5 	.word	0x080044b5
 8004468:	080044b5 	.word	0x080044b5
 800446c:	080044bb 	.word	0x080044bb
 8004470:	080044b5 	.word	0x080044b5
 8004474:	080044b5 	.word	0x080044b5
 8004478:	080044b5 	.word	0x080044b5
 800447c:	080044b5 	.word	0x080044b5
 8004480:	080044b5 	.word	0x080044b5
 8004484:	080044b5 	.word	0x080044b5
 8004488:	080044b5 	.word	0x080044b5
 800448c:	080044bb 	.word	0x080044bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	2101      	movs	r1, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fdf4 	bl	8005084 <RCCEx_PLL2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044a0:	e00c      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3324      	adds	r3, #36	; 0x24
 80044a6:	2101      	movs	r1, #1
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fe9d 	bl	80051e8 <RCCEx_PLL3_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044b2:	e003      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	75fb      	strb	r3, [r7, #23]
      break;
 80044b8:	e000      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 80044ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044c2:	4b96      	ldr	r3, [pc, #600]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ce:	4993      	ldr	r1, [pc, #588]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	654b      	str	r3, [r1, #84]	; 0x54
 80044d4:	e001      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d037      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d820      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x904>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004537 	.word	0x08004537
 80044f8:	0800450d 	.word	0x0800450d
 80044fc:	0800451f 	.word	0x0800451f
 8004500:	08004537 	.word	0x08004537
 8004504:	08004537 	.word	0x08004537
 8004508:	08004537 	.word	0x08004537
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fdb6 	bl	8005084 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800451c:	e00c      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3324      	adds	r3, #36	; 0x24
 8004522:	2101      	movs	r1, #1
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fe5f 	bl	80051e8 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800452e:	e003      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
      break;
 8004534:	e000      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 8004536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800453e:	4b77      	ldr	r3, [pc, #476]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f023 0207 	bic.w	r2, r3, #7
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454a:	4974      	ldr	r1, [pc, #464]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800454c:	4313      	orrs	r3, r2
 800454e:	654b      	str	r3, [r1, #84]	; 0x54
 8004550:	e001      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d03a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004568:	2b05      	cmp	r3, #5
 800456a:	d821      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	080045b7 	.word	0x080045b7
 8004578:	0800458d 	.word	0x0800458d
 800457c:	0800459f 	.word	0x0800459f
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045b7 	.word	0x080045b7
 8004588:	080045b7 	.word	0x080045b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fd76 	bl	8005084 <RCCEx_PLL2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800459c:	e00c      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3324      	adds	r3, #36	; 0x24
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fe1f 	bl	80051e8 <RCCEx_PLL3_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045ae:	e003      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	75fb      	strb	r3, [r7, #23]
      break;
 80045b4:	e000      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 80045b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045be:	4b57      	ldr	r3, [pc, #348]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	f023 0207 	bic.w	r2, r3, #7
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045cc:	4953      	ldr	r1, [pc, #332]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	658b      	str	r3, [r1, #88]	; 0x58
 80045d2:	e001      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d04b      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ee:	d02e      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80045f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f4:	d828      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d02a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d822      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8004602:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004606:	d026      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8004608:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800460c:	d81c      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800460e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004612:	d010      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004618:	d816      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01d      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 800461e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004622:	d111      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fd2a 	bl	8005084 <RCCEx_PLL2_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004634:	e012      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3324      	adds	r3, #36	; 0x24
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fdd3 	bl	80051e8 <RCCEx_PLL3_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004646:	e009      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]
      break;
 800464c:	e006      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800465a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004662:	4b2e      	ldr	r3, [pc, #184]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	492a      	ldr	r1, [pc, #168]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004672:	4313      	orrs	r3, r2
 8004674:	654b      	str	r3, [r1, #84]	; 0x54
 8004676:	e001      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7dfb      	ldrb	r3, [r7, #23]
 800467a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d04d      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800468e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004692:	d02e      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8004694:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004698:	d828      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	d02a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80046a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a4:	d822      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xac0>
 80046a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046aa:	d026      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xace>
 80046ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b0:	d81c      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xac0>
 80046b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b6:	d010      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80046b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046bc:	d816      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xac0>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01d      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d111      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fcd8 	bl	8005084 <RCCEx_PLL2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046d8:	e012      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3324      	adds	r3, #36	; 0x24
 80046de:	2102      	movs	r1, #2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fd81 	bl	80051e8 <RCCEx_PLL3_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046ea:	e009      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	e006      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80046f2:	bf00      	nop
 80046f4:	e004      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80046f6:	bf00      	nop
 80046f8:	e002      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80046fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10c      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004714:	4901      	ldr	r1, [pc, #4]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	658b      	str	r3, [r1, #88]	; 0x58
 800471a:	e003      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 800471c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d04b      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004736:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800473a:	d02e      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800473c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004740:	d828      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004746:	d02a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8004748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474c:	d822      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800474e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004752:	d026      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8004754:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004758:	d81c      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800475e:	d010      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004764:	d816      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01d      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	d111      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fc84 	bl	8005084 <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004780:	e012      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3324      	adds	r3, #36	; 0x24
 8004786:	2102      	movs	r1, #2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd2d 	bl	80051e8 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004792:	e009      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
      break;
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800479a:	bf00      	nop
 800479c:	e004      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800479e:	bf00      	nop
 80047a0:	e002      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80047a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047ae:	4b9e      	ldr	r3, [pc, #632]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047bc:	499a      	ldr	r1, [pc, #616]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	658b      	str	r3, [r1, #88]	; 0x58
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d10a      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fcfe 	bl	80051e8 <RCCEx_PLL3_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047f6:	4b8c      	ldr	r3, [pc, #560]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004804:	4988      	ldr	r1, [pc, #544]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004820:	d10a      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3324      	adds	r3, #36	; 0x24
 8004826:	2102      	movs	r1, #2
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fcdd 	bl	80051e8 <RCCEx_PLL3_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004838:	4b7b      	ldr	r3, [pc, #492]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004846:	4978      	ldr	r1, [pc, #480]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004848:	4313      	orrs	r3, r2
 800484a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d034      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800485e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004862:	d01d      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004868:	d817      	bhi.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004872:	d009      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004874:	e011      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fc01 	bl	8005084 <RCCEx_PLL2_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004886:	e00c      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3324      	adds	r3, #36	; 0x24
 800488c:	2102      	movs	r1, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fcaa 	bl	80051e8 <RCCEx_PLL3_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	75fb      	strb	r3, [r7, #23]
      break;
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 80048a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a8:	4b5f      	ldr	r3, [pc, #380]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048b6:	495c      	ldr	r1, [pc, #368]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	658b      	str	r3, [r1, #88]	; 0x58
 80048bc:	e001      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d033      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d8:	d01c      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80048da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048de:	d816      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xce2>
 80048e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80048e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ea:	d007      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80048ec:	e00f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ee:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4a4d      	ldr	r2, [pc, #308]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048fa:	e00c      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3324      	adds	r3, #36	; 0x24
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fc70 	bl	80051e8 <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
      break;
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 8004914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800491c:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	493f      	ldr	r1, [pc, #252]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	654b      	str	r3, [r1, #84]	; 0x54
 8004930:	e001      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d029      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd26>
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d007      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8004950:	e00f      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004952:	4b35      	ldr	r3, [pc, #212]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800495e:	e00b      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fb8c 	bl	8005084 <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004970:	e002      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
      break;
 8004976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800497e:	4b2a      	ldr	r3, [pc, #168]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498a:	4927      	ldr	r1, [pc, #156]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004990:	e001      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3324      	adds	r3, #36	; 0x24
 80049a6:	2102      	movs	r1, #2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fc1d 	bl	80051e8 <RCCEx_PLL3_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d035      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ce:	d017      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 80049d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d4:	d811      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80049d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049da:	d013      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d80b      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d010      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ea:	d106      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80049f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049f8:	e007      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
      break;
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8004a00:	bf00      	nop
 8004a02:	e002      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8004a04:	bf00      	nop
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8004a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10d      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a1e:	4902      	ldr	r1, [pc, #8]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	654b      	str	r3, [r1, #84]	; 0x54
 8004a24:	e004      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a3c:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a48:	492e      	ldr	r1, [pc, #184]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a5a:	4b2a      	ldr	r3, [pc, #168]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a68:	4926      	ldr	r1, [pc, #152]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a7a:	4b22      	ldr	r3, [pc, #136]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a86:	491f      	ldr	r1, [pc, #124]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004aa2:	6113      	str	r3, [r2, #16]
 8004aa4:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004aae:	4915      	ldr	r1, [pc, #84]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	da08      	bge.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	490e      	ldr	r1, [pc, #56]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	4906      	ldr	r1, [pc, #24]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004aee:	7dbb      	ldrb	r3, [r7, #22]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	58024400 	.word	0x58024400

08004b08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b0c:	f7fe fff0 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4904      	ldr	r1, [pc, #16]	; (8004b30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	0800adb8 	.word	0x0800adb8

08004b34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b089      	sub	sp, #36	; 0x24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b3c:	4ba1      	ldr	r3, [pc, #644]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b46:	4b9f      	ldr	r3, [pc, #636]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	0b1b      	lsrs	r3, r3, #12
 8004b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b52:	4b9c      	ldr	r3, [pc, #624]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b5e:	4b99      	ldr	r3, [pc, #612]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	08db      	lsrs	r3, r3, #3
 8004b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8111 	beq.w	8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	f000 8083 	beq.w	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	f200 80a1 	bhi.w	8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d056      	beq.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b9e:	e099      	b.n	8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ba0:	4b88      	ldr	r3, [pc, #544]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02d      	beq.n	8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bac:	4b85      	ldr	r3, [pc, #532]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	08db      	lsrs	r3, r3, #3
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	4a84      	ldr	r2, [pc, #528]	; (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	ee07 3a90 	vmov	s15, r3
 8004bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd6:	4b7b      	ldr	r3, [pc, #492]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c06:	e087      	b.n	8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1a:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c4a:	e065      	b.n	8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5e:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c8e:	e043      	b.n	8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca2:	4b48      	ldr	r3, [pc, #288]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cd2:	e021      	b.n	8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce6:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d18:	4b2a      	ldr	r3, [pc, #168]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	0a5b      	lsrs	r3, r3, #9
 8004d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3e:	ee17 2a90 	vmov	r2, s15
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d46:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6c:	ee17 2a90 	vmov	r2, s15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	0e1b      	lsrs	r3, r3, #24
 8004d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9a:	ee17 2a90 	vmov	r2, s15
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004da2:	e008      	b.n	8004db6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
}
 8004db6:	bf00      	nop
 8004db8:	3724      	adds	r7, #36	; 0x24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	03d09000 	.word	0x03d09000
 8004dcc:	46000000 	.word	0x46000000
 8004dd0:	4c742400 	.word	0x4c742400
 8004dd4:	4a742400 	.word	0x4a742400
 8004dd8:	4bbebc20 	.word	0x4bbebc20

08004ddc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b089      	sub	sp, #36	; 0x24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004de4:	4ba1      	ldr	r3, [pc, #644]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004dee:	4b9f      	ldr	r3, [pc, #636]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	0d1b      	lsrs	r3, r3, #20
 8004df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dfa:	4b9c      	ldr	r3, [pc, #624]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e06:	4b99      	ldr	r3, [pc, #612]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	08db      	lsrs	r3, r3, #3
 8004e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8111 	beq.w	800504c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	f000 8083 	beq.w	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	f200 80a1 	bhi.w	8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d056      	beq.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e46:	e099      	b.n	8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e48:	4b88      	ldr	r3, [pc, #544]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02d      	beq.n	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e54:	4b85      	ldr	r3, [pc, #532]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	08db      	lsrs	r3, r3, #3
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	4a84      	ldr	r2, [pc, #528]	; (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
 8004e64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7e:	4b7b      	ldr	r3, [pc, #492]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004eae:	e087      	b.n	8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec2:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ef2:	e065      	b.n	8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800507c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f06:	4b59      	ldr	r3, [pc, #356]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f36:	e043      	b.n	8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4a:	4b48      	ldr	r3, [pc, #288]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f7a:	e021      	b.n	8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800507c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8e:	4b37      	ldr	r3, [pc, #220]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	0a5b      	lsrs	r3, r3, #9
 8004fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe6:	ee17 2a90 	vmov	r2, s15
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004fee:	4b1f      	ldr	r3, [pc, #124]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005004:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005008:	edd7 6a07 	vldr	s13, [r7, #28]
 800500c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005014:	ee17 2a90 	vmov	r2, s15
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	0e1b      	lsrs	r3, r3, #24
 8005022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005032:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005036:	edd7 6a07 	vldr	s13, [r7, #28]
 800503a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005042:	ee17 2a90 	vmov	r2, s15
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800504a:	e008      	b.n	800505e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	609a      	str	r2, [r3, #8]
}
 800505e:	bf00      	nop
 8005060:	3724      	adds	r7, #36	; 0x24
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	58024400 	.word	0x58024400
 8005070:	03d09000 	.word	0x03d09000
 8005074:	46000000 	.word	0x46000000
 8005078:	4c742400 	.word	0x4c742400
 800507c:	4a742400 	.word	0x4a742400
 8005080:	4bbebc20 	.word	0x4bbebc20

08005084 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005092:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b03      	cmp	r3, #3
 800509c:	d101      	bne.n	80050a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e099      	b.n	80051d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050a2:	4b4f      	ldr	r3, [pc, #316]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a4e      	ldr	r2, [pc, #312]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 80050a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ae:	f7fd f8e5 	bl	800227c <HAL_GetTick>
 80050b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050b4:	e008      	b.n	80050c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050b6:	f7fd f8e1 	bl	800227c <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e086      	b.n	80051d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050c8:	4b45      	ldr	r3, [pc, #276]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050d4:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	493f      	ldr	r1, [pc, #252]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	628b      	str	r3, [r1, #40]	; 0x28
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	025b      	lsls	r3, r3, #9
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	3b01      	subs	r3, #1
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005118:	4931      	ldr	r1, [pc, #196]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800511e:	4b30      	ldr	r3, [pc, #192]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	492d      	ldr	r1, [pc, #180]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005130:	4b2b      	ldr	r3, [pc, #172]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	f023 0220 	bic.w	r2, r3, #32
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	4928      	ldr	r1, [pc, #160]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005142:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	4a26      	ldr	r2, [pc, #152]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005148:	f023 0310 	bic.w	r3, r3, #16
 800514c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005152:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <RCCEx_PLL2_Config+0x160>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	69d2      	ldr	r2, [r2, #28]
 800515a:	00d2      	lsls	r2, r2, #3
 800515c:	4920      	ldr	r1, [pc, #128]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005168:	f043 0310 	orr.w	r3, r3, #16
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	4a19      	ldr	r2, [pc, #100]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 800517a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800517e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005180:	e00f      	b.n	80051a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d106      	bne.n	8005196 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005188:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	4a14      	ldr	r2, [pc, #80]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 800518e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005194:	e005      	b.n	80051a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	4a11      	ldr	r2, [pc, #68]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 800519c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ae:	f7fd f865 	bl	800227c <HAL_GetTick>
 80051b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051b4:	e008      	b.n	80051c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051b6:	f7fd f861 	bl	800227c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e006      	b.n	80051d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <RCCEx_PLL2_Config+0x15c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	ffff0007 	.word	0xffff0007

080051e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051f6:	4b53      	ldr	r3, [pc, #332]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d101      	bne.n	8005206 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e099      	b.n	800533a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005206:	4b4f      	ldr	r3, [pc, #316]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4e      	ldr	r2, [pc, #312]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 800520c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005212:	f7fd f833 	bl	800227c <HAL_GetTick>
 8005216:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005218:	e008      	b.n	800522c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800521a:	f7fd f82f 	bl	800227c <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e086      	b.n	800533a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800522c:	4b45      	ldr	r3, [pc, #276]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f0      	bne.n	800521a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005238:	4b42      	ldr	r3, [pc, #264]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	051b      	lsls	r3, r3, #20
 8005246:	493f      	ldr	r1, [pc, #252]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	628b      	str	r3, [r1, #40]	; 0x28
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	3b01      	subs	r3, #1
 8005252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	3b01      	subs	r3, #1
 800525c:	025b      	lsls	r3, r3, #9
 800525e:	b29b      	uxth	r3, r3
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	3b01      	subs	r3, #1
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	3b01      	subs	r3, #1
 8005276:	061b      	lsls	r3, r3, #24
 8005278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800527c:	4931      	ldr	r1, [pc, #196]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005282:	4b30      	ldr	r3, [pc, #192]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	492d      	ldr	r1, [pc, #180]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005294:	4b2b      	ldr	r3, [pc, #172]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	4928      	ldr	r1, [pc, #160]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052a6:	4b27      	ldr	r3, [pc, #156]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	4a26      	ldr	r2, [pc, #152]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052b2:	4b24      	ldr	r3, [pc, #144]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b6:	4b24      	ldr	r3, [pc, #144]	; (8005348 <RCCEx_PLL3_Config+0x160>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	69d2      	ldr	r2, [r2, #28]
 80052be:	00d2      	lsls	r2, r2, #3
 80052c0:	4920      	ldr	r1, [pc, #128]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052c6:	4b1f      	ldr	r3, [pc, #124]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	4a19      	ldr	r2, [pc, #100]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052e4:	e00f      	b.n	8005306 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d106      	bne.n	80052fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052ec:	4b15      	ldr	r3, [pc, #84]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052f8:	e005      	b.n	8005306 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	4a11      	ldr	r2, [pc, #68]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 8005300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a0e      	ldr	r2, [pc, #56]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005312:	f7fc ffb3 	bl	800227c <HAL_GetTick>
 8005316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005318:	e008      	b.n	800532c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800531a:	f7fc ffaf 	bl	800227c <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e006      	b.n	800533a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <RCCEx_PLL3_Config+0x15c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	58024400 	.word	0x58024400
 8005348:	ffff0007 	.word	0xffff0007

0800534c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e0f1      	b.n	8005542 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a78      	ldr	r2, [pc, #480]	; (800554c <HAL_SPI_Init+0x200>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00f      	beq.n	800538e <HAL_SPI_Init+0x42>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a77      	ldr	r2, [pc, #476]	; (8005550 <HAL_SPI_Init+0x204>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00a      	beq.n	800538e <HAL_SPI_Init+0x42>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a75      	ldr	r2, [pc, #468]	; (8005554 <HAL_SPI_Init+0x208>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d005      	beq.n	800538e <HAL_SPI_Init+0x42>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d901      	bls.n	800538e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0d9      	b.n	8005542 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fdca 	bl	8005f28 <SPI_GetPacketSize>
 8005394:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a6c      	ldr	r2, [pc, #432]	; (800554c <HAL_SPI_Init+0x200>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00c      	beq.n	80053ba <HAL_SPI_Init+0x6e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a6a      	ldr	r2, [pc, #424]	; (8005550 <HAL_SPI_Init+0x204>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <HAL_SPI_Init+0x6e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a69      	ldr	r2, [pc, #420]	; (8005554 <HAL_SPI_Init+0x208>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d002      	beq.n	80053ba <HAL_SPI_Init+0x6e>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d811      	bhi.n	80053de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80053be:	4a63      	ldr	r2, [pc, #396]	; (800554c <HAL_SPI_Init+0x200>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a61      	ldr	r2, [pc, #388]	; (8005550 <HAL_SPI_Init+0x204>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_SPI_Init+0x8c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a60      	ldr	r2, [pc, #384]	; (8005554 <HAL_SPI_Init+0x208>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d104      	bne.n	80053e2 <HAL_SPI_Init+0x96>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d901      	bls.n	80053e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0af      	b.n	8005542 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc fd1c 	bl	8001e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800541e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005428:	d119      	bne.n	800545e <HAL_SPI_Init+0x112>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005432:	d103      	bne.n	800543c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10c      	bne.n	800545e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800544c:	d107      	bne.n	800545e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	431a      	orrs	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	ea42 0103 	orr.w	r1, r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	ea42 0103 	orr.w	r1, r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d113      	bne.n	80054fe <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40013000 	.word	0x40013000
 8005550:	40003800 	.word	0x40003800
 8005554:	40003c00 	.word	0x40003c00

08005558 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3320      	adds	r3, #32
 800556e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_SPI_Transmit+0x2a>
 800557e:	2302      	movs	r3, #2
 8005580:	e1d7      	b.n	8005932 <HAL_SPI_Transmit+0x3da>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800558a:	f7fc fe77 	bl	800227c <HAL_GetTick>
 800558e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d007      	beq.n	80055ac <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800559c:	2302      	movs	r3, #2
 800559e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055a8:	7efb      	ldrb	r3, [r7, #27]
 80055aa:	e1c2      	b.n	8005932 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Transmit+0x60>
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d107      	bne.n	80055c8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055c4:	7efb      	ldrb	r3, [r7, #27]
 80055c6:	e1b4      	b.n	8005932 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2203      	movs	r2, #3
 80055cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	88fa      	ldrh	r2, [r7, #6]
 80055e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005618:	d107      	bne.n	800562a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	4b96      	ldr	r3, [pc, #600]	; (800588c <HAL_SPI_Transmit+0x334>)
 8005632:	4013      	ands	r3, r2
 8005634:	88f9      	ldrh	r1, [r7, #6]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	430b      	orrs	r3, r1
 800563c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005656:	d107      	bne.n	8005668 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b0f      	cmp	r3, #15
 800566e:	d947      	bls.n	8005700 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005670:	e03f      	b.n	80056f2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d114      	bne.n	80056aa <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	1d1a      	adds	r2, r3, #4
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056a8:	e023      	b.n	80056f2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056aa:	f7fc fde7 	bl	800227c <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d803      	bhi.n	80056c2 <HAL_SPI_Transmit+0x16a>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d102      	bne.n	80056c8 <HAL_SPI_Transmit+0x170>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d114      	bne.n	80056f2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fb5f 	bl	8005d8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e11f      	b.n	8005932 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1b9      	bne.n	8005672 <HAL_SPI_Transmit+0x11a>
 80056fe:	e0f2      	b.n	80058e6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b07      	cmp	r3, #7
 8005706:	f240 80e7 	bls.w	80058d8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800570a:	e05d      	b.n	80057c8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	d132      	bne.n	8005780 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b01      	cmp	r3, #1
 8005724:	d918      	bls.n	8005758 <HAL_SPI_Transmit+0x200>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d014      	beq.n	8005758 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b02      	subs	r3, #2
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005756:	e037      	b.n	80057c8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575c:	881a      	ldrh	r2, [r3, #0]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005766:	1c9a      	adds	r2, r3, #2
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800577e:	e023      	b.n	80057c8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005780:	f7fc fd7c 	bl	800227c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d803      	bhi.n	8005798 <HAL_SPI_Transmit+0x240>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d102      	bne.n	800579e <HAL_SPI_Transmit+0x246>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d114      	bne.n	80057c8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 faf4 	bl	8005d8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e0b4      	b.n	8005932 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d19b      	bne.n	800570c <HAL_SPI_Transmit+0x1b4>
 80057d4:	e087      	b.n	80058e6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d155      	bne.n	8005890 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d918      	bls.n	8005822 <HAL_SPI_Transmit+0x2ca>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d914      	bls.n	8005822 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005808:	1d1a      	adds	r2, r3, #4
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b04      	subs	r3, #4
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005820:	e05a      	b.n	80058d8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b01      	cmp	r3, #1
 800582c:	d917      	bls.n	800585e <HAL_SPI_Transmit+0x306>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d013      	beq.n	800585e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b02      	subs	r3, #2
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800585c:	e03c      	b.n	80058d8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3320      	adds	r3, #32
 8005868:	7812      	ldrb	r2, [r2, #0]
 800586a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005888:	e026      	b.n	80058d8 <HAL_SPI_Transmit+0x380>
 800588a:	bf00      	nop
 800588c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005890:	f7fc fcf4 	bl	800227c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	429a      	cmp	r2, r3
 800589e:	d803      	bhi.n	80058a8 <HAL_SPI_Transmit+0x350>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d102      	bne.n	80058ae <HAL_SPI_Transmit+0x356>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d114      	bne.n	80058d8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fa6c 	bl	8005d8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e02c      	b.n	8005932 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f47f af78 	bne.w	80057d6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2108      	movs	r1, #8
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 faeb 	bl	8005ecc <SPI_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fa3d 	bl	8005d8c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005930:	7efb      	ldrb	r3, [r7, #27]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop

0800593c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08e      	sub	sp, #56	; 0x38
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3320      	adds	r3, #32
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3330      	adds	r3, #48	; 0x30
 800595e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_SPI_TransmitReceive+0x32>
 800596a:	2302      	movs	r3, #2
 800596c:	e209      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x446>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005976:	f7fc fc81 	bl	800227c <HAL_GetTick>
 800597a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800597c:	887b      	ldrh	r3, [r7, #2]
 800597e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800598a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005992:	7efb      	ldrb	r3, [r7, #27]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d014      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x86>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599e:	d106      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80059a8:	7efb      	ldrb	r3, [r7, #27]
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d009      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
 80059b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80059bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059c0:	e1df      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x98>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x98>
 80059ce:	887b      	ldrh	r3, [r7, #2]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80059e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059e6:	e1cc      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d003      	beq.n	80059fc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2205      	movs	r2, #5
 80059f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	887a      	ldrh	r2, [r7, #2]
 8005a0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	887a      	ldrh	r2, [r7, #2]
 8005a16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	887a      	ldrh	r2, [r7, #2]
 8005a24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	887a      	ldrh	r2, [r7, #2]
 8005a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	4b82      	ldr	r3, [pc, #520]	; (8005c4c <HAL_SPI_TransmitReceive+0x310>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	8879      	ldrh	r1, [r7, #2]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a68:	d107      	bne.n	8005a7a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b0f      	cmp	r3, #15
 8005a80:	d970      	bls.n	8005b64 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a82:	e068      	b.n	8005b56 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d11a      	bne.n	8005ac8 <HAL_SPI_TransmitReceive+0x18c>
 8005a92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d017      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa8:	1d1a      	adds	r2, r3, #4
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ac6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	f248 0308 	movw	r3, #32776	; 0x8008
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01a      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x1d2>
 8005ad8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d017      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ae8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b0e:	f7fc fbb5 	bl	800227c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d803      	bhi.n	8005b26 <HAL_SPI_TransmitReceive+0x1ea>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d102      	bne.n	8005b2c <HAL_SPI_TransmitReceive+0x1f0>
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d114      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f92d 	bl	8005d8c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e115      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d193      	bne.n	8005a84 <HAL_SPI_TransmitReceive+0x148>
 8005b5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d190      	bne.n	8005a84 <HAL_SPI_TransmitReceive+0x148>
 8005b62:	e0e7      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	2b07      	cmp	r3, #7
 8005b6a:	f240 80dd 	bls.w	8005d28 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b6e:	e066      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d119      	bne.n	8005bb2 <HAL_SPI_TransmitReceive+0x276>
 8005b7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d016      	beq.n	8005bb2 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	881a      	ldrh	r2, [r3, #0]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b92:	1c9a      	adds	r2, r3, #2
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d11a      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x2ba>
 8005bc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d017      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	8812      	ldrh	r2, [r2, #0]
 8005bce:	b292      	uxth	r2, r2
 8005bd0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd6:	1c9a      	adds	r2, r3, #2
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bf4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf6:	f7fc fb41 	bl	800227c <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d803      	bhi.n	8005c0e <HAL_SPI_TransmitReceive+0x2d2>
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d102      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x2d8>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d114      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f8b9 	bl	8005d8c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0a1      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d195      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x234>
 8005c44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d192      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x234>
 8005c4a:	e073      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x3f8>
 8005c4c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d11b      	bne.n	8005c96 <HAL_SPI_TransmitReceive+0x35a>
 8005c5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d018      	beq.n	8005c96 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3320      	adds	r3, #32
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c94:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d11d      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x3a4>
 8005ca4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01a      	beq.n	8005ce0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cb6:	7812      	ldrb	r2, [r2, #0]
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cde:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ce0:	f7fc facc 	bl	800227c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d803      	bhi.n	8005cf8 <HAL_SPI_TransmitReceive+0x3bc>
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d102      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x3c2>
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d114      	bne.n	8005d28 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f844 	bl	8005d8c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e02c      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d190      	bne.n	8005c50 <HAL_SPI_TransmitReceive+0x314>
 8005d2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d18d      	bne.n	8005c50 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2108      	movs	r1, #8
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8c4 	bl	8005ecc <SPI_WaitOnFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d50:	f043 0220 	orr.w	r2, r3, #32
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f816 	bl	8005d8c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e001      	b.n	8005d82 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8005d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3730      	adds	r7, #48	; 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop

08005d8c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0210 	orr.w	r2, r2, #16
 8005dba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6919      	ldr	r1, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b3c      	ldr	r3, [pc, #240]	; (8005ec8 <SPI_CloseTransfer+0x13c>)
 8005dd8:	400b      	ands	r3, r1
 8005dda:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005dea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d014      	beq.n	8005e22 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00f      	beq.n	8005e22 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0220 	orr.w	r2, r2, #32
 8005e20:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d014      	beq.n	8005e58 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00f      	beq.n	8005e58 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e56:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00f      	beq.n	8005e82 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e68:	f043 0201 	orr.w	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e80:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00f      	beq.n	8005eac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e92:	f043 0208 	orr.w	r2, r3, #8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eaa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	fffffc90 	.word	0xfffffc90

08005ecc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005edc:	e010      	b.n	8005f00 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ede:	f7fc f9cd 	bl	800227c <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d803      	bhi.n	8005ef6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d102      	bne.n	8005efc <SPI_WaitOnFlagUntilTimeout+0x30>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e00f      	b.n	8005f20 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d0df      	beq.n	8005ede <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	3301      	adds	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	3307      	adds	r3, #7
 8005f46:	08db      	lsrs	r3, r3, #3
 8005f48:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e049      	b.n	8006004 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f841 	bl	800600c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f000 f9ff 	bl	80063a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d001      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e054      	b.n	80060e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d022      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x80>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006062:	d01d      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a22      	ldr	r2, [pc, #136]	; (80060f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d018      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x80>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a21      	ldr	r2, [pc, #132]	; (80060f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d013      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x80>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_TIM_Base_Start_IT+0xdc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00e      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x80>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_TIM_Base_Start_IT+0xe0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d009      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x80>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <HAL_TIM_Base_Start_IT+0xe4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d004      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x80>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <HAL_TIM_Base_Start_IT+0xe8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d115      	bne.n	80060cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	4b19      	ldr	r3, [pc, #100]	; (800610c <HAL_TIM_Base_Start_IT+0xec>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b06      	cmp	r3, #6
 80060b0:	d015      	beq.n	80060de <HAL_TIM_Base_Start_IT+0xbe>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b8:	d011      	beq.n	80060de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0201 	orr.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	e008      	b.n	80060de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e000      	b.n	80060e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40010000 	.word	0x40010000
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40000c00 	.word	0x40000c00
 8006100:	40010400 	.word	0x40010400
 8006104:	40001800 	.word	0x40001800
 8006108:	40014000 	.word	0x40014000
 800610c:	00010007 	.word	0x00010007

08006110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b02      	cmp	r3, #2
 8006124:	d122      	bne.n	800616c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b02      	cmp	r3, #2
 8006132:	d11b      	bne.n	800616c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0202 	mvn.w	r2, #2
 800613c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f905 	bl	8006362 <HAL_TIM_IC_CaptureCallback>
 8006158:	e005      	b.n	8006166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f8f7 	bl	800634e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f908 	bl	8006376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	2b04      	cmp	r3, #4
 8006178:	d122      	bne.n	80061c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b04      	cmp	r3, #4
 8006186:	d11b      	bne.n	80061c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0204 	mvn.w	r2, #4
 8006190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f8db 	bl	8006362 <HAL_TIM_IC_CaptureCallback>
 80061ac:	e005      	b.n	80061ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8cd 	bl	800634e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f8de 	bl	8006376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d122      	bne.n	8006214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d11b      	bne.n	8006214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0208 	mvn.w	r2, #8
 80061e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f8b1 	bl	8006362 <HAL_TIM_IC_CaptureCallback>
 8006200:	e005      	b.n	800620e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f8a3 	bl	800634e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f8b4 	bl	8006376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b10      	cmp	r3, #16
 8006220:	d122      	bne.n	8006268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b10      	cmp	r3, #16
 800622e:	d11b      	bne.n	8006268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0210 	mvn.w	r2, #16
 8006238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2208      	movs	r2, #8
 800623e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f887 	bl	8006362 <HAL_TIM_IC_CaptureCallback>
 8006254:	e005      	b.n	8006262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f879 	bl	800634e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f88a 	bl	8006376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b01      	cmp	r3, #1
 8006274:	d10e      	bne.n	8006294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b01      	cmp	r3, #1
 8006282:	d107      	bne.n	8006294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0201 	mvn.w	r2, #1
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fb fcd2 	bl	8001c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b80      	cmp	r3, #128	; 0x80
 80062a0:	d10e      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d107      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f914 	bl	80064e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	d10e      	bne.n	80062ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b80      	cmp	r3, #128	; 0x80
 80062dc:	d107      	bne.n	80062ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f907 	bl	80064fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d10e      	bne.n	800631a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d107      	bne.n	800631a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f838 	bl	800638a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b20      	cmp	r3, #32
 8006326:	d10e      	bne.n	8006346 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b20      	cmp	r3, #32
 8006334:	d107      	bne.n	8006346 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f06f 0220 	mvn.w	r2, #32
 800633e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8c7 	bl	80064d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a40      	ldr	r2, [pc, #256]	; (80064b4 <TIM_Base_SetConfig+0x114>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d013      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063be:	d00f      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a3d      	ldr	r2, [pc, #244]	; (80064b8 <TIM_Base_SetConfig+0x118>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a3c      	ldr	r2, [pc, #240]	; (80064bc <TIM_Base_SetConfig+0x11c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d007      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a3b      	ldr	r2, [pc, #236]	; (80064c0 <TIM_Base_SetConfig+0x120>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a3a      	ldr	r2, [pc, #232]	; (80064c4 <TIM_Base_SetConfig+0x124>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d108      	bne.n	80063f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2f      	ldr	r2, [pc, #188]	; (80064b4 <TIM_Base_SetConfig+0x114>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01f      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006400:	d01b      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <TIM_Base_SetConfig+0x118>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d017      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2b      	ldr	r2, [pc, #172]	; (80064bc <TIM_Base_SetConfig+0x11c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2a      	ldr	r2, [pc, #168]	; (80064c0 <TIM_Base_SetConfig+0x120>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00f      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a29      	ldr	r2, [pc, #164]	; (80064c4 <TIM_Base_SetConfig+0x124>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00b      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a28      	ldr	r2, [pc, #160]	; (80064c8 <TIM_Base_SetConfig+0x128>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d007      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a27      	ldr	r2, [pc, #156]	; (80064cc <TIM_Base_SetConfig+0x12c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a26      	ldr	r2, [pc, #152]	; (80064d0 <TIM_Base_SetConfig+0x130>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d108      	bne.n	800644c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <TIM_Base_SetConfig+0x114>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00f      	beq.n	8006498 <TIM_Base_SetConfig+0xf8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a12      	ldr	r2, [pc, #72]	; (80064c4 <TIM_Base_SetConfig+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00b      	beq.n	8006498 <TIM_Base_SetConfig+0xf8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a11      	ldr	r2, [pc, #68]	; (80064c8 <TIM_Base_SetConfig+0x128>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_Base_SetConfig+0xf8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a10      	ldr	r2, [pc, #64]	; (80064cc <TIM_Base_SetConfig+0x12c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_Base_SetConfig+0xf8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <TIM_Base_SetConfig+0x130>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d103      	bne.n	80064a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	615a      	str	r2, [r3, #20]
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40010400 	.word	0x40010400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800

080064d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e042      	b.n	80065a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fb fd09 	bl	8001f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2224      	movs	r2, #36	; 0x24
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0201 	bic.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8c2 	bl	80066dc <UART_SetConfig>
 8006558:	4603      	mov	r3, r0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e022      	b.n	80065a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fe1e 	bl	80071ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800657e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800658e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fea5 	bl	80072f0 <UART_CheckIdleState>
 80065a6:	4603      	mov	r3, r0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	f040 8083 	bne.w	80066d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_UART_Transmit+0x28>
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e07b      	b.n	80066d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_UART_Transmit+0x3a>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e074      	b.n	80066d4 <HAL_UART_Transmit+0x124>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2221      	movs	r2, #33	; 0x21
 80065fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006602:	f7fb fe3b 	bl	800227c <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006620:	d108      	bne.n	8006634 <HAL_UART_Transmit+0x84>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	e003      	b.n	800663c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006644:	e02c      	b.n	80066a0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2200      	movs	r2, #0
 800664e:	2180      	movs	r1, #128	; 0x80
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fe98 	bl	8007386 <UART_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e039      	b.n	80066d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	3302      	adds	r3, #2
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e007      	b.n	800668e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	3301      	adds	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1cc      	bne.n	8006646 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2200      	movs	r2, #0
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fe65 	bl	8007386 <UART_WaitOnFlagUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e006      	b.n	80066d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e000      	b.n	80066d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
  }
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3720      	adds	r7, #32
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e0:	b092      	sub	sp, #72	; 0x48
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	4313      	orrs	r3, r2
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4bbe      	ldr	r3, [pc, #760]	; (8006a04 <UART_SetConfig+0x328>)
 800670c:	4013      	ands	r3, r2
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	6812      	ldr	r2, [r2, #0]
 8006712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006714:	430b      	orrs	r3, r1
 8006716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4ab3      	ldr	r2, [pc, #716]	; (8006a08 <UART_SetConfig+0x32c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006744:	4313      	orrs	r3, r2
 8006746:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	4baf      	ldr	r3, [pc, #700]	; (8006a0c <UART_SetConfig+0x330>)
 8006750:	4013      	ands	r3, r2
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006758:	430b      	orrs	r3, r1
 800675a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	f023 010f 	bic.w	r1, r3, #15
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4aa6      	ldr	r2, [pc, #664]	; (8006a10 <UART_SetConfig+0x334>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d177      	bne.n	800686c <UART_SetConfig+0x190>
 800677c:	4ba5      	ldr	r3, [pc, #660]	; (8006a14 <UART_SetConfig+0x338>)
 800677e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006780:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006784:	2b28      	cmp	r3, #40	; 0x28
 8006786:	d86d      	bhi.n	8006864 <UART_SetConfig+0x188>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0xb4>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	08006835 	.word	0x08006835
 8006794:	08006865 	.word	0x08006865
 8006798:	08006865 	.word	0x08006865
 800679c:	08006865 	.word	0x08006865
 80067a0:	08006865 	.word	0x08006865
 80067a4:	08006865 	.word	0x08006865
 80067a8:	08006865 	.word	0x08006865
 80067ac:	08006865 	.word	0x08006865
 80067b0:	0800683d 	.word	0x0800683d
 80067b4:	08006865 	.word	0x08006865
 80067b8:	08006865 	.word	0x08006865
 80067bc:	08006865 	.word	0x08006865
 80067c0:	08006865 	.word	0x08006865
 80067c4:	08006865 	.word	0x08006865
 80067c8:	08006865 	.word	0x08006865
 80067cc:	08006865 	.word	0x08006865
 80067d0:	08006845 	.word	0x08006845
 80067d4:	08006865 	.word	0x08006865
 80067d8:	08006865 	.word	0x08006865
 80067dc:	08006865 	.word	0x08006865
 80067e0:	08006865 	.word	0x08006865
 80067e4:	08006865 	.word	0x08006865
 80067e8:	08006865 	.word	0x08006865
 80067ec:	08006865 	.word	0x08006865
 80067f0:	0800684d 	.word	0x0800684d
 80067f4:	08006865 	.word	0x08006865
 80067f8:	08006865 	.word	0x08006865
 80067fc:	08006865 	.word	0x08006865
 8006800:	08006865 	.word	0x08006865
 8006804:	08006865 	.word	0x08006865
 8006808:	08006865 	.word	0x08006865
 800680c:	08006865 	.word	0x08006865
 8006810:	08006855 	.word	0x08006855
 8006814:	08006865 	.word	0x08006865
 8006818:	08006865 	.word	0x08006865
 800681c:	08006865 	.word	0x08006865
 8006820:	08006865 	.word	0x08006865
 8006824:	08006865 	.word	0x08006865
 8006828:	08006865 	.word	0x08006865
 800682c:	08006865 	.word	0x08006865
 8006830:	0800685d 	.word	0x0800685d
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683a:	e222      	b.n	8006c82 <UART_SetConfig+0x5a6>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006842:	e21e      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684a:	e21a      	b.n	8006c82 <UART_SetConfig+0x5a6>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e216      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006854:	2320      	movs	r3, #32
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e212      	b.n	8006c82 <UART_SetConfig+0x5a6>
 800685c:	2340      	movs	r3, #64	; 0x40
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e20e      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006864:	2380      	movs	r3, #128	; 0x80
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e20a      	b.n	8006c82 <UART_SetConfig+0x5a6>
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a69      	ldr	r2, [pc, #420]	; (8006a18 <UART_SetConfig+0x33c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d130      	bne.n	80068d8 <UART_SetConfig+0x1fc>
 8006876:	4b67      	ldr	r3, [pc, #412]	; (8006a14 <UART_SetConfig+0x338>)
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	2b05      	cmp	r3, #5
 8006880:	d826      	bhi.n	80068d0 <UART_SetConfig+0x1f4>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <UART_SetConfig+0x1ac>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068a1 	.word	0x080068a1
 800688c:	080068a9 	.word	0x080068a9
 8006890:	080068b1 	.word	0x080068b1
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068c1 	.word	0x080068c1
 800689c:	080068c9 	.word	0x080068c9
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a6:	e1ec      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80068a8:	2304      	movs	r3, #4
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ae:	e1e8      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80068b0:	2308      	movs	r3, #8
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b6:	e1e4      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80068b8:	2310      	movs	r3, #16
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068be:	e1e0      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80068c0:	2320      	movs	r3, #32
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c6:	e1dc      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80068c8:	2340      	movs	r3, #64	; 0x40
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ce:	e1d8      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d6:	e1d4      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a4f      	ldr	r2, [pc, #316]	; (8006a1c <UART_SetConfig+0x340>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d130      	bne.n	8006944 <UART_SetConfig+0x268>
 80068e2:	4b4c      	ldr	r3, [pc, #304]	; (8006a14 <UART_SetConfig+0x338>)
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b05      	cmp	r3, #5
 80068ec:	d826      	bhi.n	800693c <UART_SetConfig+0x260>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0x218>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	0800690d 	.word	0x0800690d
 80068f8:	08006915 	.word	0x08006915
 80068fc:	0800691d 	.word	0x0800691d
 8006900:	08006925 	.word	0x08006925
 8006904:	0800692d 	.word	0x0800692d
 8006908:	08006935 	.word	0x08006935
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006912:	e1b6      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691a:	e1b2      	b.n	8006c82 <UART_SetConfig+0x5a6>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006922:	e1ae      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692a:	e1aa      	b.n	8006c82 <UART_SetConfig+0x5a6>
 800692c:	2320      	movs	r3, #32
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006932:	e1a6      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693a:	e1a2      	b.n	8006c82 <UART_SetConfig+0x5a6>
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006942:	e19e      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a35      	ldr	r2, [pc, #212]	; (8006a20 <UART_SetConfig+0x344>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d130      	bne.n	80069b0 <UART_SetConfig+0x2d4>
 800694e:	4b31      	ldr	r3, [pc, #196]	; (8006a14 <UART_SetConfig+0x338>)
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b05      	cmp	r3, #5
 8006958:	d826      	bhi.n	80069a8 <UART_SetConfig+0x2cc>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <UART_SetConfig+0x284>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006979 	.word	0x08006979
 8006964:	08006981 	.word	0x08006981
 8006968:	08006989 	.word	0x08006989
 800696c:	08006991 	.word	0x08006991
 8006970:	08006999 	.word	0x08006999
 8006974:	080069a1 	.word	0x080069a1
 8006978:	2300      	movs	r3, #0
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697e:	e180      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006980:	2304      	movs	r3, #4
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006986:	e17c      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006988:	2308      	movs	r3, #8
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698e:	e178      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006990:	2310      	movs	r3, #16
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006996:	e174      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006998:	2320      	movs	r3, #32
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699e:	e170      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80069a0:	2340      	movs	r3, #64	; 0x40
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a6:	e16c      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80069a8:	2380      	movs	r3, #128	; 0x80
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ae:	e168      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <UART_SetConfig+0x348>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d142      	bne.n	8006a40 <UART_SetConfig+0x364>
 80069ba:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <UART_SetConfig+0x338>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d838      	bhi.n	8006a38 <UART_SetConfig+0x35c>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0x2f0>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069e5 	.word	0x080069e5
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a29 	.word	0x08006a29
 80069e0:	08006a31 	.word	0x08006a31
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ea:	e14a      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f2:	e146      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fa:	e142      	b.n	8006c82 <UART_SetConfig+0x5a6>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a02:	e13e      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006a04:	cfff69f3 	.word	0xcfff69f3
 8006a08:	58000c00 	.word	0x58000c00
 8006a0c:	11fff4ff 	.word	0x11fff4ff
 8006a10:	40011000 	.word	0x40011000
 8006a14:	58024400 	.word	0x58024400
 8006a18:	40004400 	.word	0x40004400
 8006a1c:	40004800 	.word	0x40004800
 8006a20:	40004c00 	.word	0x40004c00
 8006a24:	40005000 	.word	0x40005000
 8006a28:	2320      	movs	r3, #32
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2e:	e128      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006a30:	2340      	movs	r3, #64	; 0x40
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a36:	e124      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006a38:	2380      	movs	r3, #128	; 0x80
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3e:	e120      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4acb      	ldr	r2, [pc, #812]	; (8006d74 <UART_SetConfig+0x698>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d176      	bne.n	8006b38 <UART_SetConfig+0x45c>
 8006a4a:	4bcb      	ldr	r3, [pc, #812]	; (8006d78 <UART_SetConfig+0x69c>)
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a52:	2b28      	cmp	r3, #40	; 0x28
 8006a54:	d86c      	bhi.n	8006b30 <UART_SetConfig+0x454>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <UART_SetConfig+0x380>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006b01 	.word	0x08006b01
 8006a60:	08006b31 	.word	0x08006b31
 8006a64:	08006b31 	.word	0x08006b31
 8006a68:	08006b31 	.word	0x08006b31
 8006a6c:	08006b31 	.word	0x08006b31
 8006a70:	08006b31 	.word	0x08006b31
 8006a74:	08006b31 	.word	0x08006b31
 8006a78:	08006b31 	.word	0x08006b31
 8006a7c:	08006b09 	.word	0x08006b09
 8006a80:	08006b31 	.word	0x08006b31
 8006a84:	08006b31 	.word	0x08006b31
 8006a88:	08006b31 	.word	0x08006b31
 8006a8c:	08006b31 	.word	0x08006b31
 8006a90:	08006b31 	.word	0x08006b31
 8006a94:	08006b31 	.word	0x08006b31
 8006a98:	08006b31 	.word	0x08006b31
 8006a9c:	08006b11 	.word	0x08006b11
 8006aa0:	08006b31 	.word	0x08006b31
 8006aa4:	08006b31 	.word	0x08006b31
 8006aa8:	08006b31 	.word	0x08006b31
 8006aac:	08006b31 	.word	0x08006b31
 8006ab0:	08006b31 	.word	0x08006b31
 8006ab4:	08006b31 	.word	0x08006b31
 8006ab8:	08006b31 	.word	0x08006b31
 8006abc:	08006b19 	.word	0x08006b19
 8006ac0:	08006b31 	.word	0x08006b31
 8006ac4:	08006b31 	.word	0x08006b31
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006b31 	.word	0x08006b31
 8006ad0:	08006b31 	.word	0x08006b31
 8006ad4:	08006b31 	.word	0x08006b31
 8006ad8:	08006b31 	.word	0x08006b31
 8006adc:	08006b21 	.word	0x08006b21
 8006ae0:	08006b31 	.word	0x08006b31
 8006ae4:	08006b31 	.word	0x08006b31
 8006ae8:	08006b31 	.word	0x08006b31
 8006aec:	08006b31 	.word	0x08006b31
 8006af0:	08006b31 	.word	0x08006b31
 8006af4:	08006b31 	.word	0x08006b31
 8006af8:	08006b31 	.word	0x08006b31
 8006afc:	08006b29 	.word	0x08006b29
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e0bc      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b08:	2304      	movs	r3, #4
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e0b8      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b10:	2308      	movs	r3, #8
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e0b4      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e0b0      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b20:	2320      	movs	r3, #32
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b26:	e0ac      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2e:	e0a8      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b30:	2380      	movs	r3, #128	; 0x80
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b36:	e0a4      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a8f      	ldr	r2, [pc, #572]	; (8006d7c <UART_SetConfig+0x6a0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d130      	bne.n	8006ba4 <UART_SetConfig+0x4c8>
 8006b42:	4b8d      	ldr	r3, [pc, #564]	; (8006d78 <UART_SetConfig+0x69c>)
 8006b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	d826      	bhi.n	8006b9c <UART_SetConfig+0x4c0>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <UART_SetConfig+0x478>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b6d 	.word	0x08006b6d
 8006b58:	08006b75 	.word	0x08006b75
 8006b5c:	08006b7d 	.word	0x08006b7d
 8006b60:	08006b85 	.word	0x08006b85
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e086      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b74:	2304      	movs	r3, #4
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7a:	e082      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b82:	e07e      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8a:	e07a      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b92:	e076      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b94:	2340      	movs	r3, #64	; 0x40
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9a:	e072      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006b9c:	2380      	movs	r3, #128	; 0x80
 8006b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba2:	e06e      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a75      	ldr	r2, [pc, #468]	; (8006d80 <UART_SetConfig+0x6a4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d130      	bne.n	8006c10 <UART_SetConfig+0x534>
 8006bae:	4b72      	ldr	r3, [pc, #456]	; (8006d78 <UART_SetConfig+0x69c>)
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	d826      	bhi.n	8006c08 <UART_SetConfig+0x52c>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <UART_SetConfig+0x4e4>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bd9 	.word	0x08006bd9
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	08006be9 	.word	0x08006be9
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006bf9 	.word	0x08006bf9
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bde:	e050      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006be0:	2304      	movs	r3, #4
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be6:	e04c      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006be8:	2308      	movs	r3, #8
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bee:	e048      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf6:	e044      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfe:	e040      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c06:	e03c      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c08:	2380      	movs	r3, #128	; 0x80
 8006c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0e:	e038      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a5b      	ldr	r2, [pc, #364]	; (8006d84 <UART_SetConfig+0x6a8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d130      	bne.n	8006c7c <UART_SetConfig+0x5a0>
 8006c1a:	4b57      	ldr	r3, [pc, #348]	; (8006d78 <UART_SetConfig+0x69c>)
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	d826      	bhi.n	8006c74 <UART_SetConfig+0x598>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x550>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c45 	.word	0x08006c45
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	08006c55 	.word	0x08006c55
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	2302      	movs	r3, #2
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4a:	e01a      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c52:	e016      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c54:	2308      	movs	r3, #8
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5a:	e012      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c62:	e00e      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c64:	2320      	movs	r3, #32
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6a:	e00a      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c6c:	2340      	movs	r3, #64	; 0x40
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c72:	e006      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7a:	e002      	b.n	8006c82 <UART_SetConfig+0x5a6>
 8006c7c:	2380      	movs	r3, #128	; 0x80
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a3f      	ldr	r2, [pc, #252]	; (8006d84 <UART_SetConfig+0x6a8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	f040 80f8 	bne.w	8006e7e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	dc46      	bgt.n	8006d24 <UART_SetConfig+0x648>
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	f2c0 8082 	blt.w	8006da0 <UART_SetConfig+0x6c4>
 8006c9c:	3b02      	subs	r3, #2
 8006c9e:	2b1e      	cmp	r3, #30
 8006ca0:	d87e      	bhi.n	8006da0 <UART_SetConfig+0x6c4>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0x5cc>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006d2b 	.word	0x08006d2b
 8006cac:	08006da1 	.word	0x08006da1
 8006cb0:	08006d33 	.word	0x08006d33
 8006cb4:	08006da1 	.word	0x08006da1
 8006cb8:	08006da1 	.word	0x08006da1
 8006cbc:	08006da1 	.word	0x08006da1
 8006cc0:	08006d43 	.word	0x08006d43
 8006cc4:	08006da1 	.word	0x08006da1
 8006cc8:	08006da1 	.word	0x08006da1
 8006ccc:	08006da1 	.word	0x08006da1
 8006cd0:	08006da1 	.word	0x08006da1
 8006cd4:	08006da1 	.word	0x08006da1
 8006cd8:	08006da1 	.word	0x08006da1
 8006cdc:	08006da1 	.word	0x08006da1
 8006ce0:	08006d53 	.word	0x08006d53
 8006ce4:	08006da1 	.word	0x08006da1
 8006ce8:	08006da1 	.word	0x08006da1
 8006cec:	08006da1 	.word	0x08006da1
 8006cf0:	08006da1 	.word	0x08006da1
 8006cf4:	08006da1 	.word	0x08006da1
 8006cf8:	08006da1 	.word	0x08006da1
 8006cfc:	08006da1 	.word	0x08006da1
 8006d00:	08006da1 	.word	0x08006da1
 8006d04:	08006da1 	.word	0x08006da1
 8006d08:	08006da1 	.word	0x08006da1
 8006d0c:	08006da1 	.word	0x08006da1
 8006d10:	08006da1 	.word	0x08006da1
 8006d14:	08006da1 	.word	0x08006da1
 8006d18:	08006da1 	.word	0x08006da1
 8006d1c:	08006da1 	.word	0x08006da1
 8006d20:	08006d93 	.word	0x08006d93
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d037      	beq.n	8006d98 <UART_SetConfig+0x6bc>
 8006d28:	e03a      	b.n	8006da0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d2a:	f7fd feed 	bl	8004b08 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d30:	e03c      	b.n	8006dac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fd fefc 	bl	8004b34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d40:	e034      	b.n	8006dac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d42:	f107 0318 	add.w	r3, r7, #24
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe f848 	bl	8004ddc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d50:	e02c      	b.n	8006dac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <UART_SetConfig+0x69c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d5e:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <UART_SetConfig+0x69c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	4a07      	ldr	r2, [pc, #28]	; (8006d88 <UART_SetConfig+0x6ac>)
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d70:	e01c      	b.n	8006dac <UART_SetConfig+0x6d0>
 8006d72:	bf00      	nop
 8006d74:	40011400 	.word	0x40011400
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	40007800 	.word	0x40007800
 8006d80:	40007c00 	.word	0x40007c00
 8006d84:	58000c00 	.word	0x58000c00
 8006d88:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006d8c:	4b9d      	ldr	r3, [pc, #628]	; (8007004 <UART_SetConfig+0x928>)
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d90:	e00c      	b.n	8006dac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d92:	4b9d      	ldr	r3, [pc, #628]	; (8007008 <UART_SetConfig+0x92c>)
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d96:	e009      	b.n	8006dac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9e:	e005      	b.n	8006dac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006daa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 81de 	beq.w	8007170 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	4a94      	ldr	r2, [pc, #592]	; (800700c <UART_SetConfig+0x930>)
 8006dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	4413      	add	r3, r2
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d305      	bcc.n	8006de4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d903      	bls.n	8006dec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006dea:	e1c1      	b.n	8007170 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dee:	2200      	movs	r2, #0
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	60fa      	str	r2, [r7, #12]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	4a84      	ldr	r2, [pc, #528]	; (800700c <UART_SetConfig+0x930>)
 8006dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2200      	movs	r2, #0
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e0e:	f7f9 fabf 	bl	8000390 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	020b      	lsls	r3, r1, #8
 8006e24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e28:	0202      	lsls	r2, r0, #8
 8006e2a:	6979      	ldr	r1, [r7, #20]
 8006e2c:	6849      	ldr	r1, [r1, #4]
 8006e2e:	0849      	lsrs	r1, r1, #1
 8006e30:	2000      	movs	r0, #0
 8006e32:	460c      	mov	r4, r1
 8006e34:	4605      	mov	r5, r0
 8006e36:	eb12 0804 	adds.w	r8, r2, r4
 8006e3a:	eb43 0905 	adc.w	r9, r3, r5
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	469a      	mov	sl, r3
 8006e46:	4693      	mov	fp, r2
 8006e48:	4652      	mov	r2, sl
 8006e4a:	465b      	mov	r3, fp
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4649      	mov	r1, r9
 8006e50:	f7f9 fa9e 	bl	8000390 <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4613      	mov	r3, r2
 8006e5a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e62:	d308      	bcc.n	8006e76 <UART_SetConfig+0x79a>
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6a:	d204      	bcs.n	8006e76 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e72:	60da      	str	r2, [r3, #12]
 8006e74:	e17c      	b.n	8007170 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e7c:	e178      	b.n	8007170 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e86:	f040 80c5 	bne.w	8007014 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006e8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	dc48      	bgt.n	8006f24 <UART_SetConfig+0x848>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	db7b      	blt.n	8006f8e <UART_SetConfig+0x8b2>
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d879      	bhi.n	8006f8e <UART_SetConfig+0x8b2>
 8006e9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0x7c4>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006f2b 	.word	0x08006f2b
 8006ea4:	08006f33 	.word	0x08006f33
 8006ea8:	08006f8f 	.word	0x08006f8f
 8006eac:	08006f8f 	.word	0x08006f8f
 8006eb0:	08006f3b 	.word	0x08006f3b
 8006eb4:	08006f8f 	.word	0x08006f8f
 8006eb8:	08006f8f 	.word	0x08006f8f
 8006ebc:	08006f8f 	.word	0x08006f8f
 8006ec0:	08006f4b 	.word	0x08006f4b
 8006ec4:	08006f8f 	.word	0x08006f8f
 8006ec8:	08006f8f 	.word	0x08006f8f
 8006ecc:	08006f8f 	.word	0x08006f8f
 8006ed0:	08006f8f 	.word	0x08006f8f
 8006ed4:	08006f8f 	.word	0x08006f8f
 8006ed8:	08006f8f 	.word	0x08006f8f
 8006edc:	08006f8f 	.word	0x08006f8f
 8006ee0:	08006f5b 	.word	0x08006f5b
 8006ee4:	08006f8f 	.word	0x08006f8f
 8006ee8:	08006f8f 	.word	0x08006f8f
 8006eec:	08006f8f 	.word	0x08006f8f
 8006ef0:	08006f8f 	.word	0x08006f8f
 8006ef4:	08006f8f 	.word	0x08006f8f
 8006ef8:	08006f8f 	.word	0x08006f8f
 8006efc:	08006f8f 	.word	0x08006f8f
 8006f00:	08006f8f 	.word	0x08006f8f
 8006f04:	08006f8f 	.word	0x08006f8f
 8006f08:	08006f8f 	.word	0x08006f8f
 8006f0c:	08006f8f 	.word	0x08006f8f
 8006f10:	08006f8f 	.word	0x08006f8f
 8006f14:	08006f8f 	.word	0x08006f8f
 8006f18:	08006f8f 	.word	0x08006f8f
 8006f1c:	08006f8f 	.word	0x08006f8f
 8006f20:	08006f81 	.word	0x08006f81
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d02e      	beq.n	8006f86 <UART_SetConfig+0x8aa>
 8006f28:	e031      	b.n	8006f8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2a:	f7fc fe11 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 8006f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f30:	e033      	b.n	8006f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f32:	f7fc fe23 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 8006f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f38:	e02f      	b.n	8006f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fd fdf8 	bl	8004b34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f48:	e027      	b.n	8006f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f4a:	f107 0318 	add.w	r3, r7, #24
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fd ff44 	bl	8004ddc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f58:	e01f      	b.n	8006f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f5a:	4b2d      	ldr	r3, [pc, #180]	; (8007010 <UART_SetConfig+0x934>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f66:	4b2a      	ldr	r3, [pc, #168]	; (8007010 <UART_SetConfig+0x934>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	08db      	lsrs	r3, r3, #3
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	4a24      	ldr	r2, [pc, #144]	; (8007004 <UART_SetConfig+0x928>)
 8006f72:	fa22 f303 	lsr.w	r3, r2, r3
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f78:	e00f      	b.n	8006f9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <UART_SetConfig+0x928>)
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7e:	e00c      	b.n	8006f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f80:	4b21      	ldr	r3, [pc, #132]	; (8007008 <UART_SetConfig+0x92c>)
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f84:	e009      	b.n	8006f9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8c:	e005      	b.n	8006f9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80e7 	beq.w	8007170 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	4a19      	ldr	r2, [pc, #100]	; (800700c <UART_SetConfig+0x930>)
 8006fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fac:	461a      	mov	r2, r3
 8006fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fb4:	005a      	lsls	r2, r3, #1
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	441a      	add	r2, r3
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	2b0f      	cmp	r3, #15
 8006fcc:	d916      	bls.n	8006ffc <UART_SetConfig+0x920>
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd4:	d212      	bcs.n	8006ffc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f023 030f 	bic.w	r3, r3, #15
 8006fde:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ff8:	60da      	str	r2, [r3, #12]
 8006ffa:	e0b9      	b.n	8007170 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007002:	e0b5      	b.n	8007170 <UART_SetConfig+0xa94>
 8007004:	03d09000 	.word	0x03d09000
 8007008:	003d0900 	.word	0x003d0900
 800700c:	0800ae10 	.word	0x0800ae10
 8007010:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007014:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007018:	2b20      	cmp	r3, #32
 800701a:	dc49      	bgt.n	80070b0 <UART_SetConfig+0x9d4>
 800701c:	2b00      	cmp	r3, #0
 800701e:	db7c      	blt.n	800711a <UART_SetConfig+0xa3e>
 8007020:	2b20      	cmp	r3, #32
 8007022:	d87a      	bhi.n	800711a <UART_SetConfig+0xa3e>
 8007024:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0x950>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	080070b7 	.word	0x080070b7
 8007030:	080070bf 	.word	0x080070bf
 8007034:	0800711b 	.word	0x0800711b
 8007038:	0800711b 	.word	0x0800711b
 800703c:	080070c7 	.word	0x080070c7
 8007040:	0800711b 	.word	0x0800711b
 8007044:	0800711b 	.word	0x0800711b
 8007048:	0800711b 	.word	0x0800711b
 800704c:	080070d7 	.word	0x080070d7
 8007050:	0800711b 	.word	0x0800711b
 8007054:	0800711b 	.word	0x0800711b
 8007058:	0800711b 	.word	0x0800711b
 800705c:	0800711b 	.word	0x0800711b
 8007060:	0800711b 	.word	0x0800711b
 8007064:	0800711b 	.word	0x0800711b
 8007068:	0800711b 	.word	0x0800711b
 800706c:	080070e7 	.word	0x080070e7
 8007070:	0800711b 	.word	0x0800711b
 8007074:	0800711b 	.word	0x0800711b
 8007078:	0800711b 	.word	0x0800711b
 800707c:	0800711b 	.word	0x0800711b
 8007080:	0800711b 	.word	0x0800711b
 8007084:	0800711b 	.word	0x0800711b
 8007088:	0800711b 	.word	0x0800711b
 800708c:	0800711b 	.word	0x0800711b
 8007090:	0800711b 	.word	0x0800711b
 8007094:	0800711b 	.word	0x0800711b
 8007098:	0800711b 	.word	0x0800711b
 800709c:	0800711b 	.word	0x0800711b
 80070a0:	0800711b 	.word	0x0800711b
 80070a4:	0800711b 	.word	0x0800711b
 80070a8:	0800711b 	.word	0x0800711b
 80070ac:	0800710d 	.word	0x0800710d
 80070b0:	2b40      	cmp	r3, #64	; 0x40
 80070b2:	d02e      	beq.n	8007112 <UART_SetConfig+0xa36>
 80070b4:	e031      	b.n	800711a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b6:	f7fc fd4b 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 80070ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070bc:	e033      	b.n	8007126 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070be:	f7fc fd5d 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 80070c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070c4:	e02f      	b.n	8007126 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fd fd32 	bl	8004b34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d4:	e027      	b.n	8007126 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070d6:	f107 0318 	add.w	r3, r7, #24
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fd fe7e 	bl	8004ddc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070e4:	e01f      	b.n	8007126 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e6:	4b2d      	ldr	r3, [pc, #180]	; (800719c <UART_SetConfig+0xac0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070f2:	4b2a      	ldr	r3, [pc, #168]	; (800719c <UART_SetConfig+0xac0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	08db      	lsrs	r3, r3, #3
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	4a28      	ldr	r2, [pc, #160]	; (80071a0 <UART_SetConfig+0xac4>)
 80070fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007104:	e00f      	b.n	8007126 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007106:	4b26      	ldr	r3, [pc, #152]	; (80071a0 <UART_SetConfig+0xac4>)
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800710a:	e00c      	b.n	8007126 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800710c:	4b25      	ldr	r3, [pc, #148]	; (80071a4 <UART_SetConfig+0xac8>)
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007110:	e009      	b.n	8007126 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007118:	e005      	b.n	8007126 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007124:	bf00      	nop
    }

    if (pclk != 0U)
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d021      	beq.n	8007170 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	4a1d      	ldr	r2, [pc, #116]	; (80071a8 <UART_SetConfig+0xacc>)
 8007132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007136:	461a      	mov	r2, r3
 8007138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713a:	fbb3 f2f2 	udiv	r2, r3, r2
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	441a      	add	r2, r3
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	fbb2 f3f3 	udiv	r3, r2, r3
 800714e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b0f      	cmp	r3, #15
 8007154:	d909      	bls.n	800716a <UART_SetConfig+0xa8e>
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715c:	d205      	bcs.n	800716a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	b29a      	uxth	r2, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60da      	str	r2, [r3, #12]
 8007168:	e002      	b.n	8007170 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2201      	movs	r2, #1
 8007174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2201      	movs	r2, #1
 800717c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2200      	movs	r2, #0
 8007184:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2200      	movs	r2, #0
 800718a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800718c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007190:	4618      	mov	r0, r3
 8007192:	3748      	adds	r7, #72	; 0x48
 8007194:	46bd      	mov	sp, r7
 8007196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800719a:	bf00      	nop
 800719c:	58024400 	.word	0x58024400
 80071a0:	03d09000 	.word	0x03d09000
 80071a4:	003d0900 	.word	0x003d0900
 80071a8:	0800ae10 	.word	0x0800ae10

080071ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072aa:	d10a      	bne.n	80072c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007300:	f7fa ffbc 	bl	800227c <HAL_GetTick>
 8007304:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d10e      	bne.n	8007332 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f82f 	bl	8007386 <UART_WaitOnFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e025      	b.n	800737e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b04      	cmp	r3, #4
 800733e:	d10e      	bne.n	800735e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f819 	bl	8007386 <UART_WaitOnFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e00f      	b.n	800737e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2220      	movs	r2, #32
 800736a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b09c      	sub	sp, #112	; 0x70
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007396:	e0a9      	b.n	80074ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	f000 80a5 	beq.w	80074ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a2:	f7fa ff6b 	bl	800227c <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d302      	bcc.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80073b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d140      	bne.n	800743a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073cc:	667b      	str	r3, [r7, #100]	; 0x64
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e6      	bne.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	663b      	str	r3, [r7, #96]	; 0x60
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800740a:	64ba      	str	r2, [r7, #72]	; 0x48
 800740c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e5      	bne.n	80073ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e069      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d051      	beq.n	80074ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007456:	d149      	bne.n	80074ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007460:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
 8007482:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e6      	bne.n	8007462 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3308      	adds	r3, #8
 800749a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	613b      	str	r3, [r7, #16]
   return(result);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f023 0301 	bic.w	r3, r3, #1
 80074aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3308      	adds	r3, #8
 80074b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074b4:	623a      	str	r2, [r7, #32]
 80074b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	69f9      	ldr	r1, [r7, #28]
 80074ba:	6a3a      	ldr	r2, [r7, #32]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e5      	bne.n	8007494 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e010      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69da      	ldr	r2, [r3, #28]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	4013      	ands	r3, r2
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	bf0c      	ite	eq
 80074fc:	2301      	moveq	r3, #1
 80074fe:	2300      	movne	r3, #0
 8007500:	b2db      	uxtb	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	429a      	cmp	r2, r3
 8007508:	f43f af46 	beq.w	8007398 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3770      	adds	r7, #112	; 0x70
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_UARTEx_DisableFifoMode+0x16>
 8007528:	2302      	movs	r3, #2
 800752a:	e027      	b.n	800757c <HAL_UARTEx_DisableFifoMode+0x66>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2224      	movs	r2, #36	; 0x24
 8007538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0201 	bic.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800755a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800759c:	2302      	movs	r3, #2
 800759e:	e02d      	b.n	80075fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	; 0x24
 80075ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0201 	bic.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f84f 	bl	8007680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007618:	2302      	movs	r3, #2
 800761a:	e02d      	b.n	8007678 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2224      	movs	r2, #36	; 0x24
 8007628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f811 	bl	8007680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768c:	2b00      	cmp	r3, #0
 800768e:	d108      	bne.n	80076a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076a0:	e031      	b.n	8007706 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076a2:	2310      	movs	r3, #16
 80076a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076a6:	2310      	movs	r3, #16
 80076a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	0e5b      	lsrs	r3, r3, #25
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	0f5b      	lsrs	r3, r3, #29
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	7b3a      	ldrb	r2, [r7, #12]
 80076ce:	4911      	ldr	r1, [pc, #68]	; (8007714 <UARTEx_SetNbDataToProcess+0x94>)
 80076d0:	5c8a      	ldrb	r2, [r1, r2]
 80076d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076d6:	7b3a      	ldrb	r2, [r7, #12]
 80076d8:	490f      	ldr	r1, [pc, #60]	; (8007718 <UARTEx_SetNbDataToProcess+0x98>)
 80076da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	7b7a      	ldrb	r2, [r7, #13]
 80076ec:	4909      	ldr	r1, [pc, #36]	; (8007714 <UARTEx_SetNbDataToProcess+0x94>)
 80076ee:	5c8a      	ldrb	r2, [r1, r2]
 80076f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076f4:	7b7a      	ldrb	r2, [r7, #13]
 80076f6:	4908      	ldr	r1, [pc, #32]	; (8007718 <UARTEx_SetNbDataToProcess+0x98>)
 80076f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80076fe:	b29a      	uxth	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	0800ae28 	.word	0x0800ae28
 8007718:	0800ae30 	.word	0x0800ae30

0800771c <__NVIC_SetPriority>:
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	db0a      	blt.n	8007746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	490c      	ldr	r1, [pc, #48]	; (8007768 <__NVIC_SetPriority+0x4c>)
 8007736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800773a:	0112      	lsls	r2, r2, #4
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	440b      	add	r3, r1
 8007740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007744:	e00a      	b.n	800775c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	4908      	ldr	r1, [pc, #32]	; (800776c <__NVIC_SetPriority+0x50>)
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	3b04      	subs	r3, #4
 8007754:	0112      	lsls	r2, r2, #4
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	440b      	add	r3, r1
 800775a:	761a      	strb	r2, [r3, #24]
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	e000e100 	.word	0xe000e100
 800776c:	e000ed00 	.word	0xe000ed00

08007770 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <SysTick_Handler+0x1c>)
 8007776:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007778:	f002 f984 	bl	8009a84 <xTaskGetSchedulerState>
 800777c:	4603      	mov	r3, r0
 800777e:	2b01      	cmp	r3, #1
 8007780:	d001      	beq.n	8007786 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007782:	f000 fda9 	bl	80082d8 <xPortSysTickHandler>
  }
}
 8007786:	bf00      	nop
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	e000e010 	.word	0xe000e010

08007790 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007794:	2100      	movs	r1, #0
 8007796:	f06f 0004 	mvn.w	r0, #4
 800779a:	f7ff ffbf 	bl	800771c <__NVIC_SetPriority>
#endif
}
 800779e:	bf00      	nop
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077aa:	f3ef 8305 	mrs	r3, IPSR
 80077ae:	603b      	str	r3, [r7, #0]
  return(result);
 80077b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80077b6:	f06f 0305 	mvn.w	r3, #5
 80077ba:	607b      	str	r3, [r7, #4]
 80077bc:	e00c      	b.n	80077d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80077be:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <osKernelInitialize+0x44>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80077c6:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <osKernelInitialize+0x44>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	607b      	str	r3, [r7, #4]
 80077d0:	e002      	b.n	80077d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80077d2:	f04f 33ff 	mov.w	r3, #4294967295
 80077d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077d8:	687b      	ldr	r3, [r7, #4]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	240002a0 	.word	0x240002a0

080077ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077f2:	f3ef 8305 	mrs	r3, IPSR
 80077f6:	603b      	str	r3, [r7, #0]
  return(result);
 80077f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <osKernelStart+0x1a>
    stat = osErrorISR;
 80077fe:	f06f 0305 	mvn.w	r3, #5
 8007802:	607b      	str	r3, [r7, #4]
 8007804:	e010      	b.n	8007828 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007806:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <osKernelStart+0x48>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d109      	bne.n	8007822 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800780e:	f7ff ffbf 	bl	8007790 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007812:	4b08      	ldr	r3, [pc, #32]	; (8007834 <osKernelStart+0x48>)
 8007814:	2202      	movs	r2, #2
 8007816:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007818:	f001 fcc6 	bl	80091a8 <vTaskStartScheduler>
      stat = osOK;
 800781c:	2300      	movs	r3, #0
 800781e:	607b      	str	r3, [r7, #4]
 8007820:	e002      	b.n	8007828 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007822:	f04f 33ff 	mov.w	r3, #4294967295
 8007826:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007828:	687b      	ldr	r3, [r7, #4]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	240002a0 	.word	0x240002a0

08007838 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800783e:	f3ef 8305 	mrs	r3, IPSR
 8007842:	603b      	str	r3, [r7, #0]
  return(result);
 8007844:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800784a:	f001 fdd9 	bl	8009400 <xTaskGetTickCountFromISR>
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	e002      	b.n	8007858 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007852:	f001 fdc5 	bl	80093e0 <xTaskGetTickCount>
 8007856:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007858:	687b      	ldr	r3, [r7, #4]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007862:	b580      	push	{r7, lr}
 8007864:	b08e      	sub	sp, #56	; 0x38
 8007866:	af04      	add	r7, sp, #16
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007872:	f3ef 8305 	mrs	r3, IPSR
 8007876:	617b      	str	r3, [r7, #20]
  return(result);
 8007878:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800787a:	2b00      	cmp	r3, #0
 800787c:	d17e      	bne.n	800797c <osThreadNew+0x11a>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d07b      	beq.n	800797c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007884:	2380      	movs	r3, #128	; 0x80
 8007886:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007888:	2318      	movs	r3, #24
 800788a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800788c:	2300      	movs	r3, #0
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007890:	f04f 33ff 	mov.w	r3, #4294967295
 8007894:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d045      	beq.n	8007928 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <osThreadNew+0x48>
        name = attr->name;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <osThreadNew+0x6e>
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	2b38      	cmp	r3, #56	; 0x38
 80078c2:	d805      	bhi.n	80078d0 <osThreadNew+0x6e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <osThreadNew+0x72>
        return (NULL);
 80078d0:	2300      	movs	r3, #0
 80078d2:	e054      	b.n	800797e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	089b      	lsrs	r3, r3, #2
 80078e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00e      	beq.n	800790a <osThreadNew+0xa8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2bbb      	cmp	r3, #187	; 0xbb
 80078f2:	d90a      	bls.n	800790a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d006      	beq.n	800790a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <osThreadNew+0xa8>
        mem = 1;
 8007904:	2301      	movs	r3, #1
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	e010      	b.n	800792c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10c      	bne.n	800792c <osThreadNew+0xca>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d108      	bne.n	800792c <osThreadNew+0xca>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d104      	bne.n	800792c <osThreadNew+0xca>
          mem = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	e001      	b.n	800792c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d110      	bne.n	8007954 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800793a:	9202      	str	r2, [sp, #8]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	6a3a      	ldr	r2, [r7, #32]
 8007946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f001 fa41 	bl	8008dd0 <xTaskCreateStatic>
 800794e:	4603      	mov	r3, r0
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	e013      	b.n	800797c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d110      	bne.n	800797c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	b29a      	uxth	r2, r3
 800795e:	f107 0310 	add.w	r3, r7, #16
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f001 fa8c 	bl	8008e8a <xTaskCreate>
 8007972:	4603      	mov	r3, r0
 8007974:	2b01      	cmp	r3, #1
 8007976:	d001      	beq.n	800797c <osThreadNew+0x11a>
            hTask = NULL;
 8007978:	2300      	movs	r3, #0
 800797a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800797c:	693b      	ldr	r3, [r7, #16]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3728      	adds	r7, #40	; 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800798e:	f3ef 8305 	mrs	r3, IPSR
 8007992:	60bb      	str	r3, [r7, #8]
  return(result);
 8007994:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <osDelay+0x1c>
    stat = osErrorISR;
 800799a:	f06f 0305 	mvn.w	r3, #5
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	e007      	b.n	80079b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fbc7 	bl	8009140 <vTaskDelay>
    }
  }

  return (stat);
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4a07      	ldr	r2, [pc, #28]	; (80079e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80079cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4a06      	ldr	r2, [pc, #24]	; (80079ec <vApplicationGetIdleTaskMemory+0x30>)
 80079d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	601a      	str	r2, [r3, #0]
}
 80079da:	bf00      	nop
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	240002a4 	.word	0x240002a4
 80079ec:	24000360 	.word	0x24000360

080079f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8007a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	4a06      	ldr	r2, [pc, #24]	; (8007a20 <vApplicationGetTimerTaskMemory+0x30>)
 8007a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a0e:	601a      	str	r2, [r3, #0]
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	24000560 	.word	0x24000560
 8007a20:	2400061c 	.word	0x2400061c

08007a24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a30:	f001 fc2a 	bl	8009288 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a34:	4b5b      	ldr	r3, [pc, #364]	; (8007ba4 <pvPortMalloc+0x180>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a3c:	f000 f920 	bl	8007c80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a40:	4b59      	ldr	r3, [pc, #356]	; (8007ba8 <pvPortMalloc+0x184>)
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4013      	ands	r3, r2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 8093 	bne.w	8007b74 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01d      	beq.n	8007a90 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a54:	2208      	movs	r2, #8
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d014      	beq.n	8007a90 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f023 0307 	bic.w	r3, r3, #7
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d06e      	beq.n	8007b74 <pvPortMalloc+0x150>
 8007a96:	4b45      	ldr	r3, [pc, #276]	; (8007bac <pvPortMalloc+0x188>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d869      	bhi.n	8007b74 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aa0:	4b43      	ldr	r3, [pc, #268]	; (8007bb0 <pvPortMalloc+0x18c>)
 8007aa2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007aa4:	4b42      	ldr	r3, [pc, #264]	; (8007bb0 <pvPortMalloc+0x18c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aaa:	e004      	b.n	8007ab6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d903      	bls.n	8007ac8 <pvPortMalloc+0xa4>
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1f1      	bne.n	8007aac <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ac8:	4b36      	ldr	r3, [pc, #216]	; (8007ba4 <pvPortMalloc+0x180>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d050      	beq.n	8007b74 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2208      	movs	r2, #8
 8007ad8:	4413      	add	r3, r2
 8007ada:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	1ad2      	subs	r2, r2, r3
 8007aec:	2308      	movs	r3, #8
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d91f      	bls.n	8007b34 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <pvPortMalloc+0xf8>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	613b      	str	r3, [r7, #16]
}
 8007b18:	bf00      	nop
 8007b1a:	e7fe      	b.n	8007b1a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	1ad2      	subs	r2, r2, r3
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b2e:	69b8      	ldr	r0, [r7, #24]
 8007b30:	f000 f908 	bl	8007d44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b34:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <pvPortMalloc+0x188>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	4a1b      	ldr	r2, [pc, #108]	; (8007bac <pvPortMalloc+0x188>)
 8007b40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b42:	4b1a      	ldr	r3, [pc, #104]	; (8007bac <pvPortMalloc+0x188>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <pvPortMalloc+0x190>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d203      	bcs.n	8007b56 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b4e:	4b17      	ldr	r3, [pc, #92]	; (8007bac <pvPortMalloc+0x188>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a18      	ldr	r2, [pc, #96]	; (8007bb4 <pvPortMalloc+0x190>)
 8007b54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <pvPortMalloc+0x184>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b6a:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <pvPortMalloc+0x194>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	4a11      	ldr	r2, [pc, #68]	; (8007bb8 <pvPortMalloc+0x194>)
 8007b72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b74:	f001 fb96 	bl	80092a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <pvPortMalloc+0x174>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	60fb      	str	r3, [r7, #12]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <pvPortMalloc+0x172>
	return pvReturn;
 8007b98:	69fb      	ldr	r3, [r7, #28]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3728      	adds	r7, #40	; 0x28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	24004624 	.word	0x24004624
 8007ba8:	24004638 	.word	0x24004638
 8007bac:	24004628 	.word	0x24004628
 8007bb0:	2400461c 	.word	0x2400461c
 8007bb4:	2400462c 	.word	0x2400462c
 8007bb8:	24004630 	.word	0x24004630

08007bbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d04d      	beq.n	8007c6a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bce:	2308      	movs	r3, #8
 8007bd0:	425b      	negs	r3, r3
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	4b24      	ldr	r3, [pc, #144]	; (8007c74 <vPortFree+0xb8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4013      	ands	r3, r2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <vPortFree+0x44>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	60fb      	str	r3, [r7, #12]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <vPortFree+0x62>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	60bb      	str	r3, [r7, #8]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <vPortFree+0xb8>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01e      	beq.n	8007c6a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d11a      	bne.n	8007c6a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <vPortFree+0xb8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	401a      	ands	r2, r3
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c44:	f001 fb20 	bl	8009288 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <vPortFree+0xbc>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4413      	add	r3, r2
 8007c52:	4a09      	ldr	r2, [pc, #36]	; (8007c78 <vPortFree+0xbc>)
 8007c54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f000 f874 	bl	8007d44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c5c:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <vPortFree+0xc0>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3301      	adds	r3, #1
 8007c62:	4a06      	ldr	r2, [pc, #24]	; (8007c7c <vPortFree+0xc0>)
 8007c64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c66:	f001 fb1d 	bl	80092a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c6a:	bf00      	nop
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	24004638 	.word	0x24004638
 8007c78:	24004628 	.word	0x24004628
 8007c7c:	24004634 	.word	0x24004634

08007c80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c86:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c8c:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <prvHeapInit+0xac>)
 8007c8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3307      	adds	r3, #7
 8007c9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	4a1f      	ldr	r2, [pc, #124]	; (8007d2c <prvHeapInit+0xac>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cb8:	4a1d      	ldr	r2, [pc, #116]	; (8007d30 <prvHeapInit+0xb0>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <prvHeapInit+0xb0>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4413      	add	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ccc:	2208      	movs	r2, #8
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4a15      	ldr	r2, [pc, #84]	; (8007d34 <prvHeapInit+0xb4>)
 8007ce0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ce2:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <prvHeapInit+0xb4>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cea:	4b12      	ldr	r3, [pc, #72]	; (8007d34 <prvHeapInit+0xb4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	1ad2      	subs	r2, r2, r3
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d00:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <prvHeapInit+0xb4>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <prvHeapInit+0xb8>)
 8007d0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <prvHeapInit+0xbc>)
 8007d16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <prvHeapInit+0xc0>)
 8007d1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d1e:	601a      	str	r2, [r3, #0]
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	24000a1c 	.word	0x24000a1c
 8007d30:	2400461c 	.word	0x2400461c
 8007d34:	24004624 	.word	0x24004624
 8007d38:	2400462c 	.word	0x2400462c
 8007d3c:	24004628 	.word	0x24004628
 8007d40:	24004638 	.word	0x24004638

08007d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d4c:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <prvInsertBlockIntoFreeList+0xac>)
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	e002      	b.n	8007d58 <prvInsertBlockIntoFreeList+0x14>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d8f7      	bhi.n	8007d52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d108      	bne.n	8007d86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	441a      	add	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d118      	bne.n	8007dcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b15      	ldr	r3, [pc, #84]	; (8007df4 <prvInsertBlockIntoFreeList+0xb0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d00d      	beq.n	8007dc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	441a      	add	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	e008      	b.n	8007dd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <prvInsertBlockIntoFreeList+0xb0>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	e003      	b.n	8007dd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d002      	beq.n	8007de2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	2400461c 	.word	0x2400461c
 8007df4:	24004624 	.word	0x24004624

08007df8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f103 0208 	add.w	r2, r3, #8
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f103 0208 	add.w	r2, r3, #8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f103 0208 	add.w	r2, r3, #8
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e52:	b480      	push	{r7}
 8007e54:	b085      	sub	sp, #20
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	601a      	str	r2, [r3, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb0:	d103      	bne.n	8007eba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	e00c      	b.n	8007ed4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e002      	b.n	8007ec8 <vListInsert+0x2e>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d2f6      	bcs.n	8007ec2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	601a      	str	r2, [r3, #0]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6892      	ldr	r2, [r2, #8]
 8007f22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6852      	ldr	r2, [r2, #4]
 8007f2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d103      	bne.n	8007f40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	1e5a      	subs	r2, r3, #1
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3b04      	subs	r3, #4
 8007f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f023 0201 	bic.w	r2, r3, #1
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f90:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <pxPortInitialiseStack+0x64>)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3b14      	subs	r3, #20
 8007f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3b04      	subs	r3, #4
 8007fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f06f 0202 	mvn.w	r2, #2
 8007fae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3b20      	subs	r3, #32
 8007fb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	08007fc9 	.word	0x08007fc9

08007fc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <prvTaskExitError+0x54>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d00a      	beq.n	8007ff2 <prvTaskExitError+0x2a>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60fb      	str	r3, [r7, #12]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <prvTaskExitError+0x28>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60bb      	str	r3, [r7, #8]
}
 8008004:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008006:	bf00      	nop
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0fc      	beq.n	8008008 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	24000010 	.word	0x24000010

08008020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <pxCurrentTCBConst2>)
 8008022:	6819      	ldr	r1, [r3, #0]
 8008024:	6808      	ldr	r0, [r1, #0]
 8008026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	f380 8809 	msr	PSP, r0
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f380 8811 	msr	BASEPRI, r0
 800803a:	4770      	bx	lr
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst2>:
 8008040:	24004684 	.word	0x24004684
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008048:	4808      	ldr	r0, [pc, #32]	; (800806c <prvPortStartFirstTask+0x24>)
 800804a:	6800      	ldr	r0, [r0, #0]
 800804c:	6800      	ldr	r0, [r0, #0]
 800804e:	f380 8808 	msr	MSP, r0
 8008052:	f04f 0000 	mov.w	r0, #0
 8008056:	f380 8814 	msr	CONTROL, r0
 800805a:	b662      	cpsie	i
 800805c:	b661      	cpsie	f
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	df00      	svc	0
 8008068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800806a:	bf00      	nop
 800806c:	e000ed08 	.word	0xe000ed08

08008070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008076:	4b46      	ldr	r3, [pc, #280]	; (8008190 <xPortStartScheduler+0x120>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a46      	ldr	r2, [pc, #280]	; (8008194 <xPortStartScheduler+0x124>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10a      	bne.n	8008096 <xPortStartScheduler+0x26>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	613b      	str	r3, [r7, #16]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008096:	4b3e      	ldr	r3, [pc, #248]	; (8008190 <xPortStartScheduler+0x120>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a3f      	ldr	r2, [pc, #252]	; (8008198 <xPortStartScheduler+0x128>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d10a      	bne.n	80080b6 <xPortStartScheduler+0x46>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	60fb      	str	r3, [r7, #12]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080b6:	4b39      	ldr	r3, [pc, #228]	; (800819c <xPortStartScheduler+0x12c>)
 80080b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	22ff      	movs	r2, #255	; 0xff
 80080c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	4b31      	ldr	r3, [pc, #196]	; (80081a0 <xPortStartScheduler+0x130>)
 80080dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080de:	4b31      	ldr	r3, [pc, #196]	; (80081a4 <xPortStartScheduler+0x134>)
 80080e0:	2207      	movs	r2, #7
 80080e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080e4:	e009      	b.n	80080fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80080e6:	4b2f      	ldr	r3, [pc, #188]	; (80081a4 <xPortStartScheduler+0x134>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	4a2d      	ldr	r2, [pc, #180]	; (80081a4 <xPortStartScheduler+0x134>)
 80080ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d0ef      	beq.n	80080e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008106:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <xPortStartScheduler+0x134>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f1c3 0307 	rsb	r3, r3, #7
 800810e:	2b04      	cmp	r3, #4
 8008110:	d00a      	beq.n	8008128 <xPortStartScheduler+0xb8>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	60bb      	str	r3, [r7, #8]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008128:	4b1e      	ldr	r3, [pc, #120]	; (80081a4 <xPortStartScheduler+0x134>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	4a1d      	ldr	r2, [pc, #116]	; (80081a4 <xPortStartScheduler+0x134>)
 8008130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008132:	4b1c      	ldr	r3, [pc, #112]	; (80081a4 <xPortStartScheduler+0x134>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800813a:	4a1a      	ldr	r2, [pc, #104]	; (80081a4 <xPortStartScheduler+0x134>)
 800813c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	b2da      	uxtb	r2, r3
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008146:	4b18      	ldr	r3, [pc, #96]	; (80081a8 <xPortStartScheduler+0x138>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <xPortStartScheduler+0x138>)
 800814c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008152:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <xPortStartScheduler+0x138>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a14      	ldr	r2, [pc, #80]	; (80081a8 <xPortStartScheduler+0x138>)
 8008158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800815c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800815e:	f000 f8dd 	bl	800831c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <xPortStartScheduler+0x13c>)
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008168:	f000 f8fc 	bl	8008364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800816c:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <xPortStartScheduler+0x140>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a0f      	ldr	r2, [pc, #60]	; (80081b0 <xPortStartScheduler+0x140>)
 8008172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008178:	f7ff ff66 	bl	8008048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800817c:	f001 fa0c 	bl	8009598 <vTaskSwitchContext>
	prvTaskExitError();
 8008180:	f7ff ff22 	bl	8007fc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	e000ed00 	.word	0xe000ed00
 8008194:	410fc271 	.word	0x410fc271
 8008198:	410fc270 	.word	0x410fc270
 800819c:	e000e400 	.word	0xe000e400
 80081a0:	2400463c 	.word	0x2400463c
 80081a4:	24004640 	.word	0x24004640
 80081a8:	e000ed20 	.word	0xe000ed20
 80081ac:	24000010 	.word	0x24000010
 80081b0:	e000ef34 	.word	0xe000ef34

080081b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	607b      	str	r3, [r7, #4]
}
 80081cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081ce:	4b0f      	ldr	r3, [pc, #60]	; (800820c <vPortEnterCritical+0x58>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3301      	adds	r3, #1
 80081d4:	4a0d      	ldr	r2, [pc, #52]	; (800820c <vPortEnterCritical+0x58>)
 80081d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081d8:	4b0c      	ldr	r3, [pc, #48]	; (800820c <vPortEnterCritical+0x58>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d10f      	bne.n	8008200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <vPortEnterCritical+0x5c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <vPortEnterCritical+0x4c>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	603b      	str	r3, [r7, #0]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <vPortEnterCritical+0x4a>
	}
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	24000010 	.word	0x24000010
 8008210:	e000ed04 	.word	0xe000ed04

08008214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800821a:	4b12      	ldr	r3, [pc, #72]	; (8008264 <vPortExitCritical+0x50>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <vPortExitCritical+0x24>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	607b      	str	r3, [r7, #4]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008238:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <vPortExitCritical+0x50>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3b01      	subs	r3, #1
 800823e:	4a09      	ldr	r2, [pc, #36]	; (8008264 <vPortExitCritical+0x50>)
 8008240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008242:	4b08      	ldr	r3, [pc, #32]	; (8008264 <vPortExitCritical+0x50>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d105      	bne.n	8008256 <vPortExitCritical+0x42>
 800824a:	2300      	movs	r3, #0
 800824c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	24000010 	.word	0x24000010
	...

08008270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008270:	f3ef 8009 	mrs	r0, PSP
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <pxCurrentTCBConst>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	f01e 0f10 	tst.w	lr, #16
 8008280:	bf08      	it	eq
 8008282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828a:	6010      	str	r0, [r2, #0]
 800828c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008294:	f380 8811 	msr	BASEPRI, r0
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f001 f97a 	bl	8009598 <vTaskSwitchContext>
 80082a4:	f04f 0000 	mov.w	r0, #0
 80082a8:	f380 8811 	msr	BASEPRI, r0
 80082ac:	bc09      	pop	{r0, r3}
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	6808      	ldr	r0, [r1, #0]
 80082b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b6:	f01e 0f10 	tst.w	lr, #16
 80082ba:	bf08      	it	eq
 80082bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082c0:	f380 8809 	msr	PSP, r0
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	f3af 8000 	nop.w

080082d0 <pxCurrentTCBConst>:
 80082d0:	24004684 	.word	0x24004684
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop

080082d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	607b      	str	r3, [r7, #4]
}
 80082f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082f2:	f001 f897 	bl	8009424 <xTaskIncrementTick>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <xPortSysTickHandler+0x40>)
 80082fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	2300      	movs	r3, #0
 8008306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	f383 8811 	msr	BASEPRI, r3
}
 800830e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <vPortSetupTimerInterrupt+0x34>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008326:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <vPortSetupTimerInterrupt+0x38>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800832c:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <vPortSetupTimerInterrupt+0x3c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a0a      	ldr	r2, [pc, #40]	; (800835c <vPortSetupTimerInterrupt+0x40>)
 8008332:	fba2 2303 	umull	r2, r3, r2, r3
 8008336:	099b      	lsrs	r3, r3, #6
 8008338:	4a09      	ldr	r2, [pc, #36]	; (8008360 <vPortSetupTimerInterrupt+0x44>)
 800833a:	3b01      	subs	r3, #1
 800833c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800833e:	4b04      	ldr	r3, [pc, #16]	; (8008350 <vPortSetupTimerInterrupt+0x34>)
 8008340:	2207      	movs	r2, #7
 8008342:	601a      	str	r2, [r3, #0]
}
 8008344:	bf00      	nop
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	e000e010 	.word	0xe000e010
 8008354:	e000e018 	.word	0xe000e018
 8008358:	24000000 	.word	0x24000000
 800835c:	10624dd3 	.word	0x10624dd3
 8008360:	e000e014 	.word	0xe000e014

08008364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008374 <vPortEnableVFP+0x10>
 8008368:	6801      	ldr	r1, [r0, #0]
 800836a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800836e:	6001      	str	r1, [r0, #0]
 8008370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008372:	bf00      	nop
 8008374:	e000ed88 	.word	0xe000ed88

08008378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800837e:	f3ef 8305 	mrs	r3, IPSR
 8008382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b0f      	cmp	r3, #15
 8008388:	d914      	bls.n	80083b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800838a:	4a17      	ldr	r2, [pc, #92]	; (80083e8 <vPortValidateInterruptPriority+0x70>)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008394:	4b15      	ldr	r3, [pc, #84]	; (80083ec <vPortValidateInterruptPriority+0x74>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	7afa      	ldrb	r2, [r7, #11]
 800839a:	429a      	cmp	r2, r3
 800839c:	d20a      	bcs.n	80083b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	607b      	str	r3, [r7, #4]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083b4:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <vPortValidateInterruptPriority+0x78>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083bc:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <vPortValidateInterruptPriority+0x7c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d90a      	bls.n	80083da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	603b      	str	r3, [r7, #0]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <vPortValidateInterruptPriority+0x60>
	}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	e000e3f0 	.word	0xe000e3f0
 80083ec:	2400463c 	.word	0x2400463c
 80083f0:	e000ed0c 	.word	0xe000ed0c
 80083f4:	24004640 	.word	0x24004640

080083f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <xQueueGenericReset+0x2a>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60bb      	str	r3, [r7, #8]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008422:	f7ff fec7 	bl	80081b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842e:	68f9      	ldr	r1, [r7, #12]
 8008430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008432:	fb01 f303 	mul.w	r3, r1, r3
 8008436:	441a      	add	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008452:	3b01      	subs	r3, #1
 8008454:	68f9      	ldr	r1, [r7, #12]
 8008456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008458:	fb01 f303 	mul.w	r3, r1, r3
 800845c:	441a      	add	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	22ff      	movs	r2, #255	; 0xff
 8008466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22ff      	movs	r2, #255	; 0xff
 800846e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d114      	bne.n	80084a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01a      	beq.n	80084b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3310      	adds	r3, #16
 8008484:	4618      	mov	r0, r3
 8008486:	f001 f93b 	bl	8009700 <xTaskRemoveFromEventList>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d012      	beq.n	80084b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <xQueueGenericReset+0xcc>)
 8008492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	e009      	b.n	80084b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3310      	adds	r3, #16
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fca6 	bl	8007df8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3324      	adds	r3, #36	; 0x24
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fca1 	bl	8007df8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084b6:	f7ff fead 	bl	8008214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084ba:	2301      	movs	r3, #1
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	e000ed04 	.word	0xe000ed04

080084c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08e      	sub	sp, #56	; 0x38
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <xQueueGenericCreateStatic+0x52>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <xQueueGenericCreateStatic+0x56>
 800851a:	2301      	movs	r3, #1
 800851c:	e000      	b.n	8008520 <xQueueGenericCreateStatic+0x58>
 800851e:	2300      	movs	r3, #0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10a      	bne.n	800853a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	623b      	str	r3, [r7, #32]
}
 8008536:	bf00      	nop
 8008538:	e7fe      	b.n	8008538 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <xQueueGenericCreateStatic+0x7e>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <xQueueGenericCreateStatic+0x82>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <xQueueGenericCreateStatic+0x84>
 800854a:	2300      	movs	r3, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	61fb      	str	r3, [r7, #28]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008566:	2350      	movs	r3, #80	; 0x50
 8008568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b50      	cmp	r3, #80	; 0x50
 800856e:	d00a      	beq.n	8008586 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	61bb      	str	r3, [r7, #24]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008586:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00d      	beq.n	80085ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800859a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	4613      	mov	r3, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	68b9      	ldr	r1, [r7, #8]
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 f805 	bl	80085b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3730      	adds	r7, #48	; 0x30
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d103      	bne.n	80085d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e002      	b.n	80085da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085e6:	2101      	movs	r1, #1
 80085e8:	69b8      	ldr	r0, [r7, #24]
 80085ea:	f7ff ff05 	bl	80083f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08e      	sub	sp, #56	; 0x38
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800860e:	2300      	movs	r3, #0
 8008610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueGenericSend+0x32>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d103      	bne.n	8008640 <xQueueGenericSend+0x40>
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <xQueueGenericSend+0x44>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <xQueueGenericSend+0x46>
 8008644:	2300      	movs	r3, #0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <xQueueGenericSend+0x60>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d103      	bne.n	800866e <xQueueGenericSend+0x6e>
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <xQueueGenericSend+0x72>
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <xQueueGenericSend+0x74>
 8008672:	2300      	movs	r3, #0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <xQueueGenericSend+0x8e>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	623b      	str	r3, [r7, #32]
}
 800868a:	bf00      	nop
 800868c:	e7fe      	b.n	800868c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800868e:	f001 f9f9 	bl	8009a84 <xTaskGetSchedulerState>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <xQueueGenericSend+0x9e>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <xQueueGenericSend+0xa2>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <xQueueGenericSend+0xa4>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xQueueGenericSend+0xbe>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	61fb      	str	r3, [r7, #28]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086be:	f7ff fd79 	bl	80081b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d302      	bcc.n	80086d4 <xQueueGenericSend+0xd4>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d129      	bne.n	8008728 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086da:	f000 fa0b 	bl	8008af4 <prvCopyDataToQueue>
 80086de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d010      	beq.n	800870a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	3324      	adds	r3, #36	; 0x24
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 f807 	bl	8009700 <xTaskRemoveFromEventList>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d013      	beq.n	8008720 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086f8:	4b3f      	ldr	r3, [pc, #252]	; (80087f8 <xQueueGenericSend+0x1f8>)
 80086fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	e00a      	b.n	8008720 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d007      	beq.n	8008720 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008710:	4b39      	ldr	r3, [pc, #228]	; (80087f8 <xQueueGenericSend+0x1f8>)
 8008712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008720:	f7ff fd78 	bl	8008214 <vPortExitCritical>
				return pdPASS;
 8008724:	2301      	movs	r3, #1
 8008726:	e063      	b.n	80087f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d103      	bne.n	8008736 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800872e:	f7ff fd71 	bl	8008214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008732:	2300      	movs	r3, #0
 8008734:	e05c      	b.n	80087f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800873c:	f107 0314 	add.w	r3, r7, #20
 8008740:	4618      	mov	r0, r3
 8008742:	f001 f841 	bl	80097c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008746:	2301      	movs	r3, #1
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800874a:	f7ff fd63 	bl	8008214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800874e:	f000 fd9b 	bl	8009288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008752:	f7ff fd2f 	bl	80081b4 <vPortEnterCritical>
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800875c:	b25b      	sxtb	r3, r3
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008762:	d103      	bne.n	800876c <xQueueGenericSend+0x16c>
 8008764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008772:	b25b      	sxtb	r3, r3
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d103      	bne.n	8008782 <xQueueGenericSend+0x182>
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008782:	f7ff fd47 	bl	8008214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008786:	1d3a      	adds	r2, r7, #4
 8008788:	f107 0314 	add.w	r3, r7, #20
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f001 f830 	bl	80097f4 <xTaskCheckForTimeOut>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d124      	bne.n	80087e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800879a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800879c:	f000 faa2 	bl	8008ce4 <prvIsQueueFull>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d018      	beq.n	80087d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	3310      	adds	r3, #16
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 ff56 	bl	8009660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087b6:	f000 fa2d 	bl	8008c14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087ba:	f000 fd73 	bl	80092a4 <xTaskResumeAll>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f47f af7c 	bne.w	80086be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80087c6:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <xQueueGenericSend+0x1f8>)
 80087c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	e772      	b.n	80086be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087da:	f000 fa1b 	bl	8008c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087de:	f000 fd61 	bl	80092a4 <xTaskResumeAll>
 80087e2:	e76c      	b.n	80086be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087e6:	f000 fa15 	bl	8008c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ea:	f000 fd5b 	bl	80092a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3738      	adds	r7, #56	; 0x38
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b090      	sub	sp, #64	; 0x40
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008826:	bf00      	nop
 8008828:	e7fe      	b.n	8008828 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d103      	bne.n	8008838 <xQueueGenericSendFromISR+0x3c>
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <xQueueGenericSendFromISR+0x40>
 8008838:	2301      	movs	r3, #1
 800883a:	e000      	b.n	800883e <xQueueGenericSendFromISR+0x42>
 800883c:	2300      	movs	r3, #0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d103      	bne.n	8008866 <xQueueGenericSendFromISR+0x6a>
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <xQueueGenericSendFromISR+0x6e>
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <xQueueGenericSendFromISR+0x70>
 800886a:	2300      	movs	r3, #0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	623b      	str	r3, [r7, #32]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008886:	f7ff fd77 	bl	8008378 <vPortValidateInterruptPriority>
	__asm volatile
 800888a:	f3ef 8211 	mrs	r2, BASEPRI
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	61fa      	str	r2, [r7, #28]
 80088a0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80088a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d302      	bcc.n	80088b8 <xQueueGenericSendFromISR+0xbc>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d12f      	bne.n	8008918 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088ce:	f000 f911 	bl	8008af4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80088d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088da:	d112      	bne.n	8008902 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d016      	beq.n	8008912 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	3324      	adds	r3, #36	; 0x24
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 ff09 	bl	8009700 <xTaskRemoveFromEventList>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00e      	beq.n	8008912 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00b      	beq.n	8008912 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	e007      	b.n	8008912 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008902:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008906:	3301      	adds	r3, #1
 8008908:	b2db      	uxtb	r3, r3
 800890a:	b25a      	sxtb	r2, r3
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008912:	2301      	movs	r3, #1
 8008914:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008916:	e001      	b.n	800891c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008918:	2300      	movs	r3, #0
 800891a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f383 8811 	msr	BASEPRI, r3
}
 8008926:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800892a:	4618      	mov	r0, r3
 800892c:	3740      	adds	r7, #64	; 0x40
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08c      	sub	sp, #48	; 0x30
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008940:	2300      	movs	r3, #0
 8008942:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10a      	bne.n	8008964 <xQueueReceive+0x30>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	623b      	str	r3, [r7, #32]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <xQueueReceive+0x3e>
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <xQueueReceive+0x42>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <xQueueReceive+0x44>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <xQueueReceive+0x5e>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	61fb      	str	r3, [r7, #28]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008992:	f001 f877 	bl	8009a84 <xTaskGetSchedulerState>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <xQueueReceive+0x6e>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <xQueueReceive+0x72>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <xQueueReceive+0x74>
 80089a6:	2300      	movs	r3, #0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <xQueueReceive+0x8e>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	61bb      	str	r3, [r7, #24]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089c2:	f7ff fbf7 	bl	80081b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01f      	beq.n	8008a12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089d2:	68b9      	ldr	r1, [r7, #8]
 80089d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089d6:	f000 f8f7 	bl	8008bc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	1e5a      	subs	r2, r3, #1
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00f      	beq.n	8008a0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	3310      	adds	r3, #16
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fe86 	bl	8009700 <xTaskRemoveFromEventList>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089fa:	4b3d      	ldr	r3, [pc, #244]	; (8008af0 <xQueueReceive+0x1bc>)
 80089fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a0a:	f7ff fc03 	bl	8008214 <vPortExitCritical>
				return pdPASS;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e069      	b.n	8008ae6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d103      	bne.n	8008a20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a18:	f7ff fbfc 	bl	8008214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e062      	b.n	8008ae6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a26:	f107 0310 	add.w	r3, r7, #16
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fecc 	bl	80097c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a34:	f7ff fbee 	bl	8008214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a38:	f000 fc26 	bl	8009288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a3c:	f7ff fbba 	bl	80081b4 <vPortEnterCritical>
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4c:	d103      	bne.n	8008a56 <xQueueReceive+0x122>
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a5c:	b25b      	sxtb	r3, r3
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	d103      	bne.n	8008a6c <xQueueReceive+0x138>
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a6c:	f7ff fbd2 	bl	8008214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a70:	1d3a      	adds	r2, r7, #4
 8008a72:	f107 0310 	add.w	r3, r7, #16
 8008a76:	4611      	mov	r1, r2
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 febb 	bl	80097f4 <xTaskCheckForTimeOut>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d123      	bne.n	8008acc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a86:	f000 f917 	bl	8008cb8 <prvIsQueueEmpty>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d017      	beq.n	8008ac0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	3324      	adds	r3, #36	; 0x24
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fde1 	bl	8009660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aa0:	f000 f8b8 	bl	8008c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008aa4:	f000 fbfe 	bl	80092a4 <xTaskResumeAll>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d189      	bne.n	80089c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008aae:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <xQueueReceive+0x1bc>)
 8008ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	e780      	b.n	80089c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac2:	f000 f8a7 	bl	8008c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ac6:	f000 fbed 	bl	80092a4 <xTaskResumeAll>
 8008aca:	e77a      	b.n	80089c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ace:	f000 f8a1 	bl	8008c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ad2:	f000 fbe7 	bl	80092a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ad8:	f000 f8ee 	bl	8008cb8 <prvIsQueueEmpty>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f43f af6f 	beq.w	80089c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ae4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3730      	adds	r7, #48	; 0x30
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10d      	bne.n	8008b2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d14d      	bne.n	8008bb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 ffce 	bl	8009ac0 <xTaskPriorityDisinherit>
 8008b24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	609a      	str	r2, [r3, #8]
 8008b2c:	e043      	b.n	8008bb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d119      	bne.n	8008b68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6858      	ldr	r0, [r3, #4]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	f001 fbfa 	bl	800a338 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4c:	441a      	add	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	685a      	ldr	r2, [r3, #4]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d32b      	bcc.n	8008bb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	605a      	str	r2, [r3, #4]
 8008b66:	e026      	b.n	8008bb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68d8      	ldr	r0, [r3, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b70:	461a      	mov	r2, r3
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	f001 fbe0 	bl	800a338 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68da      	ldr	r2, [r3, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	425b      	negs	r3, r3
 8008b82:	441a      	add	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	68da      	ldr	r2, [r3, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d207      	bcs.n	8008ba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	425b      	negs	r3, r3
 8008b9e:	441a      	add	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d105      	bne.n	8008bb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008bbe:	697b      	ldr	r3, [r7, #20]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d018      	beq.n	8008c0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be2:	441a      	add	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d303      	bcc.n	8008bfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68d9      	ldr	r1, [r3, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c04:	461a      	mov	r2, r3
 8008c06:	6838      	ldr	r0, [r7, #0]
 8008c08:	f001 fb96 	bl	800a338 <memcpy>
	}
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c1c:	f7ff faca 	bl	80081b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c28:	e011      	b.n	8008c4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d012      	beq.n	8008c58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3324      	adds	r3, #36	; 0x24
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fd62 	bl	8009700 <xTaskRemoveFromEventList>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c42:	f000 fe39 	bl	80098b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dce9      	bgt.n	8008c2a <prvUnlockQueue+0x16>
 8008c56:	e000      	b.n	8008c5a <prvUnlockQueue+0x46>
					break;
 8008c58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	22ff      	movs	r2, #255	; 0xff
 8008c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c62:	f7ff fad7 	bl	8008214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c66:	f7ff faa5 	bl	80081b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c72:	e011      	b.n	8008c98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d012      	beq.n	8008ca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3310      	adds	r3, #16
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 fd3d 	bl	8009700 <xTaskRemoveFromEventList>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c8c:	f000 fe14 	bl	80098b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dce9      	bgt.n	8008c74 <prvUnlockQueue+0x60>
 8008ca0:	e000      	b.n	8008ca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	22ff      	movs	r2, #255	; 0xff
 8008ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008cac:	f7ff fab2 	bl	8008214 <vPortExitCritical>
}
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cc0:	f7ff fa78 	bl	80081b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d102      	bne.n	8008cd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e001      	b.n	8008cd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cd6:	f7ff fa9d 	bl	8008214 <vPortExitCritical>

	return xReturn;
 8008cda:	68fb      	ldr	r3, [r7, #12]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cec:	f7ff fa62 	bl	80081b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d102      	bne.n	8008d02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	e001      	b.n	8008d06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d06:	f7ff fa85 	bl	8008214 <vPortExitCritical>

	return xReturn;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	e014      	b.n	8008d4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d24:	4a0f      	ldr	r2, [pc, #60]	; (8008d64 <vQueueAddToRegistry+0x50>)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10b      	bne.n	8008d48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d30:	490c      	ldr	r1, [pc, #48]	; (8008d64 <vQueueAddToRegistry+0x50>)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d3a:	4a0a      	ldr	r2, [pc, #40]	; (8008d64 <vQueueAddToRegistry+0x50>)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	4413      	add	r3, r2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d46:	e006      	b.n	8008d56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b07      	cmp	r3, #7
 8008d52:	d9e7      	bls.n	8008d24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	24004644 	.word	0x24004644

08008d68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d78:	f7ff fa1c 	bl	80081b4 <vPortEnterCritical>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d82:	b25b      	sxtb	r3, r3
 8008d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d88:	d103      	bne.n	8008d92 <vQueueWaitForMessageRestricted+0x2a>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d98:	b25b      	sxtb	r3, r3
 8008d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9e:	d103      	bne.n	8008da8 <vQueueWaitForMessageRestricted+0x40>
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008da8:	f7ff fa34 	bl	8008214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	3324      	adds	r3, #36	; 0x24
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 fc73 	bl	80096a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008dc2:	6978      	ldr	r0, [r7, #20]
 8008dc4:	f7ff ff26 	bl	8008c14 <prvUnlockQueue>
	}
 8008dc8:	bf00      	nop
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08e      	sub	sp, #56	; 0x38
 8008dd4:	af04      	add	r7, sp, #16
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	623b      	str	r3, [r7, #32]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <xTaskCreateStatic+0x46>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	61fb      	str	r3, [r7, #28]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e16:	23bc      	movs	r3, #188	; 0xbc
 8008e18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	2bbc      	cmp	r3, #188	; 0xbc
 8008e1e:	d00a      	beq.n	8008e36 <xTaskCreateStatic+0x66>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	61bb      	str	r3, [r7, #24]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d01e      	beq.n	8008e7c <xTaskCreateStatic+0xac>
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01b      	beq.n	8008e7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	2202      	movs	r2, #2
 8008e52:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e56:	2300      	movs	r3, #0
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	9302      	str	r3, [sp, #8]
 8008e5e:	f107 0314 	add.w	r3, r7, #20
 8008e62:	9301      	str	r3, [sp, #4]
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 f850 	bl	8008f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e76:	f000 f8f3 	bl	8009060 <prvAddNewTaskToReadyList>
 8008e7a:	e001      	b.n	8008e80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e80:	697b      	ldr	r3, [r7, #20]
	}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3728      	adds	r7, #40	; 0x28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b08c      	sub	sp, #48	; 0x30
 8008e8e:	af04      	add	r7, sp, #16
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	603b      	str	r3, [r7, #0]
 8008e96:	4613      	mov	r3, r2
 8008e98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e9a:	88fb      	ldrh	r3, [r7, #6]
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fdc0 	bl	8007a24 <pvPortMalloc>
 8008ea4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00e      	beq.n	8008eca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008eac:	20bc      	movs	r0, #188	; 0xbc
 8008eae:	f7fe fdb9 	bl	8007a24 <pvPortMalloc>
 8008eb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8008ec0:	e005      	b.n	8008ece <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ec2:	6978      	ldr	r0, [r7, #20]
 8008ec4:	f7fe fe7a 	bl	8007bbc <vPortFree>
 8008ec8:	e001      	b.n	8008ece <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d017      	beq.n	8008f04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008edc:	88fa      	ldrh	r2, [r7, #6]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9303      	str	r3, [sp, #12]
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	9302      	str	r3, [sp, #8]
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68b9      	ldr	r1, [r7, #8]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 f80e 	bl	8008f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ef8:	69f8      	ldr	r0, [r7, #28]
 8008efa:	f000 f8b1 	bl	8009060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008efe:	2301      	movs	r3, #1
 8008f00:	61bb      	str	r3, [r7, #24]
 8008f02:	e002      	b.n	8008f0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f04:	f04f 33ff 	mov.w	r3, #4294967295
 8008f08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3720      	adds	r7, #32
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b088      	sub	sp, #32
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	21a5      	movs	r1, #165	; 0xa5
 8008f2e:	f001 fa11 	bl	800a354 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008f3c:	440b      	add	r3, r1
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	f023 0307 	bic.w	r3, r3, #7
 8008f4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	617b      	str	r3, [r7, #20]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d01f      	beq.n	8008fb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f72:	2300      	movs	r3, #0
 8008f74:	61fb      	str	r3, [r7, #28]
 8008f76:	e012      	b.n	8008f9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	7819      	ldrb	r1, [r3, #0]
 8008f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	3334      	adds	r3, #52	; 0x34
 8008f88:	460a      	mov	r2, r1
 8008f8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d006      	beq.n	8008fa6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	2b0f      	cmp	r3, #15
 8008fa2:	d9e9      	bls.n	8008f78 <prvInitialiseNewTask+0x64>
 8008fa4:	e000      	b.n	8008fa8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008fa6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fb0:	e003      	b.n	8008fba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	2b37      	cmp	r3, #55	; 0x37
 8008fbe:	d901      	bls.n	8008fc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fc0:	2337      	movs	r3, #55	; 0x37
 8008fc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	3304      	adds	r3, #4
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fe ff2c 	bl	8007e38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	3318      	adds	r3, #24
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fe ff27 	bl	8007e38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ffe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	2200      	movs	r2, #0
 800900c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	3354      	adds	r3, #84	; 0x54
 8009014:	2260      	movs	r2, #96	; 0x60
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f001 f99b 	bl	800a354 <memset>
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	4a0c      	ldr	r2, [pc, #48]	; (8009054 <prvInitialiseNewTask+0x140>)
 8009022:	659a      	str	r2, [r3, #88]	; 0x58
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	4a0c      	ldr	r2, [pc, #48]	; (8009058 <prvInitialiseNewTask+0x144>)
 8009028:	65da      	str	r2, [r3, #92]	; 0x5c
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	4a0b      	ldr	r2, [pc, #44]	; (800905c <prvInitialiseNewTask+0x148>)
 800902e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	69b8      	ldr	r0, [r7, #24]
 8009036:	f7fe ff93 	bl	8007f60 <pxPortInitialiseStack>
 800903a:	4602      	mov	r2, r0
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800904a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800904c:	bf00      	nop
 800904e:	3720      	adds	r7, #32
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	0800ae58 	.word	0x0800ae58
 8009058:	0800ae78 	.word	0x0800ae78
 800905c:	0800ae38 	.word	0x0800ae38

08009060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009068:	f7ff f8a4 	bl	80081b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800906c:	4b2d      	ldr	r3, [pc, #180]	; (8009124 <prvAddNewTaskToReadyList+0xc4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	4a2c      	ldr	r2, [pc, #176]	; (8009124 <prvAddNewTaskToReadyList+0xc4>)
 8009074:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009076:	4b2c      	ldr	r3, [pc, #176]	; (8009128 <prvAddNewTaskToReadyList+0xc8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d109      	bne.n	8009092 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800907e:	4a2a      	ldr	r2, [pc, #168]	; (8009128 <prvAddNewTaskToReadyList+0xc8>)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009084:	4b27      	ldr	r3, [pc, #156]	; (8009124 <prvAddNewTaskToReadyList+0xc4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d110      	bne.n	80090ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800908c:	f000 fc38 	bl	8009900 <prvInitialiseTaskLists>
 8009090:	e00d      	b.n	80090ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009092:	4b26      	ldr	r3, [pc, #152]	; (800912c <prvAddNewTaskToReadyList+0xcc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800909a:	4b23      	ldr	r3, [pc, #140]	; (8009128 <prvAddNewTaskToReadyList+0xc8>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d802      	bhi.n	80090ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090a8:	4a1f      	ldr	r2, [pc, #124]	; (8009128 <prvAddNewTaskToReadyList+0xc8>)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090ae:	4b20      	ldr	r3, [pc, #128]	; (8009130 <prvAddNewTaskToReadyList+0xd0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3301      	adds	r3, #1
 80090b4:	4a1e      	ldr	r2, [pc, #120]	; (8009130 <prvAddNewTaskToReadyList+0xd0>)
 80090b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090b8:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <prvAddNewTaskToReadyList+0xd0>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4b1b      	ldr	r3, [pc, #108]	; (8009134 <prvAddNewTaskToReadyList+0xd4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d903      	bls.n	80090d4 <prvAddNewTaskToReadyList+0x74>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4a18      	ldr	r2, [pc, #96]	; (8009134 <prvAddNewTaskToReadyList+0xd4>)
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4a15      	ldr	r2, [pc, #84]	; (8009138 <prvAddNewTaskToReadyList+0xd8>)
 80090e2:	441a      	add	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4619      	mov	r1, r3
 80090ea:	4610      	mov	r0, r2
 80090ec:	f7fe feb1 	bl	8007e52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090f0:	f7ff f890 	bl	8008214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090f4:	4b0d      	ldr	r3, [pc, #52]	; (800912c <prvAddNewTaskToReadyList+0xcc>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00e      	beq.n	800911a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <prvAddNewTaskToReadyList+0xc8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	429a      	cmp	r2, r3
 8009108:	d207      	bcs.n	800911a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <prvAddNewTaskToReadyList+0xdc>)
 800910c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	24004b58 	.word	0x24004b58
 8009128:	24004684 	.word	0x24004684
 800912c:	24004b64 	.word	0x24004b64
 8009130:	24004b74 	.word	0x24004b74
 8009134:	24004b60 	.word	0x24004b60
 8009138:	24004688 	.word	0x24004688
 800913c:	e000ed04 	.word	0xe000ed04

08009140 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d017      	beq.n	8009182 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <vTaskDelay+0x60>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <vTaskDelay+0x30>
	__asm volatile
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	60bb      	str	r3, [r7, #8]
}
 800916c:	bf00      	nop
 800916e:	e7fe      	b.n	800916e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009170:	f000 f88a 	bl	8009288 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009174:	2100      	movs	r1, #0
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fd10 	bl	8009b9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800917c:	f000 f892 	bl	80092a4 <xTaskResumeAll>
 8009180:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d107      	bne.n	8009198 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009188:	4b06      	ldr	r3, [pc, #24]	; (80091a4 <vTaskDelay+0x64>)
 800918a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	24004b80 	.word	0x24004b80
 80091a4:	e000ed04 	.word	0xe000ed04

080091a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08a      	sub	sp, #40	; 0x28
 80091ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091b6:	463a      	mov	r2, r7
 80091b8:	1d39      	adds	r1, r7, #4
 80091ba:	f107 0308 	add.w	r3, r7, #8
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fbfc 	bl	80079bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	9202      	str	r2, [sp, #8]
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	2300      	movs	r3, #0
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	2300      	movs	r3, #0
 80091d4:	460a      	mov	r2, r1
 80091d6:	4924      	ldr	r1, [pc, #144]	; (8009268 <vTaskStartScheduler+0xc0>)
 80091d8:	4824      	ldr	r0, [pc, #144]	; (800926c <vTaskStartScheduler+0xc4>)
 80091da:	f7ff fdf9 	bl	8008dd0 <xTaskCreateStatic>
 80091de:	4603      	mov	r3, r0
 80091e0:	4a23      	ldr	r2, [pc, #140]	; (8009270 <vTaskStartScheduler+0xc8>)
 80091e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091e4:	4b22      	ldr	r3, [pc, #136]	; (8009270 <vTaskStartScheduler+0xc8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091ec:	2301      	movs	r3, #1
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	e001      	b.n	80091f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d102      	bne.n	8009202 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091fc:	f000 fd22 	bl	8009c44 <xTimerCreateTimerTask>
 8009200:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d11b      	bne.n	8009240 <vTaskStartScheduler+0x98>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	613b      	str	r3, [r7, #16]
}
 800921a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800921c:	4b15      	ldr	r3, [pc, #84]	; (8009274 <vTaskStartScheduler+0xcc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3354      	adds	r3, #84	; 0x54
 8009222:	4a15      	ldr	r2, [pc, #84]	; (8009278 <vTaskStartScheduler+0xd0>)
 8009224:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <vTaskStartScheduler+0xd4>)
 8009228:	f04f 32ff 	mov.w	r2, #4294967295
 800922c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800922e:	4b14      	ldr	r3, [pc, #80]	; (8009280 <vTaskStartScheduler+0xd8>)
 8009230:	2201      	movs	r2, #1
 8009232:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009234:	4b13      	ldr	r3, [pc, #76]	; (8009284 <vTaskStartScheduler+0xdc>)
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800923a:	f7fe ff19 	bl	8008070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800923e:	e00e      	b.n	800925e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d10a      	bne.n	800925e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	60fb      	str	r3, [r7, #12]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <vTaskStartScheduler+0xb4>
}
 800925e:	bf00      	nop
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	0800ada0 	.word	0x0800ada0
 800926c:	080098d1 	.word	0x080098d1
 8009270:	24004b7c 	.word	0x24004b7c
 8009274:	24004684 	.word	0x24004684
 8009278:	24000014 	.word	0x24000014
 800927c:	24004b78 	.word	0x24004b78
 8009280:	24004b64 	.word	0x24004b64
 8009284:	24004b5c 	.word	0x24004b5c

08009288 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800928c:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <vTaskSuspendAll+0x18>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3301      	adds	r3, #1
 8009292:	4a03      	ldr	r2, [pc, #12]	; (80092a0 <vTaskSuspendAll+0x18>)
 8009294:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009296:	bf00      	nop
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	24004b80 	.word	0x24004b80

080092a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092b2:	4b42      	ldr	r3, [pc, #264]	; (80093bc <xTaskResumeAll+0x118>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10a      	bne.n	80092d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	603b      	str	r3, [r7, #0]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092d0:	f7fe ff70 	bl	80081b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092d4:	4b39      	ldr	r3, [pc, #228]	; (80093bc <xTaskResumeAll+0x118>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3b01      	subs	r3, #1
 80092da:	4a38      	ldr	r2, [pc, #224]	; (80093bc <xTaskResumeAll+0x118>)
 80092dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092de:	4b37      	ldr	r3, [pc, #220]	; (80093bc <xTaskResumeAll+0x118>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d162      	bne.n	80093ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092e6:	4b36      	ldr	r3, [pc, #216]	; (80093c0 <xTaskResumeAll+0x11c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d05e      	beq.n	80093ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092ee:	e02f      	b.n	8009350 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f0:	4b34      	ldr	r3, [pc, #208]	; (80093c4 <xTaskResumeAll+0x120>)
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3318      	adds	r3, #24
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fe05 	bl	8007f0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3304      	adds	r3, #4
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fe00 	bl	8007f0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009310:	4b2d      	ldr	r3, [pc, #180]	; (80093c8 <xTaskResumeAll+0x124>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	429a      	cmp	r2, r3
 8009316:	d903      	bls.n	8009320 <xTaskResumeAll+0x7c>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	4a2a      	ldr	r2, [pc, #168]	; (80093c8 <xTaskResumeAll+0x124>)
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009324:	4613      	mov	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4a27      	ldr	r2, [pc, #156]	; (80093cc <xTaskResumeAll+0x128>)
 800932e:	441a      	add	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3304      	adds	r3, #4
 8009334:	4619      	mov	r1, r3
 8009336:	4610      	mov	r0, r2
 8009338:	f7fe fd8b 	bl	8007e52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009340:	4b23      	ldr	r3, [pc, #140]	; (80093d0 <xTaskResumeAll+0x12c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	429a      	cmp	r2, r3
 8009348:	d302      	bcc.n	8009350 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800934a:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <xTaskResumeAll+0x130>)
 800934c:	2201      	movs	r2, #1
 800934e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009350:	4b1c      	ldr	r3, [pc, #112]	; (80093c4 <xTaskResumeAll+0x120>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1cb      	bne.n	80092f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800935e:	f000 fb71 	bl	8009a44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009362:	4b1d      	ldr	r3, [pc, #116]	; (80093d8 <xTaskResumeAll+0x134>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d010      	beq.n	8009390 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800936e:	f000 f859 	bl	8009424 <xTaskIncrementTick>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009378:	4b16      	ldr	r3, [pc, #88]	; (80093d4 <xTaskResumeAll+0x130>)
 800937a:	2201      	movs	r2, #1
 800937c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3b01      	subs	r3, #1
 8009382:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1f1      	bne.n	800936e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800938a:	4b13      	ldr	r3, [pc, #76]	; (80093d8 <xTaskResumeAll+0x134>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009390:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <xTaskResumeAll+0x130>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d009      	beq.n	80093ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <xTaskResumeAll+0x138>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093ac:	f7fe ff32 	bl	8008214 <vPortExitCritical>

	return xAlreadyYielded;
 80093b0:	68bb      	ldr	r3, [r7, #8]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	24004b80 	.word	0x24004b80
 80093c0:	24004b58 	.word	0x24004b58
 80093c4:	24004b18 	.word	0x24004b18
 80093c8:	24004b60 	.word	0x24004b60
 80093cc:	24004688 	.word	0x24004688
 80093d0:	24004684 	.word	0x24004684
 80093d4:	24004b6c 	.word	0x24004b6c
 80093d8:	24004b68 	.word	0x24004b68
 80093dc:	e000ed04 	.word	0xe000ed04

080093e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093e6:	4b05      	ldr	r3, [pc, #20]	; (80093fc <xTaskGetTickCount+0x1c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093ec:	687b      	ldr	r3, [r7, #4]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	24004b5c 	.word	0x24004b5c

08009400 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009406:	f7fe ffb7 	bl	8008378 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800940a:	2300      	movs	r3, #0
 800940c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800940e:	4b04      	ldr	r3, [pc, #16]	; (8009420 <xTaskGetTickCountFromISR+0x20>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009414:	683b      	ldr	r3, [r7, #0]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	24004b5c 	.word	0x24004b5c

08009424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800942a:	2300      	movs	r3, #0
 800942c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800942e:	4b4f      	ldr	r3, [pc, #316]	; (800956c <xTaskIncrementTick+0x148>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f040 808f 	bne.w	8009556 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009438:	4b4d      	ldr	r3, [pc, #308]	; (8009570 <xTaskIncrementTick+0x14c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3301      	adds	r3, #1
 800943e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009440:	4a4b      	ldr	r2, [pc, #300]	; (8009570 <xTaskIncrementTick+0x14c>)
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d120      	bne.n	800948e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800944c:	4b49      	ldr	r3, [pc, #292]	; (8009574 <xTaskIncrementTick+0x150>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <xTaskIncrementTick+0x48>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	603b      	str	r3, [r7, #0]
}
 8009468:	bf00      	nop
 800946a:	e7fe      	b.n	800946a <xTaskIncrementTick+0x46>
 800946c:	4b41      	ldr	r3, [pc, #260]	; (8009574 <xTaskIncrementTick+0x150>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	4b41      	ldr	r3, [pc, #260]	; (8009578 <xTaskIncrementTick+0x154>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a3f      	ldr	r2, [pc, #252]	; (8009574 <xTaskIncrementTick+0x150>)
 8009478:	6013      	str	r3, [r2, #0]
 800947a:	4a3f      	ldr	r2, [pc, #252]	; (8009578 <xTaskIncrementTick+0x154>)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	4b3e      	ldr	r3, [pc, #248]	; (800957c <xTaskIncrementTick+0x158>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	4a3d      	ldr	r2, [pc, #244]	; (800957c <xTaskIncrementTick+0x158>)
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	f000 fadb 	bl	8009a44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800948e:	4b3c      	ldr	r3, [pc, #240]	; (8009580 <xTaskIncrementTick+0x15c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	429a      	cmp	r2, r3
 8009496:	d349      	bcc.n	800952c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009498:	4b36      	ldr	r3, [pc, #216]	; (8009574 <xTaskIncrementTick+0x150>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d104      	bne.n	80094ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a2:	4b37      	ldr	r3, [pc, #220]	; (8009580 <xTaskIncrementTick+0x15c>)
 80094a4:	f04f 32ff 	mov.w	r2, #4294967295
 80094a8:	601a      	str	r2, [r3, #0]
					break;
 80094aa:	e03f      	b.n	800952c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ac:	4b31      	ldr	r3, [pc, #196]	; (8009574 <xTaskIncrementTick+0x150>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d203      	bcs.n	80094cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094c4:	4a2e      	ldr	r2, [pc, #184]	; (8009580 <xTaskIncrementTick+0x15c>)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094ca:	e02f      	b.n	800952c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fe fd1b 	bl	8007f0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d004      	beq.n	80094e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	3318      	adds	r3, #24
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fd12 	bl	8007f0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ec:	4b25      	ldr	r3, [pc, #148]	; (8009584 <xTaskIncrementTick+0x160>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d903      	bls.n	80094fc <xTaskIncrementTick+0xd8>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	4a22      	ldr	r2, [pc, #136]	; (8009584 <xTaskIncrementTick+0x160>)
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	4613      	mov	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4a1f      	ldr	r2, [pc, #124]	; (8009588 <xTaskIncrementTick+0x164>)
 800950a:	441a      	add	r2, r3
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	3304      	adds	r3, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f7fe fc9d 	bl	8007e52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951c:	4b1b      	ldr	r3, [pc, #108]	; (800958c <xTaskIncrementTick+0x168>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	429a      	cmp	r2, r3
 8009524:	d3b8      	bcc.n	8009498 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009526:	2301      	movs	r3, #1
 8009528:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800952a:	e7b5      	b.n	8009498 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800952c:	4b17      	ldr	r3, [pc, #92]	; (800958c <xTaskIncrementTick+0x168>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009532:	4915      	ldr	r1, [pc, #84]	; (8009588 <xTaskIncrementTick+0x164>)
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d901      	bls.n	8009548 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009544:	2301      	movs	r3, #1
 8009546:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009548:	4b11      	ldr	r3, [pc, #68]	; (8009590 <xTaskIncrementTick+0x16c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009550:	2301      	movs	r3, #1
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e004      	b.n	8009560 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009556:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <xTaskIncrementTick+0x170>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3301      	adds	r3, #1
 800955c:	4a0d      	ldr	r2, [pc, #52]	; (8009594 <xTaskIncrementTick+0x170>)
 800955e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009560:	697b      	ldr	r3, [r7, #20]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	24004b80 	.word	0x24004b80
 8009570:	24004b5c 	.word	0x24004b5c
 8009574:	24004b10 	.word	0x24004b10
 8009578:	24004b14 	.word	0x24004b14
 800957c:	24004b70 	.word	0x24004b70
 8009580:	24004b78 	.word	0x24004b78
 8009584:	24004b60 	.word	0x24004b60
 8009588:	24004688 	.word	0x24004688
 800958c:	24004684 	.word	0x24004684
 8009590:	24004b6c 	.word	0x24004b6c
 8009594:	24004b68 	.word	0x24004b68

08009598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800959e:	4b2a      	ldr	r3, [pc, #168]	; (8009648 <vTaskSwitchContext+0xb0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095a6:	4b29      	ldr	r3, [pc, #164]	; (800964c <vTaskSwitchContext+0xb4>)
 80095a8:	2201      	movs	r2, #1
 80095aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095ac:	e046      	b.n	800963c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80095ae:	4b27      	ldr	r3, [pc, #156]	; (800964c <vTaskSwitchContext+0xb4>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b4:	4b26      	ldr	r3, [pc, #152]	; (8009650 <vTaskSwitchContext+0xb8>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	e010      	b.n	80095de <vTaskSwitchContext+0x46>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	607b      	str	r3, [r7, #4]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <vTaskSwitchContext+0x3e>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3b01      	subs	r3, #1
 80095dc:	60fb      	str	r3, [r7, #12]
 80095de:	491d      	ldr	r1, [pc, #116]	; (8009654 <vTaskSwitchContext+0xbc>)
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0e4      	beq.n	80095bc <vTaskSwitchContext+0x24>
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4a15      	ldr	r2, [pc, #84]	; (8009654 <vTaskSwitchContext+0xbc>)
 80095fe:	4413      	add	r3, r2
 8009600:	60bb      	str	r3, [r7, #8]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	605a      	str	r2, [r3, #4]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	3308      	adds	r3, #8
 8009614:	429a      	cmp	r2, r3
 8009616:	d104      	bne.n	8009622 <vTaskSwitchContext+0x8a>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	4a0b      	ldr	r2, [pc, #44]	; (8009658 <vTaskSwitchContext+0xc0>)
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	4a08      	ldr	r2, [pc, #32]	; (8009650 <vTaskSwitchContext+0xb8>)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009632:	4b09      	ldr	r3, [pc, #36]	; (8009658 <vTaskSwitchContext+0xc0>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3354      	adds	r3, #84	; 0x54
 8009638:	4a08      	ldr	r2, [pc, #32]	; (800965c <vTaskSwitchContext+0xc4>)
 800963a:	6013      	str	r3, [r2, #0]
}
 800963c:	bf00      	nop
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	24004b80 	.word	0x24004b80
 800964c:	24004b6c 	.word	0x24004b6c
 8009650:	24004b60 	.word	0x24004b60
 8009654:	24004688 	.word	0x24004688
 8009658:	24004684 	.word	0x24004684
 800965c:	24000014 	.word	0x24000014

08009660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	60fb      	str	r3, [r7, #12]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009686:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <vTaskPlaceOnEventList+0x44>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3318      	adds	r3, #24
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7fe fc03 	bl	8007e9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009694:	2101      	movs	r1, #1
 8009696:	6838      	ldr	r0, [r7, #0]
 8009698:	f000 fa80 	bl	8009b9c <prvAddCurrentTaskToDelayedList>
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	24004684 	.word	0x24004684

080096a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	617b      	str	r3, [r7, #20]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <vTaskPlaceOnEventListRestricted+0x54>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3318      	adds	r3, #24
 80096d6:	4619      	mov	r1, r3
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7fe fbba 	bl	8007e52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295
 80096e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	68b8      	ldr	r0, [r7, #8]
 80096ee:	f000 fa55 	bl	8009b9c <prvAddCurrentTaskToDelayedList>
	}
 80096f2:	bf00      	nop
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	24004684 	.word	0x24004684

08009700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	60fb      	str	r3, [r7, #12]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	3318      	adds	r3, #24
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fbeb 	bl	8007f0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009736:	4b1e      	ldr	r3, [pc, #120]	; (80097b0 <xTaskRemoveFromEventList+0xb0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d11d      	bne.n	800977a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	3304      	adds	r3, #4
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fbe2 	bl	8007f0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974c:	4b19      	ldr	r3, [pc, #100]	; (80097b4 <xTaskRemoveFromEventList+0xb4>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	429a      	cmp	r2, r3
 8009752:	d903      	bls.n	800975c <xTaskRemoveFromEventList+0x5c>
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	4a16      	ldr	r2, [pc, #88]	; (80097b4 <xTaskRemoveFromEventList+0xb4>)
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4613      	mov	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4a13      	ldr	r2, [pc, #76]	; (80097b8 <xTaskRemoveFromEventList+0xb8>)
 800976a:	441a      	add	r2, r3
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7fe fb6d 	bl	8007e52 <vListInsertEnd>
 8009778:	e005      	b.n	8009786 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	3318      	adds	r3, #24
 800977e:	4619      	mov	r1, r3
 8009780:	480e      	ldr	r0, [pc, #56]	; (80097bc <xTaskRemoveFromEventList+0xbc>)
 8009782:	f7fe fb66 	bl	8007e52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978a:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <xTaskRemoveFromEventList+0xc0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	d905      	bls.n	80097a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009798:	4b0a      	ldr	r3, [pc, #40]	; (80097c4 <xTaskRemoveFromEventList+0xc4>)
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	e001      	b.n	80097a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097a0:	2300      	movs	r3, #0
 80097a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097a4:	697b      	ldr	r3, [r7, #20]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	24004b80 	.word	0x24004b80
 80097b4:	24004b60 	.word	0x24004b60
 80097b8:	24004688 	.word	0x24004688
 80097bc:	24004b18 	.word	0x24004b18
 80097c0:	24004684 	.word	0x24004684
 80097c4:	24004b6c 	.word	0x24004b6c

080097c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097d0:	4b06      	ldr	r3, [pc, #24]	; (80097ec <vTaskInternalSetTimeOutState+0x24>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097d8:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <vTaskInternalSetTimeOutState+0x28>)
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	605a      	str	r2, [r3, #4]
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	24004b70 	.word	0x24004b70
 80097f0:	24004b5c 	.word	0x24004b5c

080097f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10a      	bne.n	800981a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	613b      	str	r3, [r7, #16]
}
 8009816:	bf00      	nop
 8009818:	e7fe      	b.n	8009818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60fb      	str	r3, [r7, #12]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009836:	f7fe fcbd 	bl	80081b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800983a:	4b1d      	ldr	r3, [pc, #116]	; (80098b0 <xTaskCheckForTimeOut+0xbc>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009852:	d102      	bne.n	800985a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009854:	2300      	movs	r3, #0
 8009856:	61fb      	str	r3, [r7, #28]
 8009858:	e023      	b.n	80098a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b15      	ldr	r3, [pc, #84]	; (80098b4 <xTaskCheckForTimeOut+0xc0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d007      	beq.n	8009876 <xTaskCheckForTimeOut+0x82>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	429a      	cmp	r2, r3
 800986e:	d302      	bcc.n	8009876 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009870:	2301      	movs	r3, #1
 8009872:	61fb      	str	r3, [r7, #28]
 8009874:	e015      	b.n	80098a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	429a      	cmp	r2, r3
 800987e:	d20b      	bcs.n	8009898 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	1ad2      	subs	r2, r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7ff ff9b 	bl	80097c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	e004      	b.n	80098a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2200      	movs	r2, #0
 800989c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800989e:	2301      	movs	r3, #1
 80098a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098a2:	f7fe fcb7 	bl	8008214 <vPortExitCritical>

	return xReturn;
 80098a6:	69fb      	ldr	r3, [r7, #28]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3720      	adds	r7, #32
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	24004b5c 	.word	0x24004b5c
 80098b4:	24004b70 	.word	0x24004b70

080098b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098b8:	b480      	push	{r7}
 80098ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098bc:	4b03      	ldr	r3, [pc, #12]	; (80098cc <vTaskMissedYield+0x14>)
 80098be:	2201      	movs	r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
}
 80098c2:	bf00      	nop
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	24004b6c 	.word	0x24004b6c

080098d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098d8:	f000 f852 	bl	8009980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098dc:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <prvIdleTask+0x28>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d9f9      	bls.n	80098d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <prvIdleTask+0x2c>)
 80098e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098f4:	e7f0      	b.n	80098d8 <prvIdleTask+0x8>
 80098f6:	bf00      	nop
 80098f8:	24004688 	.word	0x24004688
 80098fc:	e000ed04 	.word	0xe000ed04

08009900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009906:	2300      	movs	r3, #0
 8009908:	607b      	str	r3, [r7, #4]
 800990a:	e00c      	b.n	8009926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4a12      	ldr	r2, [pc, #72]	; (8009960 <prvInitialiseTaskLists+0x60>)
 8009918:	4413      	add	r3, r2
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fa6c 	bl	8007df8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	3301      	adds	r3, #1
 8009924:	607b      	str	r3, [r7, #4]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b37      	cmp	r3, #55	; 0x37
 800992a:	d9ef      	bls.n	800990c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800992c:	480d      	ldr	r0, [pc, #52]	; (8009964 <prvInitialiseTaskLists+0x64>)
 800992e:	f7fe fa63 	bl	8007df8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009932:	480d      	ldr	r0, [pc, #52]	; (8009968 <prvInitialiseTaskLists+0x68>)
 8009934:	f7fe fa60 	bl	8007df8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009938:	480c      	ldr	r0, [pc, #48]	; (800996c <prvInitialiseTaskLists+0x6c>)
 800993a:	f7fe fa5d 	bl	8007df8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800993e:	480c      	ldr	r0, [pc, #48]	; (8009970 <prvInitialiseTaskLists+0x70>)
 8009940:	f7fe fa5a 	bl	8007df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009944:	480b      	ldr	r0, [pc, #44]	; (8009974 <prvInitialiseTaskLists+0x74>)
 8009946:	f7fe fa57 	bl	8007df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800994a:	4b0b      	ldr	r3, [pc, #44]	; (8009978 <prvInitialiseTaskLists+0x78>)
 800994c:	4a05      	ldr	r2, [pc, #20]	; (8009964 <prvInitialiseTaskLists+0x64>)
 800994e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009950:	4b0a      	ldr	r3, [pc, #40]	; (800997c <prvInitialiseTaskLists+0x7c>)
 8009952:	4a05      	ldr	r2, [pc, #20]	; (8009968 <prvInitialiseTaskLists+0x68>)
 8009954:	601a      	str	r2, [r3, #0]
}
 8009956:	bf00      	nop
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	24004688 	.word	0x24004688
 8009964:	24004ae8 	.word	0x24004ae8
 8009968:	24004afc 	.word	0x24004afc
 800996c:	24004b18 	.word	0x24004b18
 8009970:	24004b2c 	.word	0x24004b2c
 8009974:	24004b44 	.word	0x24004b44
 8009978:	24004b10 	.word	0x24004b10
 800997c:	24004b14 	.word	0x24004b14

08009980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009986:	e019      	b.n	80099bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009988:	f7fe fc14 	bl	80081b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800998c:	4b10      	ldr	r3, [pc, #64]	; (80099d0 <prvCheckTasksWaitingTermination+0x50>)
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3304      	adds	r3, #4
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fab7 	bl	8007f0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800999e:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <prvCheckTasksWaitingTermination+0x54>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	4a0b      	ldr	r2, [pc, #44]	; (80099d4 <prvCheckTasksWaitingTermination+0x54>)
 80099a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099a8:	4b0b      	ldr	r3, [pc, #44]	; (80099d8 <prvCheckTasksWaitingTermination+0x58>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	4a0a      	ldr	r2, [pc, #40]	; (80099d8 <prvCheckTasksWaitingTermination+0x58>)
 80099b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099b2:	f7fe fc2f 	bl	8008214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f810 	bl	80099dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099bc:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <prvCheckTasksWaitingTermination+0x58>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e1      	bne.n	8009988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	24004b2c 	.word	0x24004b2c
 80099d4:	24004b58 	.word	0x24004b58
 80099d8:	24004b40 	.word	0x24004b40

080099dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3354      	adds	r3, #84	; 0x54
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fd5d 	bl	800a4a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d108      	bne.n	8009a0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe f8dd 	bl	8007bbc <vPortFree>
				vPortFree( pxTCB );
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fe f8da 	bl	8007bbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a08:	e018      	b.n	8009a3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d103      	bne.n	8009a1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7fe f8d1 	bl	8007bbc <vPortFree>
	}
 8009a1a:	e00f      	b.n	8009a3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d00a      	beq.n	8009a3c <prvDeleteTCB+0x60>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	60fb      	str	r3, [r7, #12]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <prvDeleteTCB+0x5e>
	}
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <prvResetNextTaskUnblockTime+0x38>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a54:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <prvResetNextTaskUnblockTime+0x3c>)
 8009a56:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a5c:	e008      	b.n	8009a70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <prvResetNextTaskUnblockTime+0x38>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4a04      	ldr	r2, [pc, #16]	; (8009a80 <prvResetNextTaskUnblockTime+0x3c>)
 8009a6e:	6013      	str	r3, [r2, #0]
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	24004b10 	.word	0x24004b10
 8009a80:	24004b78 	.word	0x24004b78

08009a84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <xTaskGetSchedulerState+0x34>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a92:	2301      	movs	r3, #1
 8009a94:	607b      	str	r3, [r7, #4]
 8009a96:	e008      	b.n	8009aaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a98:	4b08      	ldr	r3, [pc, #32]	; (8009abc <xTaskGetSchedulerState+0x38>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	607b      	str	r3, [r7, #4]
 8009aa4:	e001      	b.n	8009aaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009aaa:	687b      	ldr	r3, [r7, #4]
	}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	24004b64 	.word	0x24004b64
 8009abc:	24004b80 	.word	0x24004b80

08009ac0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009acc:	2300      	movs	r3, #0
 8009ace:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d056      	beq.n	8009b84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ad6:	4b2e      	ldr	r3, [pc, #184]	; (8009b90 <xTaskPriorityDisinherit+0xd0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d00a      	beq.n	8009af6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	60fb      	str	r3, [r7, #12]
}
 8009af2:	bf00      	nop
 8009af4:	e7fe      	b.n	8009af4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10a      	bne.n	8009b14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	60bb      	str	r3, [r7, #8]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b18:	1e5a      	subs	r2, r3, #1
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d02c      	beq.n	8009b84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d128      	bne.n	8009b84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	3304      	adds	r3, #4
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe f9e8 	bl	8007f0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b54:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <xTaskPriorityDisinherit+0xd4>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d903      	bls.n	8009b64 <xTaskPriorityDisinherit+0xa4>
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b60:	4a0c      	ldr	r2, [pc, #48]	; (8009b94 <xTaskPriorityDisinherit+0xd4>)
 8009b62:	6013      	str	r3, [r2, #0]
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b68:	4613      	mov	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4a09      	ldr	r2, [pc, #36]	; (8009b98 <xTaskPriorityDisinherit+0xd8>)
 8009b72:	441a      	add	r2, r3
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	f7fe f969 	bl	8007e52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b80:	2301      	movs	r3, #1
 8009b82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b84:	697b      	ldr	r3, [r7, #20]
	}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	24004684 	.word	0x24004684
 8009b94:	24004b60 	.word	0x24004b60
 8009b98:	24004688 	.word	0x24004688

08009b9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ba6:	4b21      	ldr	r3, [pc, #132]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x90>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bac:	4b20      	ldr	r3, [pc, #128]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe f9aa 	bl	8007f0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d10a      	bne.n	8009bd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc6:	4b1a      	ldr	r3, [pc, #104]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4819      	ldr	r0, [pc, #100]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x98>)
 8009bd0:	f7fe f93f 	bl	8007e52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bd4:	e026      	b.n	8009c24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4413      	add	r3, r2
 8009bdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bde:	4b14      	ldr	r3, [pc, #80]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d209      	bcs.n	8009c02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	4b0f      	ldr	r3, [pc, #60]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f7fe f94d 	bl	8007e9a <vListInsert>
}
 8009c00:	e010      	b.n	8009c24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c02:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b0a      	ldr	r3, [pc, #40]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4610      	mov	r0, r2
 8009c10:	f7fe f943 	bl	8007e9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c14:	4b0a      	ldr	r3, [pc, #40]	; (8009c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d202      	bcs.n	8009c24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c1e:	4a08      	ldr	r2, [pc, #32]	; (8009c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6013      	str	r3, [r2, #0]
}
 8009c24:	bf00      	nop
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	24004b5c 	.word	0x24004b5c
 8009c30:	24004684 	.word	0x24004684
 8009c34:	24004b44 	.word	0x24004b44
 8009c38:	24004b14 	.word	0x24004b14
 8009c3c:	24004b10 	.word	0x24004b10
 8009c40:	24004b78 	.word	0x24004b78

08009c44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08a      	sub	sp, #40	; 0x28
 8009c48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c4e:	f000 fb07 	bl	800a260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c52:	4b1c      	ldr	r3, [pc, #112]	; (8009cc4 <xTimerCreateTimerTask+0x80>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d021      	beq.n	8009c9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c62:	1d3a      	adds	r2, r7, #4
 8009c64:	f107 0108 	add.w	r1, r7, #8
 8009c68:	f107 030c 	add.w	r3, r7, #12
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd febf 	bl	80079f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	9202      	str	r2, [sp, #8]
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2300      	movs	r3, #0
 8009c82:	460a      	mov	r2, r1
 8009c84:	4910      	ldr	r1, [pc, #64]	; (8009cc8 <xTimerCreateTimerTask+0x84>)
 8009c86:	4811      	ldr	r0, [pc, #68]	; (8009ccc <xTimerCreateTimerTask+0x88>)
 8009c88:	f7ff f8a2 	bl	8008dd0 <xTaskCreateStatic>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	4a10      	ldr	r2, [pc, #64]	; (8009cd0 <xTimerCreateTimerTask+0x8c>)
 8009c90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c92:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <xTimerCreateTimerTask+0x8c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	613b      	str	r3, [r7, #16]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009cba:	697b      	ldr	r3, [r7, #20]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	24004bb4 	.word	0x24004bb4
 8009cc8:	0800ada8 	.word	0x0800ada8
 8009ccc:	08009e09 	.word	0x08009e09
 8009cd0:	24004bb8 	.word	0x24004bb8

08009cd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08a      	sub	sp, #40	; 0x28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	623b      	str	r3, [r7, #32]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d02:	4b1a      	ldr	r3, [pc, #104]	; (8009d6c <xTimerGenericCommand+0x98>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d02a      	beq.n	8009d60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2b05      	cmp	r3, #5
 8009d1a:	dc18      	bgt.n	8009d4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d1c:	f7ff feb2 	bl	8009a84 <xTaskGetSchedulerState>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d109      	bne.n	8009d3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d26:	4b11      	ldr	r3, [pc, #68]	; (8009d6c <xTimerGenericCommand+0x98>)
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	f107 0110 	add.w	r1, r7, #16
 8009d2e:	2300      	movs	r3, #0
 8009d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d32:	f7fe fc65 	bl	8008600 <xQueueGenericSend>
 8009d36:	6278      	str	r0, [r7, #36]	; 0x24
 8009d38:	e012      	b.n	8009d60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d3a:	4b0c      	ldr	r3, [pc, #48]	; (8009d6c <xTimerGenericCommand+0x98>)
 8009d3c:	6818      	ldr	r0, [r3, #0]
 8009d3e:	f107 0110 	add.w	r1, r7, #16
 8009d42:	2300      	movs	r3, #0
 8009d44:	2200      	movs	r2, #0
 8009d46:	f7fe fc5b 	bl	8008600 <xQueueGenericSend>
 8009d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d4c:	e008      	b.n	8009d60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d4e:	4b07      	ldr	r3, [pc, #28]	; (8009d6c <xTimerGenericCommand+0x98>)
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f107 0110 	add.w	r1, r7, #16
 8009d56:	2300      	movs	r3, #0
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	f7fe fd4f 	bl	80087fc <xQueueGenericSendFromISR>
 8009d5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3728      	adds	r7, #40	; 0x28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	24004bb4 	.word	0x24004bb4

08009d70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af02      	add	r7, sp, #8
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d7a:	4b22      	ldr	r3, [pc, #136]	; (8009e04 <prvProcessExpiredTimer+0x94>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe f8bf 	bl	8007f0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d94:	f003 0304 	and.w	r3, r3, #4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d022      	beq.n	8009de2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	699a      	ldr	r2, [r3, #24]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	18d1      	adds	r1, r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	6978      	ldr	r0, [r7, #20]
 8009daa:	f000 f8d1 	bl	8009f50 <prvInsertTimerInActiveList>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01f      	beq.n	8009df4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db4:	2300      	movs	r3, #0
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	2300      	movs	r3, #0
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	6978      	ldr	r0, [r7, #20]
 8009dc0:	f7ff ff88 	bl	8009cd4 <xTimerGenericCommand>
 8009dc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d113      	bne.n	8009df4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	60fb      	str	r3, [r7, #12]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009de8:	f023 0301 	bic.w	r3, r3, #1
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	6978      	ldr	r0, [r7, #20]
 8009dfa:	4798      	blx	r3
}
 8009dfc:	bf00      	nop
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	24004bac 	.word	0x24004bac

08009e08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e10:	f107 0308 	add.w	r3, r7, #8
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 f857 	bl	8009ec8 <prvGetNextExpireTime>
 8009e1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f803 	bl	8009e2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e26:	f000 f8d5 	bl	8009fd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e2a:	e7f1      	b.n	8009e10 <prvTimerTask+0x8>

08009e2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e36:	f7ff fa27 	bl	8009288 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f866 	bl	8009f10 <prvSampleTimeNow>
 8009e44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d130      	bne.n	8009eae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <prvProcessTimerOrBlockTask+0x3c>
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d806      	bhi.n	8009e68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e5a:	f7ff fa23 	bl	80092a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e5e:	68f9      	ldr	r1, [r7, #12]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff ff85 	bl	8009d70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e66:	e024      	b.n	8009eb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d008      	beq.n	8009e80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e6e:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <prvProcessTimerOrBlockTask+0x90>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <prvProcessTimerOrBlockTask+0x50>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <prvProcessTimerOrBlockTask+0x52>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e80:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <prvProcessTimerOrBlockTask+0x94>)
 8009e82:	6818      	ldr	r0, [r3, #0]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	f7fe ff6b 	bl	8008d68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e92:	f7ff fa07 	bl	80092a4 <xTaskResumeAll>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10a      	bne.n	8009eb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <prvProcessTimerOrBlockTask+0x98>)
 8009e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	f3bf 8f6f 	isb	sy
}
 8009eac:	e001      	b.n	8009eb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009eae:	f7ff f9f9 	bl	80092a4 <xTaskResumeAll>
}
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	24004bb0 	.word	0x24004bb0
 8009ec0:	24004bb4 	.word	0x24004bb4
 8009ec4:	e000ed04 	.word	0xe000ed04

08009ec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ed0:	4b0e      	ldr	r3, [pc, #56]	; (8009f0c <prvGetNextExpireTime+0x44>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <prvGetNextExpireTime+0x16>
 8009eda:	2201      	movs	r2, #1
 8009edc:	e000      	b.n	8009ee0 <prvGetNextExpireTime+0x18>
 8009ede:	2200      	movs	r2, #0
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d105      	bne.n	8009ef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eec:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <prvGetNextExpireTime+0x44>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60fb      	str	r3, [r7, #12]
 8009ef6:	e001      	b.n	8009efc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009efc:	68fb      	ldr	r3, [r7, #12]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	24004bac 	.word	0x24004bac

08009f10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f18:	f7ff fa62 	bl	80093e0 <xTaskGetTickCount>
 8009f1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f1e:	4b0b      	ldr	r3, [pc, #44]	; (8009f4c <prvSampleTimeNow+0x3c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d205      	bcs.n	8009f34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f28:	f000 f936 	bl	800a198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	e002      	b.n	8009f3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f3a:	4a04      	ldr	r2, [pc, #16]	; (8009f4c <prvSampleTimeNow+0x3c>)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f40:	68fb      	ldr	r3, [r7, #12]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	24004bbc 	.word	0x24004bbc

08009f50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d812      	bhi.n	8009f9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	1ad2      	subs	r2, r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d302      	bcc.n	8009f8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	e01b      	b.n	8009fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f8a:	4b10      	ldr	r3, [pc, #64]	; (8009fcc <prvInsertTimerInActiveList+0x7c>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3304      	adds	r3, #4
 8009f92:	4619      	mov	r1, r3
 8009f94:	4610      	mov	r0, r2
 8009f96:	f7fd ff80 	bl	8007e9a <vListInsert>
 8009f9a:	e012      	b.n	8009fc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d206      	bcs.n	8009fb2 <prvInsertTimerInActiveList+0x62>
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d302      	bcc.n	8009fb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fac:	2301      	movs	r3, #1
 8009fae:	617b      	str	r3, [r7, #20]
 8009fb0:	e007      	b.n	8009fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fb2:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <prvInsertTimerInActiveList+0x80>)
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7fd ff6c 	bl	8007e9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fc2:	697b      	ldr	r3, [r7, #20]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	24004bb0 	.word	0x24004bb0
 8009fd0:	24004bac 	.word	0x24004bac

08009fd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08e      	sub	sp, #56	; 0x38
 8009fd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fda:	e0ca      	b.n	800a172 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da18      	bge.n	800a014 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fe2:	1d3b      	adds	r3, r7, #4
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	61fb      	str	r3, [r7, #28]
}
 800a000:	bf00      	nop
 800a002:	e7fe      	b.n	800a002 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a00a:	6850      	ldr	r0, [r2, #4]
 800a00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a00e:	6892      	ldr	r2, [r2, #8]
 800a010:	4611      	mov	r1, r2
 800a012:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f2c0 80aa 	blt.w	800a170 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02a:	3304      	adds	r3, #4
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fd ff6d 	bl	8007f0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a032:	463b      	mov	r3, r7
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff ff6b 	bl	8009f10 <prvSampleTimeNow>
 800a03a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b09      	cmp	r3, #9
 800a040:	f200 8097 	bhi.w	800a172 <prvProcessReceivedCommands+0x19e>
 800a044:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <prvProcessReceivedCommands+0x78>)
 800a046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04a:	bf00      	nop
 800a04c:	0800a075 	.word	0x0800a075
 800a050:	0800a075 	.word	0x0800a075
 800a054:	0800a075 	.word	0x0800a075
 800a058:	0800a0e9 	.word	0x0800a0e9
 800a05c:	0800a0fd 	.word	0x0800a0fd
 800a060:	0800a147 	.word	0x0800a147
 800a064:	0800a075 	.word	0x0800a075
 800a068:	0800a075 	.word	0x0800a075
 800a06c:	0800a0e9 	.word	0x0800a0e9
 800a070:	0800a0fd 	.word	0x0800a0fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a07a:	f043 0301 	orr.w	r3, r3, #1
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	18d1      	adds	r1, r2, r3
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a094:	f7ff ff5c 	bl	8009f50 <prvInsertTimerInActiveList>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d069      	beq.n	800a172 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d05e      	beq.n	800a172 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	441a      	add	r2, r3
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c6:	f7ff fe05 	bl	8009cd4 <xTimerGenericCommand>
 800a0ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d14f      	bne.n	800a172 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	61bb      	str	r3, [r7, #24]
}
 800a0e4:	bf00      	nop
 800a0e6:	e7fe      	b.n	800a0e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ee:	f023 0301 	bic.w	r3, r3, #1
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a0fa:	e03a      	b.n	800a172 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a102:	f043 0301 	orr.w	r3, r3, #1
 800a106:	b2da      	uxtb	r2, r3
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10a      	bne.n	800a132 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	617b      	str	r3, [r7, #20]
}
 800a12e:	bf00      	nop
 800a130:	e7fe      	b.n	800a130 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	699a      	ldr	r2, [r3, #24]
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	18d1      	adds	r1, r2, r3
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a140:	f7ff ff06 	bl	8009f50 <prvInsertTimerInActiveList>
					break;
 800a144:	e015      	b.n	800a172 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d103      	bne.n	800a15c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a156:	f7fd fd31 	bl	8007bbc <vPortFree>
 800a15a:	e00a      	b.n	800a172 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a162:	f023 0301 	bic.w	r3, r3, #1
 800a166:	b2da      	uxtb	r2, r3
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a16e:	e000      	b.n	800a172 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a172:	4b08      	ldr	r3, [pc, #32]	; (800a194 <prvProcessReceivedCommands+0x1c0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	1d39      	adds	r1, r7, #4
 800a178:	2200      	movs	r2, #0
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fbda 	bl	8008934 <xQueueReceive>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	f47f af2a 	bne.w	8009fdc <prvProcessReceivedCommands+0x8>
	}
}
 800a188:	bf00      	nop
 800a18a:	bf00      	nop
 800a18c:	3730      	adds	r7, #48	; 0x30
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	24004bb4 	.word	0x24004bb4

0800a198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a19e:	e048      	b.n	800a232 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1a0:	4b2d      	ldr	r3, [pc, #180]	; (800a258 <prvSwitchTimerLists+0xc0>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1aa:	4b2b      	ldr	r3, [pc, #172]	; (800a258 <prvSwitchTimerLists+0xc0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fd fea7 	bl	8007f0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1cc:	f003 0304 	and.w	r3, r3, #4
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d02e      	beq.n	800a232 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	4413      	add	r3, r2
 800a1dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d90e      	bls.n	800a204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1f2:	4b19      	ldr	r3, [pc, #100]	; (800a258 <prvSwitchTimerLists+0xc0>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	f7fd fe4c 	bl	8007e9a <vListInsert>
 800a202:	e016      	b.n	800a232 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a204:	2300      	movs	r3, #0
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	2300      	movs	r3, #0
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	2100      	movs	r1, #0
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff fd60 	bl	8009cd4 <xTimerGenericCommand>
 800a214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10a      	bne.n	800a232 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	603b      	str	r3, [r7, #0]
}
 800a22e:	bf00      	nop
 800a230:	e7fe      	b.n	800a230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a232:	4b09      	ldr	r3, [pc, #36]	; (800a258 <prvSwitchTimerLists+0xc0>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1b1      	bne.n	800a1a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a23c:	4b06      	ldr	r3, [pc, #24]	; (800a258 <prvSwitchTimerLists+0xc0>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a242:	4b06      	ldr	r3, [pc, #24]	; (800a25c <prvSwitchTimerLists+0xc4>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a04      	ldr	r2, [pc, #16]	; (800a258 <prvSwitchTimerLists+0xc0>)
 800a248:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a24a:	4a04      	ldr	r2, [pc, #16]	; (800a25c <prvSwitchTimerLists+0xc4>)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	6013      	str	r3, [r2, #0]
}
 800a250:	bf00      	nop
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	24004bac 	.word	0x24004bac
 800a25c:	24004bb0 	.word	0x24004bb0

0800a260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a266:	f7fd ffa5 	bl	80081b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a26a:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <prvCheckForValidListAndQueue+0x60>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d120      	bne.n	800a2b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a272:	4814      	ldr	r0, [pc, #80]	; (800a2c4 <prvCheckForValidListAndQueue+0x64>)
 800a274:	f7fd fdc0 	bl	8007df8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a278:	4813      	ldr	r0, [pc, #76]	; (800a2c8 <prvCheckForValidListAndQueue+0x68>)
 800a27a:	f7fd fdbd 	bl	8007df8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a27e:	4b13      	ldr	r3, [pc, #76]	; (800a2cc <prvCheckForValidListAndQueue+0x6c>)
 800a280:	4a10      	ldr	r2, [pc, #64]	; (800a2c4 <prvCheckForValidListAndQueue+0x64>)
 800a282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a284:	4b12      	ldr	r3, [pc, #72]	; (800a2d0 <prvCheckForValidListAndQueue+0x70>)
 800a286:	4a10      	ldr	r2, [pc, #64]	; (800a2c8 <prvCheckForValidListAndQueue+0x68>)
 800a288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a28a:	2300      	movs	r3, #0
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <prvCheckForValidListAndQueue+0x74>)
 800a290:	4a11      	ldr	r2, [pc, #68]	; (800a2d8 <prvCheckForValidListAndQueue+0x78>)
 800a292:	2110      	movs	r1, #16
 800a294:	200a      	movs	r0, #10
 800a296:	f7fe f917 	bl	80084c8 <xQueueGenericCreateStatic>
 800a29a:	4603      	mov	r3, r0
 800a29c:	4a08      	ldr	r2, [pc, #32]	; (800a2c0 <prvCheckForValidListAndQueue+0x60>)
 800a29e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <prvCheckForValidListAndQueue+0x60>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <prvCheckForValidListAndQueue+0x60>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	490b      	ldr	r1, [pc, #44]	; (800a2dc <prvCheckForValidListAndQueue+0x7c>)
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe fd30 	bl	8008d14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2b4:	f7fd ffae 	bl	8008214 <vPortExitCritical>
}
 800a2b8:	bf00      	nop
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	24004bb4 	.word	0x24004bb4
 800a2c4:	24004b84 	.word	0x24004b84
 800a2c8:	24004b98 	.word	0x24004b98
 800a2cc:	24004bac 	.word	0x24004bac
 800a2d0:	24004bb0 	.word	0x24004bb0
 800a2d4:	24004c60 	.word	0x24004c60
 800a2d8:	24004bc0 	.word	0x24004bc0
 800a2dc:	0800adb0 	.word	0x0800adb0

0800a2e0 <__errno>:
 800a2e0:	4b01      	ldr	r3, [pc, #4]	; (800a2e8 <__errno+0x8>)
 800a2e2:	6818      	ldr	r0, [r3, #0]
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	24000014 	.word	0x24000014

0800a2ec <__libc_init_array>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	4d0d      	ldr	r5, [pc, #52]	; (800a324 <__libc_init_array+0x38>)
 800a2f0:	4c0d      	ldr	r4, [pc, #52]	; (800a328 <__libc_init_array+0x3c>)
 800a2f2:	1b64      	subs	r4, r4, r5
 800a2f4:	10a4      	asrs	r4, r4, #2
 800a2f6:	2600      	movs	r6, #0
 800a2f8:	42a6      	cmp	r6, r4
 800a2fa:	d109      	bne.n	800a310 <__libc_init_array+0x24>
 800a2fc:	4d0b      	ldr	r5, [pc, #44]	; (800a32c <__libc_init_array+0x40>)
 800a2fe:	4c0c      	ldr	r4, [pc, #48]	; (800a330 <__libc_init_array+0x44>)
 800a300:	f000 fcf8 	bl	800acf4 <_init>
 800a304:	1b64      	subs	r4, r4, r5
 800a306:	10a4      	asrs	r4, r4, #2
 800a308:	2600      	movs	r6, #0
 800a30a:	42a6      	cmp	r6, r4
 800a30c:	d105      	bne.n	800a31a <__libc_init_array+0x2e>
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	f855 3b04 	ldr.w	r3, [r5], #4
 800a314:	4798      	blx	r3
 800a316:	3601      	adds	r6, #1
 800a318:	e7ee      	b.n	800a2f8 <__libc_init_array+0xc>
 800a31a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31e:	4798      	blx	r3
 800a320:	3601      	adds	r6, #1
 800a322:	e7f2      	b.n	800a30a <__libc_init_array+0x1e>
 800a324:	0800aed4 	.word	0x0800aed4
 800a328:	0800aed4 	.word	0x0800aed4
 800a32c:	0800aed4 	.word	0x0800aed4
 800a330:	0800aed8 	.word	0x0800aed8

0800a334 <__retarget_lock_acquire_recursive>:
 800a334:	4770      	bx	lr

0800a336 <__retarget_lock_release_recursive>:
 800a336:	4770      	bx	lr

0800a338 <memcpy>:
 800a338:	440a      	add	r2, r1
 800a33a:	4291      	cmp	r1, r2
 800a33c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a340:	d100      	bne.n	800a344 <memcpy+0xc>
 800a342:	4770      	bx	lr
 800a344:	b510      	push	{r4, lr}
 800a346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a34a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a34e:	4291      	cmp	r1, r2
 800a350:	d1f9      	bne.n	800a346 <memcpy+0xe>
 800a352:	bd10      	pop	{r4, pc}

0800a354 <memset>:
 800a354:	4402      	add	r2, r0
 800a356:	4603      	mov	r3, r0
 800a358:	4293      	cmp	r3, r2
 800a35a:	d100      	bne.n	800a35e <memset+0xa>
 800a35c:	4770      	bx	lr
 800a35e:	f803 1b01 	strb.w	r1, [r3], #1
 800a362:	e7f9      	b.n	800a358 <memset+0x4>

0800a364 <sbrk_aligned>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	4e0e      	ldr	r6, [pc, #56]	; (800a3a0 <sbrk_aligned+0x3c>)
 800a368:	460c      	mov	r4, r1
 800a36a:	6831      	ldr	r1, [r6, #0]
 800a36c:	4605      	mov	r5, r0
 800a36e:	b911      	cbnz	r1, 800a376 <sbrk_aligned+0x12>
 800a370:	f000 f8f6 	bl	800a560 <_sbrk_r>
 800a374:	6030      	str	r0, [r6, #0]
 800a376:	4621      	mov	r1, r4
 800a378:	4628      	mov	r0, r5
 800a37a:	f000 f8f1 	bl	800a560 <_sbrk_r>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d00a      	beq.n	800a398 <sbrk_aligned+0x34>
 800a382:	1cc4      	adds	r4, r0, #3
 800a384:	f024 0403 	bic.w	r4, r4, #3
 800a388:	42a0      	cmp	r0, r4
 800a38a:	d007      	beq.n	800a39c <sbrk_aligned+0x38>
 800a38c:	1a21      	subs	r1, r4, r0
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 f8e6 	bl	800a560 <_sbrk_r>
 800a394:	3001      	adds	r0, #1
 800a396:	d101      	bne.n	800a39c <sbrk_aligned+0x38>
 800a398:	f04f 34ff 	mov.w	r4, #4294967295
 800a39c:	4620      	mov	r0, r4
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	24004cb8 	.word	0x24004cb8

0800a3a4 <_malloc_r>:
 800a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	1ccd      	adds	r5, r1, #3
 800a3aa:	f025 0503 	bic.w	r5, r5, #3
 800a3ae:	3508      	adds	r5, #8
 800a3b0:	2d0c      	cmp	r5, #12
 800a3b2:	bf38      	it	cc
 800a3b4:	250c      	movcc	r5, #12
 800a3b6:	2d00      	cmp	r5, #0
 800a3b8:	4607      	mov	r7, r0
 800a3ba:	db01      	blt.n	800a3c0 <_malloc_r+0x1c>
 800a3bc:	42a9      	cmp	r1, r5
 800a3be:	d905      	bls.n	800a3cc <_malloc_r+0x28>
 800a3c0:	230c      	movs	r3, #12
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	2600      	movs	r6, #0
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3cc:	4e2e      	ldr	r6, [pc, #184]	; (800a488 <_malloc_r+0xe4>)
 800a3ce:	f000 f8f7 	bl	800a5c0 <__malloc_lock>
 800a3d2:	6833      	ldr	r3, [r6, #0]
 800a3d4:	461c      	mov	r4, r3
 800a3d6:	bb34      	cbnz	r4, 800a426 <_malloc_r+0x82>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4638      	mov	r0, r7
 800a3dc:	f7ff ffc2 	bl	800a364 <sbrk_aligned>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	d14d      	bne.n	800a482 <_malloc_r+0xde>
 800a3e6:	6834      	ldr	r4, [r6, #0]
 800a3e8:	4626      	mov	r6, r4
 800a3ea:	2e00      	cmp	r6, #0
 800a3ec:	d140      	bne.n	800a470 <_malloc_r+0xcc>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	eb04 0803 	add.w	r8, r4, r3
 800a3f8:	f000 f8b2 	bl	800a560 <_sbrk_r>
 800a3fc:	4580      	cmp	r8, r0
 800a3fe:	d13a      	bne.n	800a476 <_malloc_r+0xd2>
 800a400:	6821      	ldr	r1, [r4, #0]
 800a402:	3503      	adds	r5, #3
 800a404:	1a6d      	subs	r5, r5, r1
 800a406:	f025 0503 	bic.w	r5, r5, #3
 800a40a:	3508      	adds	r5, #8
 800a40c:	2d0c      	cmp	r5, #12
 800a40e:	bf38      	it	cc
 800a410:	250c      	movcc	r5, #12
 800a412:	4629      	mov	r1, r5
 800a414:	4638      	mov	r0, r7
 800a416:	f7ff ffa5 	bl	800a364 <sbrk_aligned>
 800a41a:	3001      	adds	r0, #1
 800a41c:	d02b      	beq.n	800a476 <_malloc_r+0xd2>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	442b      	add	r3, r5
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	e00e      	b.n	800a444 <_malloc_r+0xa0>
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	1b52      	subs	r2, r2, r5
 800a42a:	d41e      	bmi.n	800a46a <_malloc_r+0xc6>
 800a42c:	2a0b      	cmp	r2, #11
 800a42e:	d916      	bls.n	800a45e <_malloc_r+0xba>
 800a430:	1961      	adds	r1, r4, r5
 800a432:	42a3      	cmp	r3, r4
 800a434:	6025      	str	r5, [r4, #0]
 800a436:	bf18      	it	ne
 800a438:	6059      	strne	r1, [r3, #4]
 800a43a:	6863      	ldr	r3, [r4, #4]
 800a43c:	bf08      	it	eq
 800a43e:	6031      	streq	r1, [r6, #0]
 800a440:	5162      	str	r2, [r4, r5]
 800a442:	604b      	str	r3, [r1, #4]
 800a444:	4638      	mov	r0, r7
 800a446:	f104 060b 	add.w	r6, r4, #11
 800a44a:	f000 f8bf 	bl	800a5cc <__malloc_unlock>
 800a44e:	f026 0607 	bic.w	r6, r6, #7
 800a452:	1d23      	adds	r3, r4, #4
 800a454:	1af2      	subs	r2, r6, r3
 800a456:	d0b6      	beq.n	800a3c6 <_malloc_r+0x22>
 800a458:	1b9b      	subs	r3, r3, r6
 800a45a:	50a3      	str	r3, [r4, r2]
 800a45c:	e7b3      	b.n	800a3c6 <_malloc_r+0x22>
 800a45e:	6862      	ldr	r2, [r4, #4]
 800a460:	42a3      	cmp	r3, r4
 800a462:	bf0c      	ite	eq
 800a464:	6032      	streq	r2, [r6, #0]
 800a466:	605a      	strne	r2, [r3, #4]
 800a468:	e7ec      	b.n	800a444 <_malloc_r+0xa0>
 800a46a:	4623      	mov	r3, r4
 800a46c:	6864      	ldr	r4, [r4, #4]
 800a46e:	e7b2      	b.n	800a3d6 <_malloc_r+0x32>
 800a470:	4634      	mov	r4, r6
 800a472:	6876      	ldr	r6, [r6, #4]
 800a474:	e7b9      	b.n	800a3ea <_malloc_r+0x46>
 800a476:	230c      	movs	r3, #12
 800a478:	603b      	str	r3, [r7, #0]
 800a47a:	4638      	mov	r0, r7
 800a47c:	f000 f8a6 	bl	800a5cc <__malloc_unlock>
 800a480:	e7a1      	b.n	800a3c6 <_malloc_r+0x22>
 800a482:	6025      	str	r5, [r4, #0]
 800a484:	e7de      	b.n	800a444 <_malloc_r+0xa0>
 800a486:	bf00      	nop
 800a488:	24004cb4 	.word	0x24004cb4

0800a48c <cleanup_glue>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	460c      	mov	r4, r1
 800a490:	6809      	ldr	r1, [r1, #0]
 800a492:	4605      	mov	r5, r0
 800a494:	b109      	cbz	r1, 800a49a <cleanup_glue+0xe>
 800a496:	f7ff fff9 	bl	800a48c <cleanup_glue>
 800a49a:	4621      	mov	r1, r4
 800a49c:	4628      	mov	r0, r5
 800a49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4a2:	f000 b899 	b.w	800a5d8 <_free_r>
	...

0800a4a8 <_reclaim_reent>:
 800a4a8:	4b2c      	ldr	r3, [pc, #176]	; (800a55c <_reclaim_reent+0xb4>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4283      	cmp	r3, r0
 800a4ae:	b570      	push	{r4, r5, r6, lr}
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	d051      	beq.n	800a558 <_reclaim_reent+0xb0>
 800a4b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a4b6:	b143      	cbz	r3, 800a4ca <_reclaim_reent+0x22>
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d14a      	bne.n	800a554 <_reclaim_reent+0xac>
 800a4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4c0:	6819      	ldr	r1, [r3, #0]
 800a4c2:	b111      	cbz	r1, 800a4ca <_reclaim_reent+0x22>
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 f887 	bl	800a5d8 <_free_r>
 800a4ca:	6961      	ldr	r1, [r4, #20]
 800a4cc:	b111      	cbz	r1, 800a4d4 <_reclaim_reent+0x2c>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f000 f882 	bl	800a5d8 <_free_r>
 800a4d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a4d6:	b111      	cbz	r1, 800a4de <_reclaim_reent+0x36>
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 f87d 	bl	800a5d8 <_free_r>
 800a4de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4e0:	b111      	cbz	r1, 800a4e8 <_reclaim_reent+0x40>
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f878 	bl	800a5d8 <_free_r>
 800a4e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a4ea:	b111      	cbz	r1, 800a4f2 <_reclaim_reent+0x4a>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 f873 	bl	800a5d8 <_free_r>
 800a4f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a4f4:	b111      	cbz	r1, 800a4fc <_reclaim_reent+0x54>
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f86e 	bl	800a5d8 <_free_r>
 800a4fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a4fe:	b111      	cbz	r1, 800a506 <_reclaim_reent+0x5e>
 800a500:	4620      	mov	r0, r4
 800a502:	f000 f869 	bl	800a5d8 <_free_r>
 800a506:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a508:	b111      	cbz	r1, 800a510 <_reclaim_reent+0x68>
 800a50a:	4620      	mov	r0, r4
 800a50c:	f000 f864 	bl	800a5d8 <_free_r>
 800a510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a512:	b111      	cbz	r1, 800a51a <_reclaim_reent+0x72>
 800a514:	4620      	mov	r0, r4
 800a516:	f000 f85f 	bl	800a5d8 <_free_r>
 800a51a:	69a3      	ldr	r3, [r4, #24]
 800a51c:	b1e3      	cbz	r3, 800a558 <_reclaim_reent+0xb0>
 800a51e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a520:	4620      	mov	r0, r4
 800a522:	4798      	blx	r3
 800a524:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a526:	b1b9      	cbz	r1, 800a558 <_reclaim_reent+0xb0>
 800a528:	4620      	mov	r0, r4
 800a52a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a52e:	f7ff bfad 	b.w	800a48c <cleanup_glue>
 800a532:	5949      	ldr	r1, [r1, r5]
 800a534:	b941      	cbnz	r1, 800a548 <_reclaim_reent+0xa0>
 800a536:	3504      	adds	r5, #4
 800a538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a53a:	2d80      	cmp	r5, #128	; 0x80
 800a53c:	68d9      	ldr	r1, [r3, #12]
 800a53e:	d1f8      	bne.n	800a532 <_reclaim_reent+0x8a>
 800a540:	4620      	mov	r0, r4
 800a542:	f000 f849 	bl	800a5d8 <_free_r>
 800a546:	e7ba      	b.n	800a4be <_reclaim_reent+0x16>
 800a548:	680e      	ldr	r6, [r1, #0]
 800a54a:	4620      	mov	r0, r4
 800a54c:	f000 f844 	bl	800a5d8 <_free_r>
 800a550:	4631      	mov	r1, r6
 800a552:	e7ef      	b.n	800a534 <_reclaim_reent+0x8c>
 800a554:	2500      	movs	r5, #0
 800a556:	e7ef      	b.n	800a538 <_reclaim_reent+0x90>
 800a558:	bd70      	pop	{r4, r5, r6, pc}
 800a55a:	bf00      	nop
 800a55c:	24000014 	.word	0x24000014

0800a560 <_sbrk_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d06      	ldr	r5, [pc, #24]	; (800a57c <_sbrk_r+0x1c>)
 800a564:	2300      	movs	r3, #0
 800a566:	4604      	mov	r4, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	602b      	str	r3, [r5, #0]
 800a56c:	f7f7 fdd6 	bl	800211c <_sbrk>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_sbrk_r+0x1a>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	b103      	cbz	r3, 800a57a <_sbrk_r+0x1a>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	24004cbc 	.word	0x24004cbc

0800a580 <_vsiprintf_r>:
 800a580:	b500      	push	{lr}
 800a582:	b09b      	sub	sp, #108	; 0x6c
 800a584:	9100      	str	r1, [sp, #0]
 800a586:	9104      	str	r1, [sp, #16]
 800a588:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a58c:	9105      	str	r1, [sp, #20]
 800a58e:	9102      	str	r1, [sp, #8]
 800a590:	4905      	ldr	r1, [pc, #20]	; (800a5a8 <_vsiprintf_r+0x28>)
 800a592:	9103      	str	r1, [sp, #12]
 800a594:	4669      	mov	r1, sp
 800a596:	f000 f8c7 	bl	800a728 <_svfiprintf_r>
 800a59a:	9b00      	ldr	r3, [sp, #0]
 800a59c:	2200      	movs	r2, #0
 800a59e:	701a      	strb	r2, [r3, #0]
 800a5a0:	b01b      	add	sp, #108	; 0x6c
 800a5a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5a6:	bf00      	nop
 800a5a8:	ffff0208 	.word	0xffff0208

0800a5ac <vsiprintf>:
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	460a      	mov	r2, r1
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	4802      	ldr	r0, [pc, #8]	; (800a5bc <vsiprintf+0x10>)
 800a5b4:	6800      	ldr	r0, [r0, #0]
 800a5b6:	f7ff bfe3 	b.w	800a580 <_vsiprintf_r>
 800a5ba:	bf00      	nop
 800a5bc:	24000014 	.word	0x24000014

0800a5c0 <__malloc_lock>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__malloc_lock+0x8>)
 800a5c2:	f7ff beb7 	b.w	800a334 <__retarget_lock_acquire_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	24004cb0 	.word	0x24004cb0

0800a5cc <__malloc_unlock>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__malloc_unlock+0x8>)
 800a5ce:	f7ff beb2 	b.w	800a336 <__retarget_lock_release_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	24004cb0 	.word	0x24004cb0

0800a5d8 <_free_r>:
 800a5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	d044      	beq.n	800a668 <_free_r+0x90>
 800a5de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e2:	9001      	str	r0, [sp, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ea:	bfb8      	it	lt
 800a5ec:	18e4      	addlt	r4, r4, r3
 800a5ee:	f7ff ffe7 	bl	800a5c0 <__malloc_lock>
 800a5f2:	4a1e      	ldr	r2, [pc, #120]	; (800a66c <_free_r+0x94>)
 800a5f4:	9801      	ldr	r0, [sp, #4]
 800a5f6:	6813      	ldr	r3, [r2, #0]
 800a5f8:	b933      	cbnz	r3, 800a608 <_free_r+0x30>
 800a5fa:	6063      	str	r3, [r4, #4]
 800a5fc:	6014      	str	r4, [r2, #0]
 800a5fe:	b003      	add	sp, #12
 800a600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a604:	f7ff bfe2 	b.w	800a5cc <__malloc_unlock>
 800a608:	42a3      	cmp	r3, r4
 800a60a:	d908      	bls.n	800a61e <_free_r+0x46>
 800a60c:	6825      	ldr	r5, [r4, #0]
 800a60e:	1961      	adds	r1, r4, r5
 800a610:	428b      	cmp	r3, r1
 800a612:	bf01      	itttt	eq
 800a614:	6819      	ldreq	r1, [r3, #0]
 800a616:	685b      	ldreq	r3, [r3, #4]
 800a618:	1949      	addeq	r1, r1, r5
 800a61a:	6021      	streq	r1, [r4, #0]
 800a61c:	e7ed      	b.n	800a5fa <_free_r+0x22>
 800a61e:	461a      	mov	r2, r3
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	b10b      	cbz	r3, 800a628 <_free_r+0x50>
 800a624:	42a3      	cmp	r3, r4
 800a626:	d9fa      	bls.n	800a61e <_free_r+0x46>
 800a628:	6811      	ldr	r1, [r2, #0]
 800a62a:	1855      	adds	r5, r2, r1
 800a62c:	42a5      	cmp	r5, r4
 800a62e:	d10b      	bne.n	800a648 <_free_r+0x70>
 800a630:	6824      	ldr	r4, [r4, #0]
 800a632:	4421      	add	r1, r4
 800a634:	1854      	adds	r4, r2, r1
 800a636:	42a3      	cmp	r3, r4
 800a638:	6011      	str	r1, [r2, #0]
 800a63a:	d1e0      	bne.n	800a5fe <_free_r+0x26>
 800a63c:	681c      	ldr	r4, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	6053      	str	r3, [r2, #4]
 800a642:	4421      	add	r1, r4
 800a644:	6011      	str	r1, [r2, #0]
 800a646:	e7da      	b.n	800a5fe <_free_r+0x26>
 800a648:	d902      	bls.n	800a650 <_free_r+0x78>
 800a64a:	230c      	movs	r3, #12
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	e7d6      	b.n	800a5fe <_free_r+0x26>
 800a650:	6825      	ldr	r5, [r4, #0]
 800a652:	1961      	adds	r1, r4, r5
 800a654:	428b      	cmp	r3, r1
 800a656:	bf04      	itt	eq
 800a658:	6819      	ldreq	r1, [r3, #0]
 800a65a:	685b      	ldreq	r3, [r3, #4]
 800a65c:	6063      	str	r3, [r4, #4]
 800a65e:	bf04      	itt	eq
 800a660:	1949      	addeq	r1, r1, r5
 800a662:	6021      	streq	r1, [r4, #0]
 800a664:	6054      	str	r4, [r2, #4]
 800a666:	e7ca      	b.n	800a5fe <_free_r+0x26>
 800a668:	b003      	add	sp, #12
 800a66a:	bd30      	pop	{r4, r5, pc}
 800a66c:	24004cb4 	.word	0x24004cb4

0800a670 <__ssputs_r>:
 800a670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a674:	688e      	ldr	r6, [r1, #8]
 800a676:	429e      	cmp	r6, r3
 800a678:	4682      	mov	sl, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	4690      	mov	r8, r2
 800a67e:	461f      	mov	r7, r3
 800a680:	d838      	bhi.n	800a6f4 <__ssputs_r+0x84>
 800a682:	898a      	ldrh	r2, [r1, #12]
 800a684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a688:	d032      	beq.n	800a6f0 <__ssputs_r+0x80>
 800a68a:	6825      	ldr	r5, [r4, #0]
 800a68c:	6909      	ldr	r1, [r1, #16]
 800a68e:	eba5 0901 	sub.w	r9, r5, r1
 800a692:	6965      	ldr	r5, [r4, #20]
 800a694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a69c:	3301      	adds	r3, #1
 800a69e:	444b      	add	r3, r9
 800a6a0:	106d      	asrs	r5, r5, #1
 800a6a2:	429d      	cmp	r5, r3
 800a6a4:	bf38      	it	cc
 800a6a6:	461d      	movcc	r5, r3
 800a6a8:	0553      	lsls	r3, r2, #21
 800a6aa:	d531      	bpl.n	800a710 <__ssputs_r+0xa0>
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	f7ff fe79 	bl	800a3a4 <_malloc_r>
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	b950      	cbnz	r0, 800a6cc <__ssputs_r+0x5c>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	f8ca 3000 	str.w	r3, [sl]
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c2:	81a3      	strh	r3, [r4, #12]
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6cc:	6921      	ldr	r1, [r4, #16]
 800a6ce:	464a      	mov	r2, r9
 800a6d0:	f7ff fe32 	bl	800a338 <memcpy>
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	6126      	str	r6, [r4, #16]
 800a6e2:	6165      	str	r5, [r4, #20]
 800a6e4:	444e      	add	r6, r9
 800a6e6:	eba5 0509 	sub.w	r5, r5, r9
 800a6ea:	6026      	str	r6, [r4, #0]
 800a6ec:	60a5      	str	r5, [r4, #8]
 800a6ee:	463e      	mov	r6, r7
 800a6f0:	42be      	cmp	r6, r7
 800a6f2:	d900      	bls.n	800a6f6 <__ssputs_r+0x86>
 800a6f4:	463e      	mov	r6, r7
 800a6f6:	6820      	ldr	r0, [r4, #0]
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	4641      	mov	r1, r8
 800a6fc:	f000 faa8 	bl	800ac50 <memmove>
 800a700:	68a3      	ldr	r3, [r4, #8]
 800a702:	1b9b      	subs	r3, r3, r6
 800a704:	60a3      	str	r3, [r4, #8]
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	4433      	add	r3, r6
 800a70a:	6023      	str	r3, [r4, #0]
 800a70c:	2000      	movs	r0, #0
 800a70e:	e7db      	b.n	800a6c8 <__ssputs_r+0x58>
 800a710:	462a      	mov	r2, r5
 800a712:	f000 fab7 	bl	800ac84 <_realloc_r>
 800a716:	4606      	mov	r6, r0
 800a718:	2800      	cmp	r0, #0
 800a71a:	d1e1      	bne.n	800a6e0 <__ssputs_r+0x70>
 800a71c:	6921      	ldr	r1, [r4, #16]
 800a71e:	4650      	mov	r0, sl
 800a720:	f7ff ff5a 	bl	800a5d8 <_free_r>
 800a724:	e7c7      	b.n	800a6b6 <__ssputs_r+0x46>
	...

0800a728 <_svfiprintf_r>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	4698      	mov	r8, r3
 800a72e:	898b      	ldrh	r3, [r1, #12]
 800a730:	061b      	lsls	r3, r3, #24
 800a732:	b09d      	sub	sp, #116	; 0x74
 800a734:	4607      	mov	r7, r0
 800a736:	460d      	mov	r5, r1
 800a738:	4614      	mov	r4, r2
 800a73a:	d50e      	bpl.n	800a75a <_svfiprintf_r+0x32>
 800a73c:	690b      	ldr	r3, [r1, #16]
 800a73e:	b963      	cbnz	r3, 800a75a <_svfiprintf_r+0x32>
 800a740:	2140      	movs	r1, #64	; 0x40
 800a742:	f7ff fe2f 	bl	800a3a4 <_malloc_r>
 800a746:	6028      	str	r0, [r5, #0]
 800a748:	6128      	str	r0, [r5, #16]
 800a74a:	b920      	cbnz	r0, 800a756 <_svfiprintf_r+0x2e>
 800a74c:	230c      	movs	r3, #12
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e0d1      	b.n	800a8fa <_svfiprintf_r+0x1d2>
 800a756:	2340      	movs	r3, #64	; 0x40
 800a758:	616b      	str	r3, [r5, #20]
 800a75a:	2300      	movs	r3, #0
 800a75c:	9309      	str	r3, [sp, #36]	; 0x24
 800a75e:	2320      	movs	r3, #32
 800a760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a764:	f8cd 800c 	str.w	r8, [sp, #12]
 800a768:	2330      	movs	r3, #48	; 0x30
 800a76a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a914 <_svfiprintf_r+0x1ec>
 800a76e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a772:	f04f 0901 	mov.w	r9, #1
 800a776:	4623      	mov	r3, r4
 800a778:	469a      	mov	sl, r3
 800a77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a77e:	b10a      	cbz	r2, 800a784 <_svfiprintf_r+0x5c>
 800a780:	2a25      	cmp	r2, #37	; 0x25
 800a782:	d1f9      	bne.n	800a778 <_svfiprintf_r+0x50>
 800a784:	ebba 0b04 	subs.w	fp, sl, r4
 800a788:	d00b      	beq.n	800a7a2 <_svfiprintf_r+0x7a>
 800a78a:	465b      	mov	r3, fp
 800a78c:	4622      	mov	r2, r4
 800a78e:	4629      	mov	r1, r5
 800a790:	4638      	mov	r0, r7
 800a792:	f7ff ff6d 	bl	800a670 <__ssputs_r>
 800a796:	3001      	adds	r0, #1
 800a798:	f000 80aa 	beq.w	800a8f0 <_svfiprintf_r+0x1c8>
 800a79c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a79e:	445a      	add	r2, fp
 800a7a0:	9209      	str	r2, [sp, #36]	; 0x24
 800a7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 80a2 	beq.w	800a8f0 <_svfiprintf_r+0x1c8>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7b6:	f10a 0a01 	add.w	sl, sl, #1
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	9307      	str	r3, [sp, #28]
 800a7be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7c2:	931a      	str	r3, [sp, #104]	; 0x68
 800a7c4:	4654      	mov	r4, sl
 800a7c6:	2205      	movs	r2, #5
 800a7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7cc:	4851      	ldr	r0, [pc, #324]	; (800a914 <_svfiprintf_r+0x1ec>)
 800a7ce:	f7f5 fd8f 	bl	80002f0 <memchr>
 800a7d2:	9a04      	ldr	r2, [sp, #16]
 800a7d4:	b9d8      	cbnz	r0, 800a80e <_svfiprintf_r+0xe6>
 800a7d6:	06d0      	lsls	r0, r2, #27
 800a7d8:	bf44      	itt	mi
 800a7da:	2320      	movmi	r3, #32
 800a7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7e0:	0711      	lsls	r1, r2, #28
 800a7e2:	bf44      	itt	mi
 800a7e4:	232b      	movmi	r3, #43	; 0x2b
 800a7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f0:	d015      	beq.n	800a81e <_svfiprintf_r+0xf6>
 800a7f2:	9a07      	ldr	r2, [sp, #28]
 800a7f4:	4654      	mov	r4, sl
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	f04f 0c0a 	mov.w	ip, #10
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a802:	3b30      	subs	r3, #48	; 0x30
 800a804:	2b09      	cmp	r3, #9
 800a806:	d94e      	bls.n	800a8a6 <_svfiprintf_r+0x17e>
 800a808:	b1b0      	cbz	r0, 800a838 <_svfiprintf_r+0x110>
 800a80a:	9207      	str	r2, [sp, #28]
 800a80c:	e014      	b.n	800a838 <_svfiprintf_r+0x110>
 800a80e:	eba0 0308 	sub.w	r3, r0, r8
 800a812:	fa09 f303 	lsl.w	r3, r9, r3
 800a816:	4313      	orrs	r3, r2
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	46a2      	mov	sl, r4
 800a81c:	e7d2      	b.n	800a7c4 <_svfiprintf_r+0x9c>
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	1d19      	adds	r1, r3, #4
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	9103      	str	r1, [sp, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	bfbb      	ittet	lt
 800a82a:	425b      	neglt	r3, r3
 800a82c:	f042 0202 	orrlt.w	r2, r2, #2
 800a830:	9307      	strge	r3, [sp, #28]
 800a832:	9307      	strlt	r3, [sp, #28]
 800a834:	bfb8      	it	lt
 800a836:	9204      	strlt	r2, [sp, #16]
 800a838:	7823      	ldrb	r3, [r4, #0]
 800a83a:	2b2e      	cmp	r3, #46	; 0x2e
 800a83c:	d10c      	bne.n	800a858 <_svfiprintf_r+0x130>
 800a83e:	7863      	ldrb	r3, [r4, #1]
 800a840:	2b2a      	cmp	r3, #42	; 0x2a
 800a842:	d135      	bne.n	800a8b0 <_svfiprintf_r+0x188>
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	1d1a      	adds	r2, r3, #4
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	9203      	str	r2, [sp, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	bfb8      	it	lt
 800a850:	f04f 33ff 	movlt.w	r3, #4294967295
 800a854:	3402      	adds	r4, #2
 800a856:	9305      	str	r3, [sp, #20]
 800a858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a924 <_svfiprintf_r+0x1fc>
 800a85c:	7821      	ldrb	r1, [r4, #0]
 800a85e:	2203      	movs	r2, #3
 800a860:	4650      	mov	r0, sl
 800a862:	f7f5 fd45 	bl	80002f0 <memchr>
 800a866:	b140      	cbz	r0, 800a87a <_svfiprintf_r+0x152>
 800a868:	2340      	movs	r3, #64	; 0x40
 800a86a:	eba0 000a 	sub.w	r0, r0, sl
 800a86e:	fa03 f000 	lsl.w	r0, r3, r0
 800a872:	9b04      	ldr	r3, [sp, #16]
 800a874:	4303      	orrs	r3, r0
 800a876:	3401      	adds	r4, #1
 800a878:	9304      	str	r3, [sp, #16]
 800a87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a87e:	4826      	ldr	r0, [pc, #152]	; (800a918 <_svfiprintf_r+0x1f0>)
 800a880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a884:	2206      	movs	r2, #6
 800a886:	f7f5 fd33 	bl	80002f0 <memchr>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d038      	beq.n	800a900 <_svfiprintf_r+0x1d8>
 800a88e:	4b23      	ldr	r3, [pc, #140]	; (800a91c <_svfiprintf_r+0x1f4>)
 800a890:	bb1b      	cbnz	r3, 800a8da <_svfiprintf_r+0x1b2>
 800a892:	9b03      	ldr	r3, [sp, #12]
 800a894:	3307      	adds	r3, #7
 800a896:	f023 0307 	bic.w	r3, r3, #7
 800a89a:	3308      	adds	r3, #8
 800a89c:	9303      	str	r3, [sp, #12]
 800a89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a0:	4433      	add	r3, r6
 800a8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a4:	e767      	b.n	800a776 <_svfiprintf_r+0x4e>
 800a8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	2001      	movs	r0, #1
 800a8ae:	e7a5      	b.n	800a7fc <_svfiprintf_r+0xd4>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	3401      	adds	r4, #1
 800a8b4:	9305      	str	r3, [sp, #20]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	f04f 0c0a 	mov.w	ip, #10
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8c2:	3a30      	subs	r2, #48	; 0x30
 800a8c4:	2a09      	cmp	r2, #9
 800a8c6:	d903      	bls.n	800a8d0 <_svfiprintf_r+0x1a8>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d0c5      	beq.n	800a858 <_svfiprintf_r+0x130>
 800a8cc:	9105      	str	r1, [sp, #20]
 800a8ce:	e7c3      	b.n	800a858 <_svfiprintf_r+0x130>
 800a8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e7f0      	b.n	800a8bc <_svfiprintf_r+0x194>
 800a8da:	ab03      	add	r3, sp, #12
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	462a      	mov	r2, r5
 800a8e0:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <_svfiprintf_r+0x1f8>)
 800a8e2:	a904      	add	r1, sp, #16
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	f3af 8000 	nop.w
 800a8ea:	1c42      	adds	r2, r0, #1
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	d1d6      	bne.n	800a89e <_svfiprintf_r+0x176>
 800a8f0:	89ab      	ldrh	r3, [r5, #12]
 800a8f2:	065b      	lsls	r3, r3, #25
 800a8f4:	f53f af2c 	bmi.w	800a750 <_svfiprintf_r+0x28>
 800a8f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8fa:	b01d      	add	sp, #116	; 0x74
 800a8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a900:	ab03      	add	r3, sp, #12
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	462a      	mov	r2, r5
 800a906:	4b06      	ldr	r3, [pc, #24]	; (800a920 <_svfiprintf_r+0x1f8>)
 800a908:	a904      	add	r1, sp, #16
 800a90a:	4638      	mov	r0, r7
 800a90c:	f000 f87a 	bl	800aa04 <_printf_i>
 800a910:	e7eb      	b.n	800a8ea <_svfiprintf_r+0x1c2>
 800a912:	bf00      	nop
 800a914:	0800ae98 	.word	0x0800ae98
 800a918:	0800aea2 	.word	0x0800aea2
 800a91c:	00000000 	.word	0x00000000
 800a920:	0800a671 	.word	0x0800a671
 800a924:	0800ae9e 	.word	0x0800ae9e

0800a928 <_printf_common>:
 800a928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a92c:	4616      	mov	r6, r2
 800a92e:	4699      	mov	r9, r3
 800a930:	688a      	ldr	r2, [r1, #8]
 800a932:	690b      	ldr	r3, [r1, #16]
 800a934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a938:	4293      	cmp	r3, r2
 800a93a:	bfb8      	it	lt
 800a93c:	4613      	movlt	r3, r2
 800a93e:	6033      	str	r3, [r6, #0]
 800a940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a944:	4607      	mov	r7, r0
 800a946:	460c      	mov	r4, r1
 800a948:	b10a      	cbz	r2, 800a94e <_printf_common+0x26>
 800a94a:	3301      	adds	r3, #1
 800a94c:	6033      	str	r3, [r6, #0]
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	0699      	lsls	r1, r3, #26
 800a952:	bf42      	ittt	mi
 800a954:	6833      	ldrmi	r3, [r6, #0]
 800a956:	3302      	addmi	r3, #2
 800a958:	6033      	strmi	r3, [r6, #0]
 800a95a:	6825      	ldr	r5, [r4, #0]
 800a95c:	f015 0506 	ands.w	r5, r5, #6
 800a960:	d106      	bne.n	800a970 <_printf_common+0x48>
 800a962:	f104 0a19 	add.w	sl, r4, #25
 800a966:	68e3      	ldr	r3, [r4, #12]
 800a968:	6832      	ldr	r2, [r6, #0]
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	42ab      	cmp	r3, r5
 800a96e:	dc26      	bgt.n	800a9be <_printf_common+0x96>
 800a970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a974:	1e13      	subs	r3, r2, #0
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	bf18      	it	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	0692      	lsls	r2, r2, #26
 800a97e:	d42b      	bmi.n	800a9d8 <_printf_common+0xb0>
 800a980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a984:	4649      	mov	r1, r9
 800a986:	4638      	mov	r0, r7
 800a988:	47c0      	blx	r8
 800a98a:	3001      	adds	r0, #1
 800a98c:	d01e      	beq.n	800a9cc <_printf_common+0xa4>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	68e5      	ldr	r5, [r4, #12]
 800a992:	6832      	ldr	r2, [r6, #0]
 800a994:	f003 0306 	and.w	r3, r3, #6
 800a998:	2b04      	cmp	r3, #4
 800a99a:	bf08      	it	eq
 800a99c:	1aad      	subeq	r5, r5, r2
 800a99e:	68a3      	ldr	r3, [r4, #8]
 800a9a0:	6922      	ldr	r2, [r4, #16]
 800a9a2:	bf0c      	ite	eq
 800a9a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9a8:	2500      	movne	r5, #0
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	bfc4      	itt	gt
 800a9ae:	1a9b      	subgt	r3, r3, r2
 800a9b0:	18ed      	addgt	r5, r5, r3
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	341a      	adds	r4, #26
 800a9b6:	42b5      	cmp	r5, r6
 800a9b8:	d11a      	bne.n	800a9f0 <_printf_common+0xc8>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e008      	b.n	800a9d0 <_printf_common+0xa8>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	4649      	mov	r1, r9
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	47c0      	blx	r8
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d103      	bne.n	800a9d4 <_printf_common+0xac>
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d4:	3501      	adds	r5, #1
 800a9d6:	e7c6      	b.n	800a966 <_printf_common+0x3e>
 800a9d8:	18e1      	adds	r1, r4, r3
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	2030      	movs	r0, #48	; 0x30
 800a9de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9e2:	4422      	add	r2, r4
 800a9e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9ec:	3302      	adds	r3, #2
 800a9ee:	e7c7      	b.n	800a980 <_printf_common+0x58>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	47c0      	blx	r8
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d0e6      	beq.n	800a9cc <_printf_common+0xa4>
 800a9fe:	3601      	adds	r6, #1
 800aa00:	e7d9      	b.n	800a9b6 <_printf_common+0x8e>
	...

0800aa04 <_printf_i>:
 800aa04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa08:	7e0f      	ldrb	r7, [r1, #24]
 800aa0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa0c:	2f78      	cmp	r7, #120	; 0x78
 800aa0e:	4691      	mov	r9, r2
 800aa10:	4680      	mov	r8, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	469a      	mov	sl, r3
 800aa16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa1a:	d807      	bhi.n	800aa2c <_printf_i+0x28>
 800aa1c:	2f62      	cmp	r7, #98	; 0x62
 800aa1e:	d80a      	bhi.n	800aa36 <_printf_i+0x32>
 800aa20:	2f00      	cmp	r7, #0
 800aa22:	f000 80d8 	beq.w	800abd6 <_printf_i+0x1d2>
 800aa26:	2f58      	cmp	r7, #88	; 0x58
 800aa28:	f000 80a3 	beq.w	800ab72 <_printf_i+0x16e>
 800aa2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa34:	e03a      	b.n	800aaac <_printf_i+0xa8>
 800aa36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa3a:	2b15      	cmp	r3, #21
 800aa3c:	d8f6      	bhi.n	800aa2c <_printf_i+0x28>
 800aa3e:	a101      	add	r1, pc, #4	; (adr r1, 800aa44 <_printf_i+0x40>)
 800aa40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa44:	0800aa9d 	.word	0x0800aa9d
 800aa48:	0800aab1 	.word	0x0800aab1
 800aa4c:	0800aa2d 	.word	0x0800aa2d
 800aa50:	0800aa2d 	.word	0x0800aa2d
 800aa54:	0800aa2d 	.word	0x0800aa2d
 800aa58:	0800aa2d 	.word	0x0800aa2d
 800aa5c:	0800aab1 	.word	0x0800aab1
 800aa60:	0800aa2d 	.word	0x0800aa2d
 800aa64:	0800aa2d 	.word	0x0800aa2d
 800aa68:	0800aa2d 	.word	0x0800aa2d
 800aa6c:	0800aa2d 	.word	0x0800aa2d
 800aa70:	0800abbd 	.word	0x0800abbd
 800aa74:	0800aae1 	.word	0x0800aae1
 800aa78:	0800ab9f 	.word	0x0800ab9f
 800aa7c:	0800aa2d 	.word	0x0800aa2d
 800aa80:	0800aa2d 	.word	0x0800aa2d
 800aa84:	0800abdf 	.word	0x0800abdf
 800aa88:	0800aa2d 	.word	0x0800aa2d
 800aa8c:	0800aae1 	.word	0x0800aae1
 800aa90:	0800aa2d 	.word	0x0800aa2d
 800aa94:	0800aa2d 	.word	0x0800aa2d
 800aa98:	0800aba7 	.word	0x0800aba7
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	1d1a      	adds	r2, r3, #4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	602a      	str	r2, [r5, #0]
 800aaa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaac:	2301      	movs	r3, #1
 800aaae:	e0a3      	b.n	800abf8 <_printf_i+0x1f4>
 800aab0:	6820      	ldr	r0, [r4, #0]
 800aab2:	6829      	ldr	r1, [r5, #0]
 800aab4:	0606      	lsls	r6, r0, #24
 800aab6:	f101 0304 	add.w	r3, r1, #4
 800aaba:	d50a      	bpl.n	800aad2 <_printf_i+0xce>
 800aabc:	680e      	ldr	r6, [r1, #0]
 800aabe:	602b      	str	r3, [r5, #0]
 800aac0:	2e00      	cmp	r6, #0
 800aac2:	da03      	bge.n	800aacc <_printf_i+0xc8>
 800aac4:	232d      	movs	r3, #45	; 0x2d
 800aac6:	4276      	negs	r6, r6
 800aac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aacc:	485e      	ldr	r0, [pc, #376]	; (800ac48 <_printf_i+0x244>)
 800aace:	230a      	movs	r3, #10
 800aad0:	e019      	b.n	800ab06 <_printf_i+0x102>
 800aad2:	680e      	ldr	r6, [r1, #0]
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aada:	bf18      	it	ne
 800aadc:	b236      	sxthne	r6, r6
 800aade:	e7ef      	b.n	800aac0 <_printf_i+0xbc>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	6820      	ldr	r0, [r4, #0]
 800aae4:	1d19      	adds	r1, r3, #4
 800aae6:	6029      	str	r1, [r5, #0]
 800aae8:	0601      	lsls	r1, r0, #24
 800aaea:	d501      	bpl.n	800aaf0 <_printf_i+0xec>
 800aaec:	681e      	ldr	r6, [r3, #0]
 800aaee:	e002      	b.n	800aaf6 <_printf_i+0xf2>
 800aaf0:	0646      	lsls	r6, r0, #25
 800aaf2:	d5fb      	bpl.n	800aaec <_printf_i+0xe8>
 800aaf4:	881e      	ldrh	r6, [r3, #0]
 800aaf6:	4854      	ldr	r0, [pc, #336]	; (800ac48 <_printf_i+0x244>)
 800aaf8:	2f6f      	cmp	r7, #111	; 0x6f
 800aafa:	bf0c      	ite	eq
 800aafc:	2308      	moveq	r3, #8
 800aafe:	230a      	movne	r3, #10
 800ab00:	2100      	movs	r1, #0
 800ab02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab06:	6865      	ldr	r5, [r4, #4]
 800ab08:	60a5      	str	r5, [r4, #8]
 800ab0a:	2d00      	cmp	r5, #0
 800ab0c:	bfa2      	ittt	ge
 800ab0e:	6821      	ldrge	r1, [r4, #0]
 800ab10:	f021 0104 	bicge.w	r1, r1, #4
 800ab14:	6021      	strge	r1, [r4, #0]
 800ab16:	b90e      	cbnz	r6, 800ab1c <_printf_i+0x118>
 800ab18:	2d00      	cmp	r5, #0
 800ab1a:	d04d      	beq.n	800abb8 <_printf_i+0x1b4>
 800ab1c:	4615      	mov	r5, r2
 800ab1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab22:	fb03 6711 	mls	r7, r3, r1, r6
 800ab26:	5dc7      	ldrb	r7, [r0, r7]
 800ab28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab2c:	4637      	mov	r7, r6
 800ab2e:	42bb      	cmp	r3, r7
 800ab30:	460e      	mov	r6, r1
 800ab32:	d9f4      	bls.n	800ab1e <_printf_i+0x11a>
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	d10b      	bne.n	800ab50 <_printf_i+0x14c>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	07de      	lsls	r6, r3, #31
 800ab3c:	d508      	bpl.n	800ab50 <_printf_i+0x14c>
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	6861      	ldr	r1, [r4, #4]
 800ab42:	4299      	cmp	r1, r3
 800ab44:	bfde      	ittt	le
 800ab46:	2330      	movle	r3, #48	; 0x30
 800ab48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab50:	1b52      	subs	r2, r2, r5
 800ab52:	6122      	str	r2, [r4, #16]
 800ab54:	f8cd a000 	str.w	sl, [sp]
 800ab58:	464b      	mov	r3, r9
 800ab5a:	aa03      	add	r2, sp, #12
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4640      	mov	r0, r8
 800ab60:	f7ff fee2 	bl	800a928 <_printf_common>
 800ab64:	3001      	adds	r0, #1
 800ab66:	d14c      	bne.n	800ac02 <_printf_i+0x1fe>
 800ab68:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6c:	b004      	add	sp, #16
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	4835      	ldr	r0, [pc, #212]	; (800ac48 <_printf_i+0x244>)
 800ab74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab78:	6829      	ldr	r1, [r5, #0]
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab80:	6029      	str	r1, [r5, #0]
 800ab82:	061d      	lsls	r5, r3, #24
 800ab84:	d514      	bpl.n	800abb0 <_printf_i+0x1ac>
 800ab86:	07df      	lsls	r7, r3, #31
 800ab88:	bf44      	itt	mi
 800ab8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab8e:	6023      	strmi	r3, [r4, #0]
 800ab90:	b91e      	cbnz	r6, 800ab9a <_printf_i+0x196>
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	f023 0320 	bic.w	r3, r3, #32
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	e7b0      	b.n	800ab00 <_printf_i+0xfc>
 800ab9e:	6823      	ldr	r3, [r4, #0]
 800aba0:	f043 0320 	orr.w	r3, r3, #32
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	2378      	movs	r3, #120	; 0x78
 800aba8:	4828      	ldr	r0, [pc, #160]	; (800ac4c <_printf_i+0x248>)
 800abaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abae:	e7e3      	b.n	800ab78 <_printf_i+0x174>
 800abb0:	0659      	lsls	r1, r3, #25
 800abb2:	bf48      	it	mi
 800abb4:	b2b6      	uxthmi	r6, r6
 800abb6:	e7e6      	b.n	800ab86 <_printf_i+0x182>
 800abb8:	4615      	mov	r5, r2
 800abba:	e7bb      	b.n	800ab34 <_printf_i+0x130>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	6826      	ldr	r6, [r4, #0]
 800abc0:	6961      	ldr	r1, [r4, #20]
 800abc2:	1d18      	adds	r0, r3, #4
 800abc4:	6028      	str	r0, [r5, #0]
 800abc6:	0635      	lsls	r5, r6, #24
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	d501      	bpl.n	800abd0 <_printf_i+0x1cc>
 800abcc:	6019      	str	r1, [r3, #0]
 800abce:	e002      	b.n	800abd6 <_printf_i+0x1d2>
 800abd0:	0670      	lsls	r0, r6, #25
 800abd2:	d5fb      	bpl.n	800abcc <_printf_i+0x1c8>
 800abd4:	8019      	strh	r1, [r3, #0]
 800abd6:	2300      	movs	r3, #0
 800abd8:	6123      	str	r3, [r4, #16]
 800abda:	4615      	mov	r5, r2
 800abdc:	e7ba      	b.n	800ab54 <_printf_i+0x150>
 800abde:	682b      	ldr	r3, [r5, #0]
 800abe0:	1d1a      	adds	r2, r3, #4
 800abe2:	602a      	str	r2, [r5, #0]
 800abe4:	681d      	ldr	r5, [r3, #0]
 800abe6:	6862      	ldr	r2, [r4, #4]
 800abe8:	2100      	movs	r1, #0
 800abea:	4628      	mov	r0, r5
 800abec:	f7f5 fb80 	bl	80002f0 <memchr>
 800abf0:	b108      	cbz	r0, 800abf6 <_printf_i+0x1f2>
 800abf2:	1b40      	subs	r0, r0, r5
 800abf4:	6060      	str	r0, [r4, #4]
 800abf6:	6863      	ldr	r3, [r4, #4]
 800abf8:	6123      	str	r3, [r4, #16]
 800abfa:	2300      	movs	r3, #0
 800abfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac00:	e7a8      	b.n	800ab54 <_printf_i+0x150>
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	462a      	mov	r2, r5
 800ac06:	4649      	mov	r1, r9
 800ac08:	4640      	mov	r0, r8
 800ac0a:	47d0      	blx	sl
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	d0ab      	beq.n	800ab68 <_printf_i+0x164>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	079b      	lsls	r3, r3, #30
 800ac14:	d413      	bmi.n	800ac3e <_printf_i+0x23a>
 800ac16:	68e0      	ldr	r0, [r4, #12]
 800ac18:	9b03      	ldr	r3, [sp, #12]
 800ac1a:	4298      	cmp	r0, r3
 800ac1c:	bfb8      	it	lt
 800ac1e:	4618      	movlt	r0, r3
 800ac20:	e7a4      	b.n	800ab6c <_printf_i+0x168>
 800ac22:	2301      	movs	r3, #1
 800ac24:	4632      	mov	r2, r6
 800ac26:	4649      	mov	r1, r9
 800ac28:	4640      	mov	r0, r8
 800ac2a:	47d0      	blx	sl
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d09b      	beq.n	800ab68 <_printf_i+0x164>
 800ac30:	3501      	adds	r5, #1
 800ac32:	68e3      	ldr	r3, [r4, #12]
 800ac34:	9903      	ldr	r1, [sp, #12]
 800ac36:	1a5b      	subs	r3, r3, r1
 800ac38:	42ab      	cmp	r3, r5
 800ac3a:	dcf2      	bgt.n	800ac22 <_printf_i+0x21e>
 800ac3c:	e7eb      	b.n	800ac16 <_printf_i+0x212>
 800ac3e:	2500      	movs	r5, #0
 800ac40:	f104 0619 	add.w	r6, r4, #25
 800ac44:	e7f5      	b.n	800ac32 <_printf_i+0x22e>
 800ac46:	bf00      	nop
 800ac48:	0800aea9 	.word	0x0800aea9
 800ac4c:	0800aeba 	.word	0x0800aeba

0800ac50 <memmove>:
 800ac50:	4288      	cmp	r0, r1
 800ac52:	b510      	push	{r4, lr}
 800ac54:	eb01 0402 	add.w	r4, r1, r2
 800ac58:	d902      	bls.n	800ac60 <memmove+0x10>
 800ac5a:	4284      	cmp	r4, r0
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	d807      	bhi.n	800ac70 <memmove+0x20>
 800ac60:	1e43      	subs	r3, r0, #1
 800ac62:	42a1      	cmp	r1, r4
 800ac64:	d008      	beq.n	800ac78 <memmove+0x28>
 800ac66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac6e:	e7f8      	b.n	800ac62 <memmove+0x12>
 800ac70:	4402      	add	r2, r0
 800ac72:	4601      	mov	r1, r0
 800ac74:	428a      	cmp	r2, r1
 800ac76:	d100      	bne.n	800ac7a <memmove+0x2a>
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac82:	e7f7      	b.n	800ac74 <memmove+0x24>

0800ac84 <_realloc_r>:
 800ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac88:	4680      	mov	r8, r0
 800ac8a:	4614      	mov	r4, r2
 800ac8c:	460e      	mov	r6, r1
 800ac8e:	b921      	cbnz	r1, 800ac9a <_realloc_r+0x16>
 800ac90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac94:	4611      	mov	r1, r2
 800ac96:	f7ff bb85 	b.w	800a3a4 <_malloc_r>
 800ac9a:	b92a      	cbnz	r2, 800aca8 <_realloc_r+0x24>
 800ac9c:	f7ff fc9c 	bl	800a5d8 <_free_r>
 800aca0:	4625      	mov	r5, r4
 800aca2:	4628      	mov	r0, r5
 800aca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca8:	f000 f81b 	bl	800ace2 <_malloc_usable_size_r>
 800acac:	4284      	cmp	r4, r0
 800acae:	4607      	mov	r7, r0
 800acb0:	d802      	bhi.n	800acb8 <_realloc_r+0x34>
 800acb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acb6:	d812      	bhi.n	800acde <_realloc_r+0x5a>
 800acb8:	4621      	mov	r1, r4
 800acba:	4640      	mov	r0, r8
 800acbc:	f7ff fb72 	bl	800a3a4 <_malloc_r>
 800acc0:	4605      	mov	r5, r0
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d0ed      	beq.n	800aca2 <_realloc_r+0x1e>
 800acc6:	42bc      	cmp	r4, r7
 800acc8:	4622      	mov	r2, r4
 800acca:	4631      	mov	r1, r6
 800accc:	bf28      	it	cs
 800acce:	463a      	movcs	r2, r7
 800acd0:	f7ff fb32 	bl	800a338 <memcpy>
 800acd4:	4631      	mov	r1, r6
 800acd6:	4640      	mov	r0, r8
 800acd8:	f7ff fc7e 	bl	800a5d8 <_free_r>
 800acdc:	e7e1      	b.n	800aca2 <_realloc_r+0x1e>
 800acde:	4635      	mov	r5, r6
 800ace0:	e7df      	b.n	800aca2 <_realloc_r+0x1e>

0800ace2 <_malloc_usable_size_r>:
 800ace2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace6:	1f18      	subs	r0, r3, #4
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bfbc      	itt	lt
 800acec:	580b      	ldrlt	r3, [r1, r0]
 800acee:	18c0      	addlt	r0, r0, r3
 800acf0:	4770      	bx	lr
	...

0800acf4 <_init>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr

0800ad00 <_fini>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	bf00      	nop
 800ad04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad06:	bc08      	pop	{r3}
 800ad08:	469e      	mov	lr, r3
 800ad0a:	4770      	bx	lr
